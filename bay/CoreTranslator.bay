/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang;

use Runtime.lib;
use Runtime.BaseObject;
use BayLang.SaveOpCode;
use BayLang.LangBay.TranslatorBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;


class CoreTranslator extends BaseObject
{
	/* State */
	int opcode_level = 0;
	int indent_level = 0;
	bool last_semicolon = false;
	string indent = "\t";
	string crlf = "\n";
	Dict<bool> preprocessor_flags = {};
	Dict<bool> vars = {};
	Dict<string> uses = {};
	Dict<OpDeclareClass> class_items = {};
	OpDeclareClass current_class = null;
	OpDeclareFunction class_function = null;
	Collection html_var_names = [];
	int var_inc = 0;
	int component_hash_inc = 0;
	string current_block = "";
	string current_class_name = "";
	string current_namespace_name = "";
	string parent_class_name = "";
	bool is_operator_block = false;
	
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		parent();
		this.uses.set("Collection", "Runtime.Collection");
		this.uses.set("Dict", "Runtime.Dict");
	}
	
	
	/**
	 * Get full entity name
	 */
	string getFullName(string class_name)
	{
		if (this.uses.has(class_name))
		{
			return this.uses.get(class_name);
		}
		else
		{
			return this.current_namespace_name ~ "." ~ class_name;
		}
	}
	
	
	/**
	 * Set flag
	 */
	TranslatorBay setFlag(string flag_name, bool value)
	{
		this.preprocessor_flags.set(flag_name, value);
		return this;
	}
	
	
	/**
	 * Increment indent level
	 */
	void levelInc()
	{
		this.indent_level = this.indent_level + 1;
	}
	
	
	/**
	 * Decrease indent level
	 */
	void levelDec()
	{
		this.indent_level = this.indent_level - 1;
	}
	
	
	/**
	 * Increment component hash
	 */
	int componentHashInc()
	{
		this.component_hash_inc = this.component_hash_inc + 1;
		return this.component_hash_inc - 1;
	}
	
	
	/**
	 * Increment variable
	 */
	string varInc()
	{
		this.var_inc = this.var_inc + 1;
		return "__v" ~ (this.var_inc - 1);
	}
	
	
	/**
	 * Decrement variable
	 */
	void varDec()
	{
		this.var_inc = this.var_inc - 1;
	}
	
	
	/**
	 * Returns new line with indent
	 */
	string newLine(int count = 1)
	{
		if (count == 1) return this.crlf ~ rs::str_repeat(this.indent, this.indent_level);
		Collection arr = [];
		for (int i=0; i<count; i++)
		{
			arr.push(this.crlf ~ rs::str_repeat(this.indent, this.indent_level));
		}
		return rs::join("", arr);
	}
	
	
	/**
	 * Returns string
	 */
	string toString(string s)
	{
		return s;
	}
	
	
	/**
	 * Translate BaseOpCode
	 */
	string translate(BaseOpCode op_code)
	{
		return "";
	}
}