/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang;

use BayrellRtl.CoreObject;
use BayrellRtl.ContextObject;
use BayrellRtl.Interfaces.FactoryInterface;
use BayrellRtl.Lib.fs;
use BayrellRtl.Lib.Utils as RtlUtils;
use BayrellLang.LangBay.ParserBay;
use BayrellLang.LangES6.TranslatorES6;
use BayrellLang.CommonParser;
use BayrellLang.CommonTranslator;


class Utils extends ContextObject{
	
	
	/**
	 * Transcompile one language to other
	 * @string string parser_factory_name
	 * @string string translator_factory_name
	 * @string string source
	 * @return string
	 */
	public static string translate(string parser_factory_name, string translator_factory_name, string source, 
	ContextInterface context = null){
		
		CommonParser parser = RtlUtils::factory(parser_factory_name, context);
		CommonTranslator translator = RtlUtils::factory(translator_factory_name, context);
		
		parser.parseString(source);
		BaseOpCode code_tree = parser.getAST();
		string res = translator.translate(code_tree);
		
		delete parser;
		delete translator;
		
		return res;
	}
	
	
	
	/**
	 * Transcompile Bayrell language to other
	 * @string string translator_factory_name
	 * @string string source
	 * @return string
	 */
	public static string translateBay(string translator_factory_name, string source, 
	ContextInterface context = null){
		
		CommonParser parser = new ParserBay(context);
		CommonTranslator translator = RtlUtils::factory(translator_factory_name, context);
		
		parser.parseString(source);
		BaseOpCode code_tree = parser.getAST();
		string res = translator.translate(code_tree);
		
		delete parser;
		delete translator;
		
		return res;
	}
	
	
	
	/**
	 * Transcompile Bayrell language to other
	 * @string string parser_factory_name
	 * @string string translator_factory_name
	 * @string string src_file_name
	 * @string string dest_file_name
	 */
	public static void translateFile(
		string parser_factory_name, 
		string translator_factory_name, 
		string src_file_name, 
		string dest_file_name, 
		ContextInterface context = null
	){
		string content = fs::fileGetContents(src_file_name);
		string res = self::translate(
			parser_factory_name,
			translator_factory_name,
			content,
			context
		);
		
		string dir = fs::dirname(dest_file_name);
		fs::mkdir(dir);
		fs::filePutContents(dest_file_name, res);
	}
	
}