/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangES6;

use Runtime.lib;
use Runtime.re;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangBay.ParserBayHtml;
use Bayrell.Lang.LangES6.TranslatorES6;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAssign;
use Bayrell.Lang.OpCodes.OpCall;
use Bayrell.Lang.OpCodes.OpComment;
use Bayrell.Lang.OpCodes.OpFor;
use Bayrell.Lang.OpCodes.OpHtmlAttribute;
use Bayrell.Lang.OpCodes.OpHtmlContent;
use Bayrell.Lang.OpCodes.OpHtmlItems;
use Bayrell.Lang.OpCodes.OpHtmlTag;
use Bayrell.Lang.OpCodes.OpHtmlValue;
use Bayrell.Lang.OpCodes.OpIf;
use Bayrell.Lang.OpCodes.OpString;
use Bayrell.Lang.OpCodes.OpWhile;


class TranslatorES6Html
{

	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		if (tag_name == "") return false;
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::strtoupper(ch1);
		return ch1 == "{" or ch1 == ch2;
	}
	
	
	
	/**
	 * Translator html value
	 */
	pure list<TranslatorES6, string> OpHtmlAttr(TranslatorES6 t, OpHtmlAttribute attr, int item_pos)
	{
		BaseOpCode op_code = attr.value;
		
		if (attr instanceof OpString)
		{
			return [t, t.expression::toString(op_code.value)];
		}
		if (op_code instanceof OpHtmlValue)
		{
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, op_code.value); t = res[0]; string value = res[1];
				return [t, value];
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; string value = res[1];
				value = "Runtime.rtl.json_encode(ctx, " ~ value ~ ")";
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, op_code); t = res[0]; string value = res[1];
		value = t.o(value, res[0].opcode_level, 13);
		
		return [t, value];
	}
	
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorES6, string> OpHtmlAttrs(
		TranslatorES6 t, Collection<OpHtmlAttribute> attrs, int item_pos
	)
	{
		Vector<string> attr_class = new Vector<string>();
		string attr_s = "null";
		string attr_key_value = "";
		string attr_elem_name = "";
		bool has_attr_key = false;
		
		Vector<string> res_attrs = new Vector();
		
		for (int attrs_i = 0; attrs_i<attrs.count(); attrs_i++)
		{
			OpHtmlAttribute attr = attrs[attrs_i];
		
			if (attr.is_spread) continue;
			
			list res = static::OpHtmlAttr(t, attr);
			t = res[0]; string attr_value = res[1];
			
			string attr_key = attr.key;
			string ch = rs::substr(attr_key, 0, 1);
			bool is_event = rs::substr(attr_key, 0, 7) == "@event:";
			bool is_signal = rs::substr(attr_key, 0, 8) == "@signal:";
			
			if (attr_key == "class")
			{
				attr_class.pushValue(attr_value);
				
				if (attr_elem_name == "" and attr.value instanceof OpString)
				{
					var arr = rs::split(" ", attr.value.value);
					attr_elem_name = t.expression::toString(arr[0]);
				}
				
				continue;
			}
			else if (attr_key == "@key")
			{
				list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
				attr_key_value = attr_value;
				
				continue;
			}
			else if (is_event or is_signal)
			{
				string event_name = "";
				
				if (is_event) event_name = rs::substr(attr_key, 7);
				else if (is_signal) event_name = rs::substr(attr_key, 8);
				
				event_name = t.expression::findModuleName(t, event_name);
				
				if (is_event) attr_key = "@event:" ~ event_name;
				else if (is_signal) attr_key = "@signal:" ~ event_name;
				
				if (attr.value instanceof OpString)
				{
					attr_value = "[component," ~ attr_value ~ "]";
				}
				else
				{
					attr_value = "[component,(msg)=>{" ~ attr_value ~ "}]";
				}
			}
			else if (attr_key == "@ref" or attr_key == "@bind" or attr_key == "@model" or
				attr_key == "@name" or attr_key == "@watch")
			{
				/*res_attrs.push
				(
					t.expression::toString("@model_path") ~
						": this._concat_attrs(ctx, params, \"@model_path\", " ~
						attr_value ~ ")"
				);*/
				attr_value = "[component," ~ attr_value ~ "]";
			}
			
			res_attrs.pushValue
			(
				t.expression::toString(attr_key) ~ ":" ~ attr_value,
			);
		}
			
		res_attrs = res_attrs.filter( bool (string s) => s != "" );
		if (attr_class.count() > 0)
		{
			attr_class.pushValue( "this.getCssHash(ctx)" );
			/*attr_class.push( t.expression::toString("h-" ~ ParserBayHtml::getCssHash(t.current_class_full_name)) );*/
			res_attrs.pushValue
			(
				"\"class\":" ~ "[" ~ rs::join(", ", attr_class) ~ "].join(\" \")"
			);
		}
		if (attr_key_value != "")
		{
			res_attrs.pushValue
			(
				"\"@key\":" ~ attr_key_value
			);
		}
		if (attr_elem_name != "")
		{
			res_attrs.pushValue
			(
				"\"@elem_name\":" ~ attr_elem_name
			);
		}
		if (res_attrs.count() > 0)
		{
			attr_s = "{" ~ rs::join(",", res_attrs) ~ "}";
		}
		else attr_s = "{}";
		
		/* Add spreads */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute attr = attrs[i];
			if (not attr.is_spread) continue;
			attr_s = "this._merge_attrs(ctx, "~attr_s~","~attr.value.value~")";
		}
		
		return [t, attr_s];
	}
	
	
	
	/**
	 * Returns class name
	 */
	pure string getOpHtmlAttrsClassName(Collection<OpHtmlAttribute> attrs)
	{
		Vector<string> class_names = new Vector();
		if (attrs != "")
		{
			for (int attrs_i=0; attrs_i<attrs.count(); attrs_i++)
			{
				OpHtmlAttribute attr = attrs[attrs_i];
				string attr_key = attr.key;
				if (attr_key == "class")
				{
					if (attr.value instanceof OpString)
					{
						class_names.pushValue(attr.value.value);
					}
				}
			}
		}
		return rs::join(" ", class_names);
	}
	
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorES6, string> OpHtmlTag(
		TranslatorES6 t, OpHtmlTag op_code, int item_pos, string var_name)
	{
		string content = "";
		string content2 = "";
		string str_var_name = t.expression::toString(var_name);
		string new_var_name = "";
		list res = t::incSaveOpCode(t); t = res[0]; new_var_name = res[1];
		
		if (op_code instanceof OpHtmlContent)
		{
			string item_value = t.expression::toString(op_code.value);
			content ~= t.s("/* Text */");
			content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
				".e(ctx, \"t\", \"\", null, " ~ item_value ~ ");");
		}
		else if (op_code instanceof OpHtmlValue)
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/

			list res = t.expression::Expression(t, op_code.value);
			t = res[0]; string item_value = res[1];

			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;

			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				content ~= t.s("/* Raw */");
				content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
					".e(ctx, \"r\", \"\", null, " ~ item_value ~ ");");
			}
			else if (op_code.kind == OpHtmlValue::KIND_HTML)
			{
				content ~= t.s("/* Html */");
				content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
					".e(ctx, \"h\", \"\", null, " ~ item_value ~ ");");
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				content ~= t.s("/* Text */");
				item_value = "Runtime.rtl.json_encode(ctx, " ~ item_value ~ ")";
				content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
					".e(ctx, \"t\", \"\", null, " ~ item_value ~ ");");
			}
		}
		else if (op_code instanceof OpHtmlTag)
		{
			bool has_childs = (op_code.items != null) and
				(op_code.items.items != null) and
				(op_code.items.items.count() > 0)
			;
			bool is_component = static::isComponent(op_code.tag_name);
			
			Collection<OpHtmlAttribute> op_code_attrs = op_code.attrs.filter(
				bool (OpHtmlAttribute attr) => attr.key != "@render"
			);
			
			list res = static::OpHtmlAttrs(t, op_code_attrs, item_pos);
			t = res[0]; string attrs = res[1];
			
			if (op_code.tag_name == "")
			{
				content ~= t.s("/* Items */");
				content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~ ".e(ctx, \"empty\");");
			}
			else if (is_component)
			{
				string tag_name = "";
				if (op_code.op_code_name)
				{
					list res = t.expression::Expression(t, op_code.op_code_name);
					t = res[0]; tag_name = res[1];
				}
				else tag_name = t.expression::toString(
					t.expression::findModuleName(t, op_code.tag_name)
				);
				if (has_childs)
				{
					list res = static::OpHtmlItems(t, op_code.items);
					t = res[0]; string f = res[1];
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("let " ~ new_var_name ~ " = " ~
						var_name ~ ".e(ctx, \"c\"," ~ tag_name ~ ", " ~
						attrs ~ ", " ~ f ~ ");");
					has_childs = false;
				}
				else
				{
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("let " ~ new_var_name ~ " = " ~
						var_name ~ ".e(ctx, \"c\", " ~
						tag_name ~ ", " ~ attrs ~ ");");
				}
			}
			else
			{
				OpHtmlAttribute render_attr = op_code.attrs.findItem(
					bool (OpHtmlAttribute attr) => attr.key == "@render"
				);
				
				if (render_attr)
				{
					string render_attrs = "";
					if (render_attr and render_attr.value instanceof OpString)
					{
						string render_attr_value = render_attr.value.value;
						render_attr_value = t.expression::toString(render_attr_value);
						render_attrs = "{\"@ref\":[component," ~ render_attr_value ~ "]}";
					}
					
					OpHtmlTag new_op_code = op_code.copy({
						"attrs": op_code_attrs,
					});
					
					OpHtmlItems op_code_html_items = new OpHtmlItems{
						"items": [
							new_op_code
						],
					};
					
					list res = static::OpHtmlItems(t, op_code_html_items);
					t = res[0]; string f = res[1];
					
					content ~= t.s("/* Render function '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
						".e(ctx, \"f\", \"\", " ~ render_attrs ~ ", " ~ f ~ ");");
					list res = t::incSaveOpCode(t); t = res[0]; new_var_name = res[1];
					
					has_childs = false;
				}
				else
				{
					string tag_name = t.expression::toString(op_code.tag_name);
					string attr_class_name = static::getOpHtmlAttrsClassName(op_code_attrs);
					attr_class_name = rs::replace("\s", ".", attr_class_name);
					if (attr_class_name != "") attr_class_name = "." ~ attr_class_name;
					
					content ~= t.s("/* Element '" ~ op_code.tag_name ~ attr_class_name ~ "' */");
					if (op_code.tag_name == 'svg')
					{
						string svg_content = op_code["items", "items", 0, "value", "value"]
							|> default string ""
						;
						svg_content = t.expression::toString(svg_content);
						content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
							".e(ctx, \"e\", " ~ tag_name ~ ", " ~ attrs ~ ");");
						has_childs = false;
					}
					else
					{
						content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
							".e(ctx, \"e\", " ~ tag_name ~ ", " ~ attrs ~ ");");
					}
				}
			}
			
			if (has_childs)
			{
				content ~= t.s2("");
				list res = static::OpHtmlChilds(t, op_code.items, new_var_name);
				t = res[0]; content ~= res[1];
				content ~= t.s(new_var_name ~ ".p(ctx);");
			}
		}
		else
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			string item_value = "";
			
			if (op_code instanceof OpCall)
			{
				list res = t.expression::OpCall(t, op_code);
				t = res[0]; item_value ~= res[1];
			}
			else
			{
				list res = t.expression::Expression(t, op_code);
				t = res[0]; item_value = res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;

			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			content ~= t.s("/* Text */");
			content ~= t.s("let " ~ new_var_name ~ " = " ~ var_name ~
				".e(ctx, \"t\", \"\", null, " ~ item_value ~ ");");
		}
		
		return [t, content];
	}
	
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorES6, string> OpHtmlChilds
	(
		TranslatorES6 t, OpHtmlItems op_code, string control_name
	)
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		string save_control_name = t.html_var_name;
		t <= html_var_name <= control_name;
		
		bool next_space = true;
		string content = "";
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			string op_content = "";
			if (i > 0 and next_space) content ~= t.s2("");
			if (not next_space) next_space = true;
			
			if (item instanceof OpAssign)
			{
				list res = t.operator::OpAssign(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpComment)
			{
				list res = t.operator::OpComment(t, item);
				t = res[0]; op_content ~= res[1];
				next_space = false;
			}
			else if (item instanceof OpFor)
			{
				list res = t.operator::OpFor(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpIf)
			{
				list res = t.operator::OpIf(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpWhile)
			{
				
				list res = t.operator::OpWhile(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else
			{
				list res = static::OpHtmlTag(t, item, i, control_name);
				t = res[0]; op_content ~= res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			if (op_content != "") content ~= op_content;
			
			/* Restore save op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
		}
		
		/*
		if (control_name != "control" and patch_flag)
		{
			content ~= t.s("RenderDriver.p(" ~ control_name ~ ", " ~ control_name ~ "_childs);");
		}
		*/
		
		t <= html_var_name <= save_control_name;
		
		return [t, content];
	}
	
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorES6, string> OpHtmlItems(TranslatorES6 t, OpHtmlItems op_code)
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		/* Save op codes */
		TranslatorES6 save_t = t;
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		/*int save_op_code_inc = t.save_op_code_inc;*/
		
		string content = "";
		content ~= "(ctx, __v) =>";
		content ~= t.s("{");
		t = t.levelInc();
		
		content ~= t.s("let layout = component.layout();");
		content ~= t.s("let model_path = component.model_path;");
		content ~= t.s("let model = component.model();");
		
		/* content ~= t.s("var __vnull = null;"); */
		/* content ~= t.s("var __c_childs = [];"); */
		content ~= t.s2("");
		
		list res = static::OpHtmlChilds(t, op_code, "__v");
		t = res[0]; content ~= res[1];
		/*content ~= t.s("RenderDriver.p(__c, __c_childs);");*/
		
		/* content ~= t.s2(""); */
		/* content ~= t.s("return __c_childs;"); */
		
		t = t.levelDec();
		content ~= t.s("}");
		
		/* Restore save op codes */
		t <= save_op_codes <= save_op_codes;
		/*t <= save_op_code_inc <= save_op_code_inc;*/
		
		return [t, content];
	}
	
	
	
	/**
	 * Translate html
	 */
	pure list<TranslatorES6, string> OpHtml(TranslatorES6 t, OpHtmlItems op_code)
	{
		string content = "";
		list res = static::OpHtmlItems(t, op_code); t = res[0]; content ~= res[1];
		return [t, content];
	}
}