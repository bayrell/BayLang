/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.BaseObject;
use BayLang.LangBay.ParserBayHtml;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAssignValue;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlCSS;
use BayLang.OpCodes.OpHtmlCSSAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpTypeIdentifier;


class TranslatorES6Html extends BaseObject
{
	TranslatorES6 translator = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(TranslatorES6 translator)
	{
		parent();
		this.translator = translator;
	}
	
	
	/**
	 * OpHtmlContent
	 */
	void OpHtmlContent(OpHtmlContent op_code, Collection<string> result)
	{
		string var_name = this.translator.html_var_names.last();
		result.push(var_name ~ ".push(" ~ this.translator.toString(op_code.value) ~ ");");
	}
	
	
	/**
	 * OpHtmlExpression
	 */
	void OpHtmlExpression(BaseOpCode op_code, Collection<string> result)
	{
		string var_name = this.translator.html_var_names.last();
		result.push(var_name ~ ".push(");
		this.translator.expression.translate(op_code, result);
		result.push(");");
	}
	
	
	/**
	 * OpHtmlSlot
	 */
	void OpHtmlSlot(BaseOpCode op_code, Collection<string> result)
	{
		string var_name = this.translator.html_var_names.last();
		result.push("/* Slot " ~ op_code.name ~ " */");
		result.push(this.translator.newLine());
		result.push(var_name ~ ".slot(");
		result.push(this.translator.toString(op_code.name) ~ ", ");
		this.translator.expression.translate(op_code, result);
		result.push(");");
	}
	
	
	/**
	 * OpHtmlAttrs
	 */
	Collection OpHtmlAttrs(Collection<OpHtmlAttribute> attrs)
	{
		Collection result = [];
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute item = attrs.get(i);
			Collection item_result = [];
			item_result.push(this.translator.toString(item.key));
			item_result.push(": ");
			bool is_function = item.expression instanceof OpDeclareFunction;
			if (is_function)
			{
				int hash_value = this.translator.componentHashInc();
				item_result.push("this.hash(" ~ hash_value ~ ") ? this.hash(" ~ hash_value ~ ") : ");
			}
			this.translator.expression.translate(item.expression, item_result);
			result.push(rs::join("", item_result));
		}
		return result;
	}
	
	
	/**
	 * Returns tag name
	 */
	string getTagName(var tag_name)
	{
		if (tag_name instanceof OpIdentifier)
		{
			string rtl = this.translator.getUseModule("rtl");
			return [tag_name.value, rtl ~ ".findClass(" ~ tag_name.value ~ ")"];
		}
		if (ParserBayHtml::isComponent(tag_name))
		{
			string module_name = this.translator.getUseModule(tag_name);
			return [module_name, module_name];
		}
		return [tag_name, this.translator.toString(tag_name)];
	}
	
	
	/**
	 * OpHtmlTag
	 */
	void OpHtmlTag(OpHtmlTag op_code, Collection<string> result)
	{
		string var_name = this.translator.html_var_names.last();
		string current_var_name = this.translator.varInc();
		
		Collection attrs = this.OpHtmlAttrs(op_code.attrs, result);
		string attrs_str = attrs.count() > 0 ? ", {" ~ rs::join(", ", attrs) ~ "}" : "";
		
		string tag_name = this.getTagName(op_code.tag_name);
		result.push("/* Element " ~ tag_name.get(0) ~ " */");
		result.push(this.translator.newLine());
		result.push("let " ~ current_var_name ~ " = " ~ var_name ~
			".element(" ~ tag_name.get(1) ~ attrs_str ~ ");");
		
		if (op_code.content and op_code.content.count() > 0)
		{
			this.translator.html_var_names.push(current_var_name);
			bool is_slot = op_code.content.items
				.filter(bool (BaseOpCode item) => item instanceof OpHtmlSlot)
				.count() == op_code.content.count()
			;
			if (ParserBayHtml::isComponent(op_code.tag_name) and not is_slot)
			{
				OpDeclareFunction op_code_item = new OpDeclareFunction
				{
					"is_html": true,
					"content": op_code.content,
				};
				result.push(this.translator.newLine());
				result.push(current_var_name ~ ".content(");
				this.OpDeclareFunction(op_code_item, result);
				result.push(");");
			}
			else
			{
				this.OpHtmlItems(op_code.content, result, true);
			}
			this.translator.html_var_names.pop();
		}
	}
	
	
	/**
	 * Translate item
	 */
	void translateItem(BaseOpCode op_code, Collection<string> result, bool new_line = false)
	{
		if (op_code instanceof OpHtmlContent)
		{
			this.OpHtmlContent(op_code, result);
		}
		else if (op_code instanceof OpHtmlSlot)
		{
			if (new_line) result.push(this.translator.newLine());
			this.OpHtmlSlot(op_code, result);
		}
		else if (op_code instanceof OpHtmlTag)
		{
			if (new_line) result.push(this.translator.newLine());
			this.OpHtmlTag(op_code, result);
		}
		else if (op_code instanceof OpAssign)
		{
			this.translator.operator.OpAssign(op_code, result);
			result.push(";");
		}
		else if (op_code instanceof OpFor)
		{
			if (new_line) result.push(this.translator.newLine());
			this.translator.operator.OpFor(op_code, result);
		}
		else if (op_code instanceof OpIf)
		{
			if (new_line) result.push(this.translator.newLine());
			this.translator.operator.OpIf(op_code, result);
		}
		else
		{
			this.OpHtmlExpression(op_code, result);
		}
	}
	
	
	/**
	 * OpHtmlItems
	 */
	void OpHtmlItems(OpHtmlItems op_code, Collection<string> result, bool new_line = false)
	{
		if (not op_code) return;
		for (int i=0; i<op_code.count(); i++)
		{
			BaseOpCode op_code_item = op_code.get(i);
			result.push(this.translator.newLine());
			this.translateItem(op_code_item, result, new_line or i > 0);
		}
	}
	
	
	/**
	 * OpDeclareFunction
	 */
	bool OpDeclareFunction(OpDeclareFunction op_code, Collection<string> result)
	{
		/* Setup current function */
		OpDeclareFunction old_function = this.translator.current_function;
		this.translator.current_function = op_code;
		
		/* Comments */
		if (op_code.comments)
		{
			for (int i=0; i<op_code.comments.count(); i++)
			{
				OpComment op_code_item = op_code.comments.get(i);
				this.translator.program.OpComment(op_code_item, result);
				result.push(this.translator.newLine());
			}
		}
		
		/* Function name */
		if (old_function == null)
		{
			result.push(op_code.name);
			result.push(": ");
		}
		
		/* Function flags */
		if (op_code.flags)
		{
			Collection flags = [];
			if (op_code.flags.isFlag("async")) flags.push("async");
			result.push(rs::join(" ", flags));
			if (flags.count() > 0) result.push(" ");
		}
		
		if (old_function == null) result.push("function");
		result.push("(");
		this.translator.program.OpDeclareFunctionArgs(op_code, result);
		result.push(")");
		
		/* Add arrow */
		if (this.translator.is_operator_block)
		{
			result.push(" =>");
		}
		
		result.push(this.translator.newLine());
		result.push("{");
		this.translator.levelInc();
		
		/* Create Virtual Dom */
		result.push(this.translator.newLine());
		result.push("let __v = new Runtime.VirtualDom(this);");
		
		/* Save old var names */
		int old_var_inc = this.translator.var_inc;
		this.translator.var_inc = 0;
		Collection old_var_names = this.translator.html_var_names.slice();
		this.translator.html_var_names = [];
		this.translator.html_var_names.push("__v");
		
		/* Save modules */
		Dict save_use_modules = this.translator.setUseModules();
		
		/* Function content */
		Collection item_result = [];
		bool save_operator_block = this.translator.is_operator_block;
		this.translator.is_operator_block = true;
		this.OpHtmlItems(op_code.content, item_result, true);
		this.translator.is_operator_block = save_operator_block;
		
		/* Add modules */
		this.translator.addUseModules(result);
		result.appendItems(item_result);
		
		/* Restore */
		this.translator.var_inc = old_var_inc;
		this.translator.html_var_names = old_var_names;
		this.translator.setUseModules(save_use_modules);
		
		/* Return Virtual Dom */
		result.push(this.translator.newLine());
		result.push(this.translator.newLine());
		result.push("return __v;");
		
		this.translator.levelDec();
		result.push(this.translator.newLine());
		result.push("}");
		
		/* Restore old function */
		this.translator.current_function = old_function;
		
		return true;
	}
	
	
	/**
	 * Translate component body
	 */
	void translateComponentBody(OpDeclareClass op_code, Collection<string> result, string kind)
	{
		bool next_new_line = true;
		for (int i=0; i<op_code.content.count(); i++)
		{
			BaseOpCode op_code_item = op_code.content.get(i);
			if (op_code_item instanceof OpDeclareFunction)
			{
				/* Check if static */
				bool is_static = op_code_item.flags and
					(op_code_item.flags.isFlag("static") or op_code_item.flags.isFlag("pure"));
				if (is_static)
				{
					continue;
				}
				
				if (kind == "methods" and
					op_code_item.flags and op_code_item.flags.isFlag("computed"))
				{
					continue;
				}
				if (kind == "computed")
				{
					if (not op_code_item.flags) continue;
					else if (not op_code_item.flags.isFlag("computed")) continue;
				}
				
				/* Check if html function */
				if (not op_code_item.is_html)
				{
					if (next_new_line) result.push(this.translator.newLine());
					next_new_line = true;
					this.translator.program.OpDeclareFunction(op_code_item, result);
					result.push(",");
					continue;
				}
				
				Collection item_result = [];
				next_new_line = this.OpDeclareFunction(op_code_item, item_result, false);
				if (next_new_line)
				{
					result.push(this.translator.newLine());
					result.appendItems(item_result);
					result.push(",");
				}
			}
		}
	}
	
	
	/**
	 * Translate component static functions
	 */
	void translateComponentStatic(OpDeclareClass op_code, Collection<string> result)
	{
		for (int i=0; i<op_code.content.count(); i++)
		{
			BaseOpCode op_code_item = op_code.content.get(i);
			if (op_code_item instanceof OpDeclareFunction)
			{
				/* Check if static */
				bool is_static = op_code_item.flags and
					(op_code_item.flags.isFlag("static") or op_code_item.flags.isFlag("pure"));
				if (not is_static)
				{
					continue;
				}
				
				/* Check if html function */
				if (op_code_item.is_html) continue;
				
				result.push(this.translator.newLine());
				this.translator.program.OpDeclareFunction(op_code_item, result);
				result.push(",");
			}
		}
	}
	
	
	/**
	 * Combine selector
	 */
	Collection<string> combineSelector(Collection<string> path, string selector)
	{
		bool need_add_hash = true;
		for (int i=0; i<path.count(); i++)
		{
			string item = path.get(i);
			if (rs::charAt(item, 0) != "@")
			{
				need_add_hash = false;
				break;
			}
		}
		
		Collection<string> items = rs::split(" ", selector);
		if (need_add_hash)
		{
			string css_hash = rs::getCssHash(this.translator.current_class_name);
			items.set(0, items.get(0) ~ ".h-" ~ css_hash);
		}
		return path.concat(rs::join(" ", items));
	}
	
	
	/**
	 * Translate CSS
	 */
	void OpHtmlCSS(OpHtmlCSS op_code, Collection<string> result, Collection<string> path)
	{
		Collection item_result = [];
		Collection item_content = [];
		Collection<string> selector = this.combineSelector(path, op_code.selector);
		for (int i=0; i<op_code.items.count(); i++)
		{
			BaseOpCode op_code_item = op_code.items.get(i);
			if (op_code_item instanceof OpHtmlCSS)
			{
				this.OpHtmlCSS(op_code_item, item_result, selector);
			}
			else if (op_code_item instanceof OpHtmlCSSAttribute)
			{
				item_content.push(op_code_item.key ~ ": " ~ op_code_item.value ~ ";");
			}
		}
		if (item_content.count() > 0)
		{
			result.push(rs::join(" ", selector));
			result.push("{");
			result.push(rs::substr(rs::join("", item_content), 0, -1));
			result.push("}");
		}
		result.appendItems(item_result);
	}
	
	
	/**
	 * Translate HTML Style
	 */
	void OpHtmlStyle(OpHtmlStyle op_code, Collection<string> result)
	{
		for (int i=0; i<op_code.content.count(); i++)
		{
			BaseOpCode op_code_item = op_code.content.get(i);
			this.OpHtmlCSS(op_code_item, result, []);
		}
	}
	
	
	/**
	 * Translate component style
	 */
	void translateComponentStyle(OpDeclareClass op_code, Collection<string> result)
	{
		Collection<OpHtmlStyle> items = op_code.content.items.filter(
			bool (BaseOpCode item) => item instanceof OpHtmlStyle
		);
		
		Collection<string> css_content = [];
		for (int i=0; i<items.count(); i++)
		{
			OpHtmlStyle op_code_item = items.get(i);
			this.OpHtmlStyle(op_code_item, css_content);
		}
		
		result.push(this.translator.newLine());
		result.push("getComponentStyle: function(){ ");
		result.push("return " ~ this.translator.toString(rs::join("", css_content)) ~ "; ");
		result.push("},");
	}
	
	
	/**
	 * Translate component data
	 */
	void OpDeclareComponentData(OpDeclareClass op_code, Collection<string> result, bool is_props)
	{
		bool has_data = false;
		Collection item_result = [];
		item_result.push(this.translator.newLine());
		if (is_props) item_result.push("props: {");
		else item_result.push("data: function()");
		if (not is_props)
		{
			item_result.push(this.translator.newLine());
			item_result.push("{");
			this.translator.levelInc();
			item_result.push(this.translator.newLine());
			item_result.push("return {");
		}
		this.translator.levelInc();
		for (int i=0; i<op_code.content.count(); i++)
		{
			BaseOpCode op_code_item = op_code.content.get(i);
			if (op_code_item instanceof OpAssign and (is_props and op_code_item.flags.isFlag("props") or not is_props and not op_code_item.flags.isFlag("props")))
			{
				for (int j=0; j<op_code_item.items.count(); j++)
				{
					has_data = true;
					OpAssignValue op_code_assign = op_code_item.items.get(j);
					OpIdentifier item = op_code_assign.value;
					item_result.push(this.translator.newLine());
					if (is_props) item_result.push(item.value ~ ": {default: ");
					else item_result.push(item.value ~ ": ");
					this.translator.expression.translate(op_code_assign.expression, item_result);
					if (is_props) item_result.push("},");
					else item_result.push(",");
				}
			}
		}
		this.translator.levelDec();
		if (not is_props)
		{
			item_result.push(this.translator.newLine());
			item_result.push("};");
			this.translator.levelDec();
		}
		item_result.push(this.translator.newLine());
		item_result.push("},");
		if (has_data) result.appendItems(item_result);
	}
	
	
	/**
	 * Translate component
	 */
	bool translateComponent(OpDeclareClass op_code, Collection<string> result)
	{
		/* Class name */
		string class_name = op_code.name.entity_name.items.last().value;
		this.translator.parent_class_name = "";
		this.translator.current_class = op_code;
		this.translator.current_class_name = this.translator.current_namespace_name ~ "." ~
			op_code.name.entity_name.getName();
		
		/* Add use */
		this.translator.uses.set(class_name, this.translator.current_class_name);
		this.translator.class_items.set(class_name, this.translator.current_class_name);
		
		/* Extends */
		if (op_code.class_extends)
		{
			this.translator.parent_class_name = this.translator.getFullName(
				op_code.class_extends.entity_name.getName()
			);
		}
		else
		{
			if (this.translator.current_class_name != "Runtime.Component")
			{
				this.translator.parent_class_name = "Runtime.Component";
			}
		}
		
		/* Define class */
		result.push(this.translator.current_class_name ~ " = {");
		this.translator.levelInc();
		result.push(this.translator.newLine());
		
		/* Component name */
		result.push("name: " ~ this.translator.toString(this.translator.current_class_name) ~ ",");
		if (this.translator.parent_class_name)
		{
			result.push(this.translator.newLine());
			result.push("extends: " ~ this.translator.parent_class_name ~ ",");
		}
		
		/* Component data */
		this.OpDeclareComponentData(op_code, result, true);
		this.OpDeclareComponentData(op_code, result, false);
		
		/* Component methods */
		result.push(this.translator.newLine());
		result.push("methods:");
		result.push(this.translator.newLine());
		result.push("{");
		this.translator.levelInc();
		
		/* Component methods */
		this.translateComponentBody(op_code, result, "methods");
		
		this.translator.levelDec();
		result.push(this.translator.newLine());
		result.push("},");
		
		/* Component computed */
		Collection computed_result = [];
		computed_result.push(this.translator.newLine());
		computed_result.push("computed:");
		computed_result.push(this.translator.newLine());
		computed_result.push("{");
		this.translator.levelInc();
		
		/* Translate items */
		Collection item_result = [];
		this.translateComponentBody(op_code, item_result, "computed");
		computed_result.appendItems(item_result);
		
		this.translator.levelDec();
		computed_result.push(this.translator.newLine());
		computed_result.push("},");
		if (item_result.count() > 0) result.appendItems(computed_result);
		
		/* Static functions */
		this.translateComponentStatic(op_code, result);
		this.translateComponentStyle(op_code, result);
		this.translator.program.translateClassInit(op_code, result, false);
		
		this.translator.levelDec();
		result.push(this.translator.newLine());
		result.push("};");
		
		/* Register class */
		if (this.translator.use_module_name)
		{
			result.push(this.translator.newLine());
			result.push("use.add(" ~ this.translator.current_class_name ~ ");");
		}
		if (this.translator.use_window)
		{
			result.push(this.translator.newLine());
			result.push("window[\"" ~ this.translator.current_class_name ~ "\"] = " ~
				this.translator.current_class_name ~ ";");
		}
		
		return true;
	}
}