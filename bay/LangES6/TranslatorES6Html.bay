/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.lib;
use Runtime.re;
use BayLang.SaveOpCode;
use BayLang.LangBay.ParserBayHtml;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpWhile;


class TranslatorES6Html
{
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		if (tag_name == "") return false;
		if (tag_name == "Teleport") return false;
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::upper(ch1);
		return ch1 == "{" or ch1 == ch2;
	}
	
	
	/**
	 * Translator html value
	 */
	pure list<TranslatorES6, string> OpHtmlAttr(TranslatorES6 t, OpHtmlAttribute attr)
	{
		BaseOpCode op_code = attr.value;
		
		if (op_code instanceof OpString)
		{
			return [t, t.expression::toString(op_code.value)];
		}
		if (op_code instanceof OpHtmlValue)
		{
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, op_code.value);
				t = res[0]; string value = res[1];
				return [t, value];
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; string value = res[1];
				value = "Runtime.rtl.json_encode(" ~ value ~ ")";
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, op_code);
		t = res[0]; string value = res[1];
		
		value = t.o(value, res[0].opcode_level, 13);
		
		return [t, value];
	}
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorES6, string> OpHtmlAttrs(
		TranslatorES6 t, Collection<OpHtmlAttribute> attrs,
		bool is_component = false
	)
	{
		Vector<string> attr_class = new Vector<string>();
		string attr_s = "null";
		string attr_key_value = "";
		string attr_elem_name = "";
		bool has_attr_key = false;
		
		Vector<string> res_attrs = new Vector();
		
		for (int attrs_i = 0; attrs_i<attrs.count(); attrs_i++)
		{
			OpHtmlAttribute attr = attrs[attrs_i];
		
			if (attr.is_spread) continue;
			
			list res = static::OpHtmlAttr(t, attr);
			t = res[0]; string attr_value = res[1];
			
			string attr_key = attr.key;
			string ch = rs::substr(attr_key, 0, 1);
			bool is_event = rs::substr(attr_key, 0, 7) == "@event:";
			
			if (attr_key == "class")
			{
				attr_class.push(attr_value);
				
				if (attr_elem_name == "" and attr.value instanceof OpString)
				{
					var arr = rs::split(" ", attr.value.value);
					attr_elem_name = t.expression::toString(arr[0]);
				}
				
				continue;
			}
			else if (attr_key == "@key")
			{
				list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
				attr_key_value = attr_value;
				
				continue;
			}
			else if (is_event)
			{
				string event_name = rs::substr(attr_key, 7);
				attr_key = rs::substr(attr_key, 7);
				if (rs::substr(attr_key, 0, 2) != "on")
				{
					string first = rs::upper(rs::substr(attr_key, 0, 1));
					string second = rs::substr(attr_key, 1);
					attr_key = "on" ~ first ~ second;
				}
			}
			else if (attr_key == "@global")
			{
				attr_key = "model";
				attr_value = "this._model(" ~ attr_value ~ ", true)";
			}
			else if (attr_key == "@model")
			{
				attr_key = "model";
				attr_value = "this._model(" ~ attr_value ~ ")";
			}
			else if (attr_key == "@ref")
			{
				attr_key = "ref";
			}
			/*
			else if (attr_key == "@ref" or attr_key == "@bind" or attr_key == "@model" or
				attr_key == "@name" or attr_key == "@watch")
			{
				attr_value = "[component," ~ attr_value ~ "]";
			}
			else if (attr_key == "@global")
			{
				attr_key = "@model";
				attr_value = "[null," ~ attr_value ~ "]";
			}
			*/
			res_attrs.push
			(
				t.expression::toString(attr_key) ~ ":" ~ attr_value,
			);
		}
			
		res_attrs = res_attrs.filter( bool (string s) => s != "" );
		
		/* Add debug component */
		if (t.preprocessor_flags.get("DEBUG_COMPONENT") and not is_component)
		{
			attr_class.push("\"debug_component\"");
		}
		
		/* Attrs */
		if (attr_class.count() > 0)
		{
			res_attrs.push
			(
				"\"class\":" ~ "this._class_name([" ~ rs::join(", ", attr_class) ~ "])"
			);
		}
		if (attr_key_value != "")
		{
			res_attrs.push
			(
				"\"key\":" ~ attr_key_value
			);
		}
		/*
		else if (attr_elem_name != "")
		{
			res_attrs.push
			(
				"\"key\":" ~ attr_elem_name
			);
		}
		*/
		
		/* Add debug component */
		if (t.preprocessor_flags.get("DEBUG_COMPONENT"))
		{
			if (is_component)
			{
				res_attrs.push
				(
					"\"data_widget_path\": \"" ~ rs::join(".", t.debug_component) ~ "\""
				);
			}
			else
			{
				res_attrs.push
				(
					"\"data-widget-path\": \"" ~ rs::join(".", t.debug_component) ~ "\""
				);
			}
		}
		
		if (res_attrs.count() > 0)
		{
			attr_s = "{" ~ rs::join(",", res_attrs) ~ "}";
		}
		else attr_s = "{}";
		
		/* Add spreads */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute attr = attrs[i];
			if (not attr.is_spread) continue;
			attr_s = "this._merge_attrs(" ~ attr_s ~ ", " ~ attr.value.value ~ ")";
		}
		
		return [t, attr_s];
	}
		
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorES6, string> OpHtmlTag(
		TranslatorES6 t, OpHtmlTag op_code, string var_name
	)
	{
		string content = "";
		string content2 = "";
		string str_var_name = t.expression::toString(var_name);
		
		if (op_code instanceof OpHtmlContent)
		{
			string item_value = t.expression::toString(op_code.value);
			content ~= t.s("/* Text */");
			content ~= t.s("this._t(" ~ var_name ~ ", " ~ item_value ~ ");");
		}
		else if (op_code instanceof OpHtmlValue)
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/

			list res = t.expression::Expression(t, op_code.value);
			t = res[0]; string item_value = res[1];

			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;

			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				content ~= t.s("/* Raw */");
				content ~= t.s("this._t(" ~ var_name ~ ", " ~
					"new Runtime.RawString(" ~ item_value ~ "));");
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				content ~= t.s("/* Text */");
				item_value = "Runtime.rtl.json_encode(" ~ item_value ~ ")";
				content ~= t.s("this._t(" ~ var_name ~ ", " ~ item_value ~ ");");
			}
		}
		else if (op_code instanceof OpHtmlTag)
		{
			string new_var_name = "";
			list res = t::incSaveOpCode(t); t = res[0]; new_var_name = res[1];
			
			bool has_childs = (op_code.items != null) and
				(op_code.items.items != null) and
				(op_code.items.items.count() > 0)
			;
			bool is_component = static::isComponent(op_code.tag_name);
			
			Collection<OpHtmlAttribute> op_code_attrs = op_code.attrs.filter(
				bool (OpHtmlAttribute attr) => attr.key != "@render"
			);
			
			list res = static::OpHtmlAttrs(t, op_code_attrs, is_component);
			t = res[0]; string attrs = res[1];
			
			if (op_code.tag_name == "")
			{
			}
			else if (is_component)
			{
				string tag_name = "";
				if (op_code.op_code_name)
				{
					list res = t.expression::Expression(t, op_code.op_code_name);
					t = res[0]; tag_name = res[1];
				}
				else
				{
					tag_name = t.expression::toString(
						t.expression::findModuleName(t, op_code.tag_name)
					);
				}
				if (has_childs)
				{
					list res = static::OpHtmlItemsAsFunction(t, op_code.items);
					t = res[0]; string f = res[1];
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("let " ~ new_var_name ~ " = " ~
						"this._c(" ~ var_name ~ ", " ~ tag_name ~ ", " ~ attrs ~ ", " ~ f ~ ");"
					);
					has_childs = false;
				}
				else
				{
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("let " ~ new_var_name ~ " = " ~
						"this._c(" ~ var_name ~ ", " ~ tag_name ~ ", " ~ attrs ~ ");");
				}
			}
			else
			{
				if (op_code.tag_name == "Teleport")
				{
					content ~= t.s("/* Teleport */");
					content ~= t.s("let " ~ new_var_name ~ " = " ~
						"this._teleport(" ~ var_name ~ ", " ~ attrs ~ ");");
				}
				else
				{
					content ~= t.s("/* Element '" ~ op_code.tag_name ~ "' */");
					string tag_name = t.expression::toString(op_code.tag_name);
					content ~= t.s("let " ~ new_var_name ~ " = " ~
						"this._e(" ~ var_name ~ ", " ~ tag_name ~ ", " ~ attrs ~ ");");
				}
			}
			
			if (has_childs)
			{
				list res = static::OpHtmlItems(t, op_code.items, new_var_name, true);
				t = res[0]; content ~= res[1];
			}
		}
		else
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			string item_value = "";
			
			if (op_code instanceof OpCall)
			{
				list res = t.expression::OpCall(t, op_code);
				t = res[0]; item_value ~= res[1];
			}
			else
			{
				list res = t.expression::Expression(t, op_code);
				t = res[0]; item_value = res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			
			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			content ~= t.s("/* Render */");
			content ~= t.s("this._t(" ~ var_name ~ ", " ~ item_value ~ ");");
		}
		
		return [t, content];
	}
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorES6, string> OpHtmlExpression
		(TranslatorES6 t, OpHtmlItems op_code)
	{
		string content = "";
		content ~= t.s("let __v = [];");
		list res = static::OpHtmlItems(t, op_code, "__v", true);
		t = res[0];
		content ~= res[1];
		content ~= t.s2("");
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"content": content,
			}
		);
		t = res[0];
		
		return [t, "this._flatten(__v)"];
	}
	
	
	/**
	 * Translator html slot
	 */
	pure list<TranslatorES6, string> OpHtmlSlot
		(TranslatorES6 t, OpHtmlItems op_code)
	{
		string content = "{";
		t = t.levelInc();
		
		Collection debug_component = t.debug_component.slice();
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlSlot item = op_code.items.item(i);
			if (not(item instanceof OpHtmlSlot)) continue;
			
			t <= debug_component <= debug_component.pushIm(i);
			content ~= t.s(t.expression::toString(item.name) ~ ": ");
			list res = static::OpHtmlItemsAsFunction(t, item.items, item.args);
			t = res.get(0); content ~= res.get(1) ~ ",";
		}
		
		t = t.levelDec();
		content ~= t.s("}");
		return [t, content];
	}
	
	
	/**
	 * Translator html items as function
	 */
	pure list<TranslatorES6, string> OpHtmlItemsAsFunction
		(TranslatorES6 t, OpHtmlItems op_code, Collection<OpDeclareFunctionArg> args = null)
	{
		/* If slot */
		if (op_code.items.get(0) instanceof OpHtmlSlot)
		{
			return static::OpHtmlSlot(t, op_code);
		}
		
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		t <= save_op_code_inc <= 0;
		
		string content = "() => {";
		if (args != null)
		{
			list res = t.operator::OpDeclareFunctionArgs(t,
				new OpDeclareFunction
				{
					"args": args,
					"is_context": false,
				}
			);
			content = "(" ~ res[1] ~ ") => {";
		}
		t = t.levelInc();
		
		list res = static::OpHtmlExpression(t, op_code);
		t = res[0];
		
		/* Output save op code */
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= t.s("return " ~ res[1] ~ ";");
		
		t = t.levelDec();
		content ~= t.s("}");
		
		/* Restore save op codes */
		t <= save_op_codes <= save_op_codes;
		t <= save_op_code_inc <= save_op_code_inc;
		
		return [t, content];
	}
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorES6, string> OpHtmlItems
	(
		TranslatorES6 t, OpHtmlItems op_code, string var_name = "", bool first_space = false
	)
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		Collection debug_component = t.debug_component.slice();
		string save_var_name = t.html_var_name;
		t <= html_var_name <= var_name;
		
		string content = "";
		bool next_space = true;
		fn add_space = void (int i) use (t, content, next_space, first_space)
		{
			if (i > 0 and next_space) content ~= t.s2("");
			if (i == 0 and first_space) content ~= t.s2("");
			if (not next_space) next_space = true;
		};
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			string op_content = "";
			
			if (item instanceof OpAssign)
			{
				list res = t.operator::OpAssign(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpComment)
			{
				add_space(i);
				list res = t.operator::OpComment(t, item);
				t = res[0]; op_content ~= res[1];
				next_space = false;
			}
			else if (item instanceof OpFor)
			{
				add_space(i);
				list res = t.operator::OpFor(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpIf)
			{
				add_space(i);
				list res = t.operator::OpIf(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpWhile)
			{
				add_space(i);
				list res = t.operator::OpWhile(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpHtmlSlot){ continue; }
			else
			{
				add_space(i);
				t <= debug_component <= debug_component.pushIm(i);
				list res = static::OpHtmlTag(t, item, var_name);
				t = res[0]; op_content ~= res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			if (op_content != "") content ~= op_content;
			
			/* Restore save op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
		}
		
		/*
		if (var_name != "control" and patch_flag)
		{
			content ~= t.s("RenderDriver.p(" ~ var_name ~ ", " ~ var_name ~ "_childs);");
		}
		*/
		
		t <= html_var_name <= save_var_name;
		
		return [t, content];
	}
}