/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangES6;

use Runtime.lib;
use Runtime.re;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangES6.TranslatorES6;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpHtmlAttribute;
use Bayrell.Lang.OpCodes.OpHtmlContent;
use Bayrell.Lang.OpCodes.OpHtmlItems;
use Bayrell.Lang.OpCodes.OpHtmlTag;
use Bayrell.Lang.OpCodes.OpHtmlValue;
use Bayrell.Lang.OpCodes.OpString;


class TranslatorES6Html
{

	/**
	 * Is component
	 */
	lambda bool isComponent(string tag_name)
	{
		if (tag_name == "") return false;
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::strtoupper(ch1);
		return ch1 == "{" or ch1 == ch2;
	}
	
	
	
	/**
	 * Translator html value
	 */
	lambda list<TranslatorES6, string> OpHtmlAttr(TranslatorES6 t, OpHtmlAttribute attr, int item_pos)
	{
		BaseOpCode op_code = attr.value;
		
		if (attr instanceof OpString)
		{
			return [t, t.expression::toString(op_code.value)];
		}
		if (op_code instanceof OpHtmlValue)
		{
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, op_code.value); t = res[0]; string value = res[1];
				return [t, value];
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; string value = res[1];
				value = t.expression::useModuleName(t, "RenderHelper") ~
					".json_encode(ctx, " ~ value ~ ")"
				;
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, op_code); t = res[0]; string value = res[1];
		value = t.o(value, res[0].opcode_level, 13);
		
		return [t, value];
	}
	
	
	
	/**
	 * Translator html template
	 */
	lambda list<TranslatorES6, string> OpHtmlAttrs(TranslatorES6 t, Collection<OpHtmlAttribute> attrs, int item_pos)
	{
		Vector<string> attr_class = new Vector<string>();
		string attr_s = "null";
		string attr_key_value = "";
		bool has_attr_key = false;
		string v_model = "";
		
		BaseOpCode model = attrs.findItem( lib::equalAttr("key", "@model") );
		if (not model)
		{
			BaseOpCode bind = attrs.findItem( lib::equalAttr("key", "@bind") );
			if (bind)
			{
				list res = t.expression::Expression(t, bind.value); t = res[0];
				v_model = "model[" ~ res[1] ~ "]";
			}
		}
		
		Collection<string> attrs = attrs.map
		(
			string (OpHtmlAttribute attr) use (t, v_model, attr_class, attr_key_value, has_attr_key, item_pos)
			{
				list res = static::OpHtmlAttr(t, attr);
				t = res[0]; string attr_value = res[1];
				
				string attr_key = attr.key;
				string ch = rs::substr(attr_key, 0, 1);
				if (attr_key == "@class")
				{
					attr_class.push("this.getCssName(ctx, " ~ attr_value ~ ")");
					
					if (not has_attr_key and attr.value instanceof OpString)
					{
						var arr = rs::split(" ", attr.value.value);
						attr_key_value = t.expression::toString(arr[0] ~ "-" ~ item_pos);
						has_attr_key = true;
					}
					
					return "";
				}
				else if (attr_key == "class")
				{
					attr_class.push(attr_value);
					return "";
				}
				else if (attr_key == "@key")
				{
					has_attr_key = true;
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_key_value = attr_value;
					return "";
				}
				
				if (rs::substr(attr_key, 0, 7) == "@event:")
				{
					string event_name = rs::substr(attr_key, 7);
					event_name = t.expression::findModuleName(t, event_name);
					attr_key = "@event:" ~ event_name;
				}
				if (rs::substr(attr_key, 0, 12) == "@eventAsync:")
				{
					string event_name = rs::substr(attr_key, 12);
					event_name = t.expression::findModuleName(t, event_name);
					attr_key = "@eventAsync:" ~ event_name;
				}
				
				if (attr_key == "@bind" and v_model != "")
				{
					string s = "";
					s = t.expression::toString(attr_key) ~ ":" ~ attr_value ~ ",";
					s ~= t.expression::toString("@model") ~ ":" ~ v_model;
					return s;
				}
				return t.expression::toString(attr_key) ~ ":" ~ attr_value;
			}
		);
		attrs = attrs.filter( bool (string s) => s != "" );
		if (attr_class.count() > 0)
		{
			attrs = attrs.pushIm
			(
				"\"class\":" ~ rs::join(" + \" \" + ", attr_class)
			);
		}
		if (attr_key_value != "")
		{
			attrs = attrs.pushIm
			(
				"\"@key\":" ~ attr_key_value
			);
		}
		if (attrs.count() > 0)
		{
			attr_s = "{" ~ rs::join(",", attrs) ~ "}";
		}
		return [t, attr_s];
	}
	
	
	
	/**
	 * Translator html template
	 */
	lambda list<TranslatorES6, string> OpHtmlTag(TranslatorES6 t, OpHtmlTag op_code, int item_pos)
	{
		bool is_text = false;
		bool is_html = false;
		bool is_raw = false;
		bool is_element = false;
		bool is_component = false;
		bool is_empty_tag = false;
		string attrs = "";
		string item_value = "";
		string tag_name = "";
		
		if (op_code instanceof OpHtmlContent)
		{
			item_value = t.expression::toString(op_code.value);
			is_text = true;
		}
		else if (op_code instanceof OpHtmlValue)
		{
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; item_value = res[1];
				is_raw = true;
			}
			else if (op_code.kind == OpHtmlValue::KIND_HTML)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; item_value = res[1];
				is_html = true;
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; item_value = res[1];
				item_value = "this.json_encode(ctx, " ~ item_value ~ ")";
				is_text = true;
			}
		}
		else if (op_code instanceof OpHtmlTag)
		{
			if (op_code.tag_name == "")
			{
				list res = static::OpHtmlItems(t, op_code.items);
				t = res[0]; item_value = res[1];
			}
			else
			{
				list res = static::OpHtmlAttrs(t, op_code.attrs, item_pos); t = res[0]; string attrs = res[1];
				
				is_component = static::isComponent(op_code.tag_name);
				if (is_component)
				{
					if (op_code.op_code_name)
					{
						list res = t.expression::Expression(t, op_code.op_code_name);
						t = res[0]; tag_name = res[1];
					}
					else tag_name = t.expression::toString(t.expression::findModuleName(t, op_code.tag_name));
				}
				else
				{
					tag_name = t.expression::toString(op_code.tag_name);
					is_element = true;
				}
				
				list res = static::OpHtmlItems(t, op_code.items);
				t = res[0]; item_value = res[1];
			}
		}
		else
		{
			list res = t.expression::Expression(t, op_code); 
			t = res[0]; item_value = res[1];
			is_text = true;
		}
		
		if (item_value == "") item_value = "null";
		
		if (is_text)
		{
			item_value = "RenderDriver.text(" ~
				"layout," ~
				item_value ~ "," ~
				"control," ~
				item_pos ~
			")";
		}
		else if (is_html)
		{
			item_value = "RenderDriver.html(" ~
				"layout," ~
				item_value ~ "," ~
				"control," ~
				item_pos ~
			")";
		}
		else if (is_raw)
		{
			item_value = "RenderDriver.raw(" ~
				"layout," ~
				item_value ~ "," ~
				"control," ~
				item_pos ~
			")";
		}
		else if (is_component)
		{
			item_value = "RenderDriver.component(" ~
				"layout," ~
				tag_name ~ "," ~
				attrs ~ "," ~
				item_value ~ "," ~
				"control," ~
				item_pos ~
			")";
		}
		else if (is_element)
		{
			item_value = "RenderDriver.elem(" ~
				"layout," ~
				tag_name ~ "," ~
				attrs ~ "," ~
				item_value ~ "," ~
				"control," ~
				item_pos ~
			")";
		}
		else if (is_empty_tag)
		{
			item_value = "RenderDriver.empty(" ~
				"layout," ~
				item_value ~ "," ~
				"control," ~
				item_pos ~
			")";
		}
		
		return [t, item_value];
	}
	
	
	
	/**
	 * Translator html items
	 */
	lambda list<TranslatorES6, string> OpHtmlItems(TranslatorES6 t, OpHtmlItems op_code)
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		string content = "";
		content ~= "(control) =>";
		content ~= t.s("{");
		t = t.levelInc();
		
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		content ~= t.s("var " ~ var_name ~ " = [];");
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			string item_value = "";
			
			list res = static::OpHtmlTag(t, item, i);
			t = res[0]; item_value = res[1];
			if (item_value == "") continue;
			
			if (item instanceof OpHtmlTag)
			{
				bool is_component = static::isComponent(item.tag_name);
				if (item.tag_name == "")
				{
					content ~= t.s("/* Items */");
				}
				else if (is_component)
				{
					content ~= t.s("/* Component '" ~ item.tag_name ~ "' */");
				}
				else
				{
					content ~= t.s("/* Element '" ~ item.tag_name ~ "' */");
				}
			}
			
			content ~= t.s(var_name ~ ".push(" ~ item_value ~ ");");
		}
		
		
		content ~= t.s("return " ~ var_name ~ ";");
		t = t.levelDec();
		content ~= t.s("}");
		
		return [t, content];
	}
}