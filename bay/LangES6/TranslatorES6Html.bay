/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangES6;

use Runtime.lib;
use Runtime.re;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangES6.TranslatorES6;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpHtmlAttribute;
use Bayrell.Lang.OpCodes.OpHtmlContent;
use Bayrell.Lang.OpCodes.OpHtmlItems;
use Bayrell.Lang.OpCodes.OpHtmlTag;
use Bayrell.Lang.OpCodes.OpHtmlValue;
use Bayrell.Lang.OpCodes.OpString;


class TranslatorES6Html
{

	/**
	 * Is component
	 */
	lambda bool isComponent(string tag_name)
	{
		if (tag_name == "") return false;
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::strtoupper(ch1);
		return ch1 == "{" or ch1 == ch2;
	}
	
	
	
	/**
	 * Translator html template
	 */
	lambda list<TranslatorES6, string> OpHtmlAttrs(TranslatorES6 t, Collection<OpHtmlAttribute> attrs)
	{
		string attr_s = "null";
		Collection<string> attrs = attrs.map
		(
			string (OpHtmlAttribute attr) use (t)
			{
				string attr_key = attr.key;
				string ch = rs::substr(attr_key, 0, 1);
				if (attr_key == "@class" and attr.value instanceof OpString)
				{
					return "\"class\":" ~
						"this.getCssName(ctx, " ~ t.expression::toString(attr.value.value) ~ ")"
					;
				}
				if (rs::substr(attr_key, 0, 7) == "@event:")
				{
					string event_name = rs::substr(attr_key, 7);
					event_name = t.expression::findModuleName(t, event_name);
					attr_key = "@event:" ~ event_name;
				}
				
				if (attr.value instanceof OpHtmlValue)
				{
					if (attr.value.kind == OpHtmlValue::KIND_RAW)
					{
						list res = t.expression::Expression(t, attr.value.value); t = res[0]; 
						return t.expression::toString(attr_key) ~ ":" ~ res[1];
					}
					else if (attr.value.kind == OpHtmlValue::KIND_JSON)
					{
						list res = t.expression::Expression(t, attr.value.value); 
						t = res[0]; string value = res[1];
						value = t.expression::useModuleName(t, "RenderHelper") ~
							".json_encode(ctx, " ~ value ~ ")"
						;
						return t.expression::toString(attr_key) ~ ":" ~ value;
					}
				}
				
				list res = t.expression::Expression(t, attr.value); t = res[0]; string value = res[1];
				return t.expression::toString(attr_key) ~ ":" ~ res[1];
			}
		);
		attrs = attrs.filter( bool (string s) => s != "" );
		if (attrs.count() > 0)
		{
			attr_s = "{" ~ rs::join(",", attrs) ~ "}";
		}
		return [t, attr_s];
	}
	
	
	
	/**
	 * Translator html template
	 */
	lambda list<TranslatorES6, string> OpHtmlTagEmpty(TranslatorES6 t, OpHtmlTag op_code, int item_pos)
	{
		fn f = rtl::method(static::getCurrentClassName(), "OpHtmlItems");
		list res = t::saveOpCodeCall(t, f, [op_code.items]); t = res[0];
		string content = res[1];
		string var_name = res[2];
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
	
	
	/**
	 * Translator html template
	 */
	lambda list<TranslatorES6, string> OpHtmlTag(TranslatorES6 t, OpHtmlTag op_code, int item_pos)
	{
		if (op_code.tag_name == "") return static::OpHtmlTagEmpty(t, op_code, item_pos);
		bool is_component = static::isComponent(op_code.tag_name);
		
		string tag_name = "";
		string content = "";
		if (is_component)
		{
			content = t.s("/* Component '" ~ op_code.tag_name ~ "' */");
			tag_name = t.expression::toString(t.expression::findModuleName(t, op_code.tag_name));
		}
		else
		{
			content = t.s("/* Element '" ~ op_code.tag_name ~ "' */");
			tag_name = t.expression::toString(op_code.tag_name);
		}
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		list res = static::OpHtmlAttrs(t, op_code.attrs); t = res[0]; string attrs = res[1];
		
		string var_name_content = var_name ~ "_content";
		if (op_code.items != null and op_code.items.items.count() > 0)
		{
			content ~= t.s("var " ~ var_name_content ~ " = (control) =>");
			content ~= t.s("{");
			t = t.levelInc();
			fn f = rtl::method(static::getCurrentClassName(), "OpHtmlItems");
			list res = t::saveOpCodeCall(t, f, [op_code.items]); t = res[0];
			content ~= res[1];
			content ~= t.s("return " ~ res[2] ~ ";");
			t = t.levelDec();
			content ~= t.s("};");
		}
		else
		{
			var_name_content = "null";
		}
		
		if (is_component)
		{
			if (op_code.op_code_name)
			{
				list res = t.expression::Expression(t, op_code.op_code_name);
				t = res[0]; tag_name = res[1];
			}
			content ~= t.s("var " ~ var_name ~ "_elem = Runtime.Web.UI.Drivers.RenderDriver.component(" ~
				"layout," ~
				tag_name ~ "," ~
				attrs ~ "," ~
				var_name_content ~ "," ~
				"control," ~
				item_pos ~
			");");
		}
		else
		{
			content ~= t.s("var " ~ var_name ~ "_elem = Runtime.Web.UI.Drivers.RenderDriver.elem(" ~
				"layout," ~
				tag_name ~ "," ~
				attrs ~ "," ~
				var_name_content ~ "," ~
				"control," ~
				item_pos ~
			");");
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name ~ "_elem"];
	}
	
	
	
	/**
	 * Translator html items
	 */
	lambda list<TranslatorES6, string> OpHtmlItems(TranslatorES6 t, OpHtmlItems op_code)
	{
		if (op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		
		string content = t.s("/* Items */");
		content ~= t.s("var " ~ var_name ~ " = [];");
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			string item_value = "";
			bool is_text = false;
			bool is_html = false;
			bool is_raw = false;
			
			if (item instanceof OpHtmlContent)
			{
				item_value = t.expression::toString(item.value);
				is_text = true;
			}
			else if (item instanceof OpHtmlTag)
			{
				list res = static::OpHtmlTag(t, item, i); t = res[0]; item_value = res[1];
			}
			else if (item instanceof OpHtmlValue)
			{
				if (item.kind == OpHtmlValue::KIND_RAW)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					is_raw = true;
				}
				else if (item.kind == OpHtmlValue::KIND_HTML)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					is_html = true;
				}
				else if (item.kind == OpHtmlValue::KIND_JSON)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					item_value = "this.json_encode(ctx, " ~ item_value ~ ")";
					is_text = true;
				}
			}
			else
			{
				list res = t.expression::Expression(t, item); 
				t = res[0]; item_value = res[1];
				is_text = true;
			}
			
			if (item_value == "") continue;
			
			if (is_text)
			{
				item_value = "Runtime.Web.UI.Drivers.RenderDriver.text(" ~
					"layout," ~
					item_value ~ "," ~
					"control," ~
					i ~
				")";
			}
			else if (is_html)
			{
				item_value = "Runtime.Web.UI.Drivers.RenderDriver.html(" ~
					"layout," ~
					item_value ~ "," ~
					"control," ~
					i ~
				")";
			}
			else if (is_raw)
			{
				item_value = "Runtime.Web.UI.Drivers.RenderDriver.raw(" ~
					"layout," ~
					item_value ~ "," ~
					"control," ~
					i ~
				")";
			}
			
			content ~= t.s(var_name ~ ".push(" ~ item_value ~ ");");
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
}