/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangES6;

use Runtime.BaseStruct;
use Bayrell.Lang.CoreTranslator;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangES6.AsyncAwait;
use Bayrell.Lang.LangES6.TranslatorES6AsyncAwait;
use Bayrell.Lang.LangES6.TranslatorES6Expression;
use Bayrell.Lang.LangES6.TranslatorES6Html;
use Bayrell.Lang.LangES6.TranslatorES6Operator;
use Bayrell.Lang.LangES6.TranslatorES6Program;
use Bayrell.Lang.OpCodes.BaseOpCode;


struct TranslatorES6 extends CoreTranslator
{
	/* Work */
	bool is_pipe = false;
	string pipe_var_name = "";
	string html_var_name = "";
	bool is_html = false;
	
	/* Translators */
	TranslatorES6AsyncAwait async_await = null;
	TranslatorES6Expression expression = null;
	TranslatorES6Html html = null;
	TranslatorES6Operator operator = null;
	TranslatorES6Program program = null;
	
	/* Flags */
	bool use_module_name = false;
	bool use_strict = true;
	bool enable_async_await = true;
	bool emulate_async_await = true;
	
	
	/**
	 * Returns true if emulate async await
	 */
	bool isEmulateAsyncAwait() => this.enable_async_await and this.emulate_async_await;
	
	
	
	/**
	 * Returns true if async await
	 */
	bool isAsyncAwait() => this.enable_async_await and not this.emulate_async_await;
	
	
	
	/**
	 * Reset translator
	 */
	pure TranslatorES6 reset(TranslatorES6 t) =>
		t.copy({
			"value": "",
			"current_namespace_name": "",
			"modules": new Dict<string>(),
			"async_await": new TranslatorES6AsyncAwait(),
			"expression": new TranslatorES6Expression(),
			"html": new TranslatorES6Html(),
			"operator": new TranslatorES6Operator(),
			"program": new TranslatorES6Program(),
			"save_vars": new Collection<string>(),
			"save_op_codes": new Collection<SaveOpCode>(),
			"save_op_code_inc": 0,
			"preprocessor_flags": 
			{
				"FRONTEND": true,
				"ES6": true,
				"JAVASCRIPT": true,
			},
		})
	;
	
	
	
	/**
	 * Translate BaseOpCode
	 */
	pure list<TranslatorES6, string> translate(TranslatorES6 t, BaseOpCode op_code)
	{
		t = static::reset(t);
		return t.program::translateProgram(t, op_code);
	}
	
}