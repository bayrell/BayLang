/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangES6;

use BayrellRtl.Lib.rs;
use BayrellRtl.Types.Map;
use BayrellLang.CommonTranslator;


export class TranslatorES6 extends CommonTranslator {
	
	Map<string, string> modules = null;
	string current_namespace = "";
	string current_class_name = "";
	
	
	/**
	 * Get name
	 */
	string getName(string name){
		if (name == 'parent'){
			return "super";
		}
		else if (name == 'self'){
			return this.current_namespace ~ "." ~ this.current_class_name;
		}
		else if (this.modules.has(name)){
			return this.modules.item(name);
		}
		
		return name;
	}
	
	
	
	/**
	 * Assign all data from other object
	 * @param {BayrellObject} obj
	 */
	void assign(CoreObject obj){
		if (obj instanceof TranslatorES6){
			this.modules = clone obj.modules;
			this.current_namespace = obj.current_namespace;
			this.current_class_name = obj.current_class_name;
		}
		parent::assign(obj);
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor (ContextInterface context = null){
		parent(context);
		this.modules = new Map<string, string>();
	}
	
	
	/** =========================== Identifier ============================ */
	
	
	/**
	 * HexNumber
	 */
	string OpHexNumber(OpHexNumber op_code){
		return op_code.value;
	}
	
	
	
	/**
	 * Identifier
	 */
	string OpIdentifier(OpIdentifier op_code){
		return this.getName(op_code.value);
	}
	
	
	
	/**
	 * Number
	 */
	string OpNumber(OpNumber op_code){
		return op_code.value;
	}
	
	
	
	/**
	 * String
	 */
	string OpString(OpString op_code){
		return '"' ~ op_code.value ~ '"';
	}
	
	
	
	
	/** ======================== Dynamic or static ======================== */
	
	
	/**
	 * Array
	 */
	string OpArray(OpArray op_code){
		return this.translateRun(op_code.value1) ~ '[' ~ this.s(this.translateRun(op_code.value2)) ~ this.s(']');
	}
	
	
	
	/**
	 * Dynamic load
	 */
	string OpDynamic(OpDynamic op_code){
		this.current_opcode_level = 20;
		string s = this.translateRun(op_code.value);
		s = this.o(s, 20, this.current_opcode_level);
		return s ~ '.' ~ op_code.name;
	}
	
	
	
	/**
	 * Static load
	 */
	string OpStatic(OpStatic op_code){
		return this.translateRun(op_code.value) ~ '.' ~ op_code.name;
	}
	
	
	
	/**
	 * Template Identifier
	 */
	string OpTemplateIdentifier(OpTemplateIdentifier op_code){
		return this.translateRun(op_code.t);
	}
	
	
	
	
	/** ============================ Operations ============================ */
	
	
	/**
	 * ADD
	 */
	string OpAdd(OpAdd op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 13;
		return this.o(
			this.translateRun(op_code.value1) ~ ' + ' ~ this.s(this.translateRun(op_code.value2)), 
			old_opcode_level, 13
		);
	}
	
	
	
	/**
	 * AND
	 */
	string OpAnd(OpAnd op_code){ 
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 6;
		return this.o(
			this.translateRun(op_code.value1) ~ ' && ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 6
		);
	}
	
	
	
	/**
	 * Bit AND
	 */
	string OpBitAnd(OpBitAnd op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 9;
		return this.o(
			this.translateRun(op_code.value1) ~ ' & ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 9
		);
	}
	
	
	
	/**
	 * Bit NOT
	 */
	string OpBitNot(OpBitNot op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o(
			'!' ~ this.translateRun(op_code.value),
			old_opcode_level, 16
		);
	}
	
	
	
	/**
	 * Bit OR
	 */
	string OpBitOr(OpBitOr op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 7;
		return this.o(
			this.translateRun(op_code.value1) ~ ' | ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 7
		);
	}
	
	
	
	/**
	 * Bit XOR
	 */
	string OpBitXor(OpBitXor op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 8;
		return this.o(
			this.translateRun(op_code.value1) ~ ' ^ ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 8
		);
	}
	
	
	
	/**
	 * Concat strings
	 */
	string OpConcat(OpConcat op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 13;
		return this.o(
			this.getName("rtl") ~ '.toString(' ~
			this.s(this.translateRun(op_code.value1)) ~ 
			this.s(') + ') ~ 
			this.s(this.getName("rtl") ~ '.toString(') ~
			this.s(this.translateRun(op_code.value2)) ~ 
			this.s(')'),
			old_opcode_level, 13
		);
	}
	
	
	
	/**
	 * Divide
	 */
	string OpDiv(OpDiv op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 14;
		return this.o(
			this.translateRun(op_code.value1) ~ ' / ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 14
		);
	}
	
	
	
	/**
	 * Module
	 */
	string OpMod(OpMod op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 14;
		return this.o(
			this.translateRun(op_code.value1) ~ ' % ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 14
		);
	}
	
	
	
	/**
	 * Multiply
	 */
	string OpMult(OpMult op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 14;
		return this.o(
			this.translateRun(op_code.value1) ~ ' * ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 14
		);
	}
	
	
	
	/**
	 * New
	 */
	string OpNew(OpNew op_code){
		
		string s = "";
		
		/* Function name */
		s ~= "new " ~ this.translateRun(op_code.value);
		
		/* Call arguments */
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 0;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch + this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = old_opcode_level;
		
		this.current_opcode_level = 19;
		return s;
	}
	
	
	
	/**
	 * Not
	 */
	string OpNot(OpNot op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o('!' ~ this.translateRun(op_code.value), old_opcode_level, 16);
	}
	
	
	
	/**
	 * Or
	 */
	string OpOr(OpOr op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 5;
		return this.o(
			this.translateRun(op_code.value1) ~ ' || ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 5
		);
	}
	
	
	
	/**
	 * Post decrement
	 */
	string OpPostDec(OpPostDec op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 17;
		return this.o(
			this.translateRun(op_code.value) ~ '--',
			old_opcode_level, 17
		);
	}
	
	
	
	/**
	 * Post increment
	 */
	string OpPostInc(OpPostInc op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 17;
		return this.o(
			this.translateRun(op_code.value) ~ '++',
			old_opcode_level, 17
		);
	}
	
	
	
	/**
	 * Pow
	 */
	string OpPow(OpPow op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 15;
		return this.o(
			this.translateRun(op_code.value1) ~ ' ** ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 15
		);
	}
	
	
	
	/**
	 * Pre decrement
	 */
	string OpPreDec(OpPreDec op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o(
			'--' ~ this.translateRun(op_code.value),
			old_opcode_level, 16
		);
	}
	
	
	
	/**
	 * Pre increment
	 */
	string OpPreInc(OpPreInc op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o(
			'++' ~ this.translateRun(op_code.value),
			old_opcode_level, 16
		);
	}
	
	
	
	/**
	 * Bit shift left
	 */
	string OpShiftLeft(OpShiftLeft op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 12;
		return this.o(
			this.translateRun(op_code.value1) ~ ' << ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 12
		);
	}
	
	
	
	/**
	 * Bit shift right
	 */
	string OpShiftRight(OpShiftRight op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 12;
		return this.o(
			this.translateRun(op_code.value1) ~ ' >> ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 12
		);
	}
	
	
	
	/**
	 * Sub
	 */
	string OpSub(OpSub op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 13;
		return this.o(
			this.translateRun(op_code.value1) ~ ' - ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 13
		);
	}
	
	
	
	
	/**
	 * Operator call function
	 */
	string OpCall(OpCall op_code){ 
		
		string s = "";
		this.pushOneLine(true);
		
		/* Function name */
		s ~= this.translateRun(op_code.value);
		
		/* Call arguments */
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 0;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch + this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = old_opcode_level;
		
		/* semicolon */
		this.popOneLine();
		if (not this.is_operation){
			s ~= ";";
		}
		
		return s;
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpCompare(OpCompare op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 10;
		return this.o(
			this.translateRun(op_code.value1) ~ ' ' ~ op_code.cond ~ ' ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 10
		);
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpTernary(OpTernary op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 4;
		return this.o(
			'(' ~ this.translateRun(op_code.condition) ~ ') ? ' ~
			'(' ~ this.s(this.translateRun(op_code.if_true)) ~ ') : ' ~
			'(' ~ this.s(this.translateRun(op_code.if_false)) ~ ')',
			old_opcode_level, 4
		);
	}
	
	
	
	
	/** ============================ Operators ============================ */
	
	
	/**
	 * Assign
	 */
	string OpAssign(OpAssign op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.ident);
		this.popOneLine();
		
		if (op_code.op_name == "=") res ~= " = ";
		else if (op_code.op_name == "~=") res ~= " += ";
		else if (op_code.op_name == "+=") res ~= " += ";
		else if (op_code.op_name == "-=") res ~= " -= ";
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Assign declare
	 */
	string OpAssignDeclare(OpAssignDeclare op_code){
		
		string res = "";
		bool old_is_operation = this.beginOperation();
		
		if (op_code.value == null){
			this.pushOneLine(true);
			res = "var " ~ op_code.name;
			this.popOneLine();
		}
		else{
			/* one line */
			this.pushOneLine(true);
			res = "var " ~ op_code.name ~ ' = ';
			this.popOneLine();
			
			/* result */
			this.current_opcode_level = 0;
			this.levelInc();
			res ~= this.s(this.translateRun(op_code.value));
			this.levelDec();
		}
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Break
	 */
	string OpBreak(OpBreak op_code){
		return "break;"; 
	}
	
	
	
	/**
	 * Clone
	 */
	string OpClone(OpClone op_code){
		this.beginOperation();
		
		/* result */
		string s = "clone ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Continue
	 */
	string OpContinue(OpContinue op_code){
		return "continue;"; 
	}
	
	
	
	/**
	 * Delete
	 */
	string OpDelete(OpDelete op_code){
		this.beginOperation();
		
		/* result */
		string s = "delete ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * For
	 */
	string OpFor(OpFor op_code){
		string s = "";
		
		/* Header */
		this.beginOperation();
		s ~= "for (" ~ 
			this.translateRun(op_code.loop_init) ~ "; " ~
			this.translateRun(op_code.loop_condition) ~ "; " ~
			this.translateRun(op_code.loop_inc) ~ "){"
		;
		this.endOperation();
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	/**
	 * If
	 */
	string OpIf(OpIf op_code){
		string s = "";
		
		/* Condition */
		this.beginOperation();
		s ~= "if (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		/* If true */
		this.levelInc();
		for (int i=0; i<op_code.if_true.count(); i++){
			s ~= this.s(this.translateRun(op_code.if_true.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		
		/* If else */
		for (int i=0; i<op_code.if_else.count(); i++){
			OpIfElse if_else = op_code.if_else.item(i);
			
			this.beginOperation();
			string res = "elseif (" ~ this.translateRun(if_else.condition) ~ "){";
			this.endOperation();
			s ~= this.s(res);
			
			this.levelInc();
			for (int i=0; i<if_else.if_true.count(); i++){
				s ~= this.s(this.translateRun(if_else.if_true.item(i)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		/* If false */
		if (op_code.if_false != null){
			s ~= this.s("else {");
			this.levelInc();
			for (int i=0; i<op_code.if_false.count(); i++){
				s ~= this.s(this.translateRun(op_code.if_false.item(i)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		return s;
	}
	
	
	
	/**
	 * Return
	 */
	string OpReturn(OpReturn op_code){
		this.beginOperation();
		
		/* result */
		string s = "return ";
		this.current_opcode_level = 0;
		this.levelInc();
		s ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		s ~= this.s(";");
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Throw
	 */
	string OpThrow(OpThrow op_code){
		this.beginOperation();
		
		/* result */
		string s = "throw ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Try Catch
	 */
	string OpTryCatch(OpTryCatch op_code){
		string s = "";
		
		s ~= "try{";
		this.levelInc();
		for (int i=0; i<op_code.op_try.count(); i++){
			s ~= this.s(this.translateRun(op_code.op_try.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		
		string is_else = "";
		s ~= "catch(_the_exception){";
		for (int i=0; i<op_code.childs.count(); i++){
			OpTryCatchChilds try_catch = op_code.childs.item(i);
			
			this.beginOperation();
			string tp = this.translateRun(try_catch.op_type);
			string name = this.translateRun(try_catch.op_ident);
			this.endOperation();
			
			/* catch childs */
			this.levelInc();
			s ~= this.s(is_else ~ "if (_the_exception instanceof " ~ tp ~ "){");
			this.levelInc();
			s ~= this.s("var " ~ name ~ " = _the_exception;");
			for (int j=0; j<try_catch.childs.count(); j++){
				s ~= this.s(this.translateRun(try_catch.childs.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
			this.levelDec();
			
			is_else = "else"; 
		}
		s ~= this.s("}");
		
		
		return s;
	}
	
	
	
	/**
	 * While
	 */
	string OpWhile(OpWhile op_code){
		string s = "";
		
		/* Condition */
		this.beginOperation();
		s ~= "while (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	
	/** ======================== Namespace and use ======================== */
	
	
	/**
	 * Namespace
	 */
	string OpNamespace(OpNamespace op_code){
		this.current_namespace = op_code.value;
		this.modules.clear();
		if (this.current_namespace != 'BayrellRtl'){
			this.modules.set("rtl", "BayrellRtl.Lib.rtl");
		}
		return "";
	}
	
	
	/**
	 * Use
	 */
	string OpUse(OpUse op_code){
		string lib_name = op_code.value;
		Vector<string> arr = rs::explode(".", lib_name);
		string class_name = arr.getLastItem("");
		if (class_name != ""){
			this.modules.set(class_name, lib_name);
		}
		return "";
	}
	
	
	
	
	/** ============================= Classes ============================= */
	
	
	/**
	 * Function declare
	 */
	string OpFunctionDeclare(OpFunctionDeclare op_code){
		string res = "";
		string ch = "";
		string s = "";
		
		/* Header */
		this.beginOperation();
		res ~= op_code.name;
		res ~= "(";
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			this.pushOneLine(true);
			res ~= ch ~ this.translateRun(variable.tp) ~ " " ~ variable.name;
			this.popOneLine();
			ch = ", ";
		}
		res ~= ")";
		res ~= "{";
		this.endOperation();
		this.levelInc();
		
		/* Default variables */
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			if (variable.value == null)
				continue;
			this.pushOneLine(true);
			s = "if ("~variable.name~" == undefined) "~variable.name~"="~this.translateRun(variable.value)~";";
			this.popOneLine();
			res ~= this.s(s);
		}
		
		/* Childs */
		for (int i=0; i<op_code.childs.count(); i++){
			res ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		res ~= this.s("}");
		
		return res;
	}
	
	
	
	
	/**
	 * Class declare header
	 */
	string OpClassDeclareHeader(OpClassDeclare op_code){
		
		string s = "";
		string res = "";
		string name = "";
		string ch = "";
		Vector<string> v = rs::explode(".", this.current_namespace);
		
		for (int i=0; i<v.count(); i++){
			name ~= ch ~ v.item(i);
			s = "if (typeof "~name~" == 'undefined') "~name~" = {};";
			if (i==0) res ~= s;
			else res ~= this.s(s);
			ch = ".";
		}
		
		this.beginOperation();
		s = this.current_namespace ~ "." ~ op_code.class_name ~ " = class";
		if (op_code.class_extends != ""){
			s ~= " extends " ~ this.translateRun(op_code.class_extends);
		}
		s ~= "{";
		this.endOperation();
		res ~= this.s(s);
		this.levelInc();
		
		return res;
	}
	
	
	
	/**
	 * Class declare footer
	 */
	string OpClassDeclareFooter(OpClassDeclare op_code){
		
		string res = "";
		
		/* Static variables */
		for (int i=0; i<op_code.class_variables.count(); i++){
			OpAssignDeclare variable = op_code.class_variables.item(i);
			if (variable.flags != null and variable.flags.p_static == true){
				this.beginOperation();
				string s = this.current_namespace ~ "." ~ op_code.class_name ~ "." ~ variable.name ~ " = " ~
					this.translateRun(variable.value) ~ ";";
				this.endOperation();
				res ~= this.s(s);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Class declare
	 */
	string OpClassDeclare(OpClassDeclare op_code){
		string res = "";
		string s = "";
		
		/* Set current class name */
		this.current_class_name = op_code.class_name;
		
		/* Header */
		res ~= this.OpClassDeclareHeader(op_code);
		
		/* Init function */
		if (this.current_namespace != 'BayrellRtl' or op_code.class_name != 'CoreObject'){
			res ~= this.s("_init(){");
			this.levelInc();
			
			/* super init */
			if (op_code.class_extends != ""){
				res ~= this.s("super._init();");
			}
			
			/* Output variables */
			for (int i=0; i<op_code.class_variables.count(); i++){
				OpAssignDeclare variable = op_code.class_variables.item(i);
				if (variable.flags != null and variable.flags.p_static == false){
					this.beginOperation();
					s = "this." ~ variable.name ~ " = " ~ this.translateRun(variable.value) ~ ";";
					this.endOperation();
					res ~= this.s(s);
				}
			}
			
			/* Implements */
			if (op_code.class_implements != null and op_code.class_implements.count() > 0){
				s = "if (this.__implements__ == undefined){this.__implements__ = [];}";
				for (int i=0; i<op_code.class_implements.count(); i++){
					string name = op_code.class_implements.item(i);
					this.beginOperation();
					s = "this.__implements__.push("~name~");";
					this.endOperation();
					res ~= this.s(s);
				}
			}
			
			this.levelDec();
			res ~= this.s("}");
		}
		
		
		/* Class functions */
		for (int i=0; i<op_code.class_functions.count(); i++){
			res ~= this.s(this.OpFunctionDeclare(op_code.class_functions.item(i)));
		}
		
		
		/* Footer class */
		this.levelDec();
		res ~= this.s("}");
		
		
		/* Footer */
		res ~= this.OpClassDeclareFooter(op_code);
		
		
		return res;
	}
	
	
}