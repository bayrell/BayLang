/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangES6;

use BayrellLang.CommonTranslator;


export class TranslatorES6 extends CommonTranslator {
	
	
	
	/** =========================== Identifier ============================ */
	
	
	/**
	 * HexNumber
	 */
	string OpHexNumber(OpHexNumber op_code){
		return op_code.value;
	}
	
	
	
	/**
	 * Identifier
	 */
	string OpIdentifier(OpIdentifier op_code){
		return op_code.value;
	}
	
	
	
	/**
	 * Number
	 */
	string OpNumber(OpNumber op_code){
		return op_code.value;
	}
	
	
	
	/**
	 * String
	 */
	string OpString(OpString op_code){
		return '"' ~ op_code.value ~ '"';
	}
	
	
	
	
	/** ======================== Dynamic or static ======================== */
	
	
	/**
	 * Array
	 */
	string OpArray(OpArray op_code){
		return this.translateRun(op_code.value1) ~ '[' ~ this.s(this.translateRun(op_code.value2)) ~ this.s(']');
	}
	
	
	
	/**
	 * Dynamic load
	 */
	string OpDynamic(OpDynamic op_code){
		this.current_opcode_level = 20;
		string s = this.translateRun(op_code.value1);
		s = this.o(s, 20, this.current_opcode_level);
		return s ~ '.' ~ this.s(this.translateRun(op_code.value2));
	}
	
	
	
	/**
	 * Static load
	 */
	string OpStatic(OpStatic op_code){
		return this.translateRun(op_code.value) ~ '.' ~ this.translateRun(op_code.ident);
	}
	
	
	
	/**
	 * Template Identifier
	 */
	string OpTemplateIdentifier(OpTemplateIdentifier op_code){
		return this.translateRun(op_code.t);
	}
	
	
	
	
	/** ============================ Operations ============================ */
	
	
	/**
	 * ADD
	 */
	string OpAdd(OpAdd op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 13;
		return this.o(
			this.translateRun(op_code.value1) ~ ' + ' ~ this.s(this.translateRun(op_code.value2)), 
			old_opcode_level, 13
		);
	}
	
	
	
	/**
	 * AND
	 */
	string OpAnd(OpAnd op_code){ 
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 6;
		return this.o(
			this.translateRun(op_code.value1) ~ ' && ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 6
		);
	}
	
	
	
	/**
	 * Bit AND
	 */
	string OpBitAnd(OpBitAnd op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 9;
		return this.o(
			this.translateRun(op_code.value1) ~ ' & ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 9
		);
	}
	
	
	
	/**
	 * Bit NOT
	 */
	string OpBitNot(OpBitNot op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o(
			'!' ~ this.translateRun(op_code.value),
			old_opcode_level, 16
		);
	}
	
	
	
	/**
	 * Bit OR
	 */
	string OpBitOr(OpBitOr op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 7;
		return this.o(
			this.translateRun(op_code.value1) ~ ' | ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 7
		);
	}
	
	
	
	/**
	 * Bit XOR
	 */
	string OpBitXor(OpBitXor op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 8;
		return this.o(
			this.translateRun(op_code.value1) ~ ' ^ ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 8
		);
	}
	
	
	
	/**
	 * Concat strings
	 */
	string OpConcat(OpConcat op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 13;
		return this.o(
			'toString(' ~
			this.s(this.translateRun(op_code.value1)) ~ 
			this.s(') + ') ~ 
			this.s('toString(') ~
			this.s(this.translateRun(op_code.value2)) ~ 
			this.s(')'),
			old_opcode_level, 13
		);
	}
	
	
	
	/**
	 * Divide
	 */
	string OpDiv(OpDiv op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 14;
		return this.o(
			this.translateRun(op_code.value1) ~ ' / ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 14
		);
	}
	
	
	
	/**
	 * Module
	 */
	string OpMod(OpMod op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 14;
		return this.o(
			this.translateRun(op_code.value1) ~ ' % ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 14
		);
	}
	
	
	
	/**
	 * Multiply
	 */
	string OpMult(OpMult op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 14;
		return this.o(
			this.translateRun(op_code.value1) ~ ' * ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 14
		);
	}
	
	
	
	/**
	 * New
	 */
	string OpNew(OpNew op_code){
		
		string s = "";
		
		/* Function name */
		s ~= "new " ~ this.translateRun(op_code.value);
		
		/* Call arguments */
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 0;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch + this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = old_opcode_level;
		
		this.current_opcode_level = 19;
		return s;
	}
	
	
	
	/**
	 * Not
	 */
	string OpNot(OpNot op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o('!' ~ this.translateRun(op_code.value), old_opcode_level, 16);
	}
	
	
	
	/**
	 * Or
	 */
	string OpOr(OpOr op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 5;
		return this.o(
			this.translateRun(op_code.value1) ~ ' || ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 5
		);
	}
	
	
	
	/**
	 * Post decrement
	 */
	string OpPostDec(OpPostDec op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 17;
		return this.o(
			this.translateRun(op_code.value) ~ '--',
			old_opcode_level, 17
		);
	}
	
	
	
	/**
	 * Post increment
	 */
	string OpPostInc(OpPostInc op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 17;
		return this.o(
			this.translateRun(op_code.value) ~ '++',
			old_opcode_level, 17
		);
	}
	
	
	
	/**
	 * Pow
	 */
	string OpPow(OpPow op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 15;
		return this.o(
			this.translateRun(op_code.value1) ~ ' ** ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 15
		);
	}
	
	
	
	/**
	 * Pre decrement
	 */
	string OpPreDec(OpPreDec op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o(
			'--' ~ this.translateRun(op_code.value),
			old_opcode_level, 16
		);
	}
	
	
	
	/**
	 * Pre increment
	 */
	string OpPreInc(OpPreInc op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 16;
		return this.o(
			'++' ~ this.translateRun(op_code.value),
			old_opcode_level, 16
		);
	}
	
	
	
	/**
	 * Bit shift left
	 */
	string OpShiftLeft(OpShiftLeft op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 12;
		return this.o(
			this.translateRun(op_code.value1) ~ ' << ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 12
		);
	}
	
	
	
	/**
	 * Bit shift right
	 */
	string OpShiftRight(OpShiftRight op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 12;
		return this.o(
			this.translateRun(op_code.value1) ~ ' >> ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 12
		);
	}
	
	
	
	/**
	 * Sub
	 */
	string OpSub(OpSub op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 13;
		return this.o(
			this.translateRun(op_code.value1) ~ ' - ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 13
		);
	}
	
	
	
	
	/**
	 * Operator call function
	 */
	string OpCall(OpCall op_code){ 
		
		string s = "";
		this.pushOneLine(true);
		
		/* Function name */
		s ~= this.translateRun(op_code.value);
		
		/* Call arguments */
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 0;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch + this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = old_opcode_level;
		
		/* semicolon */
		this.popOneLine();
		if (not this.is_operation){
			s ~= ";";
		}
		
		return s;
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpCompare(OpCompare op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 10;
		return this.o(
			this.translateRun(op_code.value1) ~ ' ' ~ op_code.cond ~ ' ' ~ this.s(this.translateRun(op_code.value2)),
			old_opcode_level, 10
		);
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpTernary(OpTernary op_code){
		int old_opcode_level = this.current_opcode_level;
		this.current_opcode_level = 4;
		return this.o(
			'(' ~ this.translateRun(op_code.condition) ~ ') ? ' ~
			'(' ~ this.s(this.translateRun(op_code.if_true)) ~ ') : ' ~
			'(' ~ this.s(this.translateRun(op_code.if_false)) ~ ')',
			old_opcode_level, 4
		);
	}
	
	
	
	/** ============================ Operators ============================ */
	
	
	
	/**
	 * Assign
	 */
	string OpAssign(OpAssign op_code){
		
		this.is_operation = true;
		this.current_opcode_level = 0;
		this.pushOneLine(true);
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.ident) ~ ' = ';
		this.popOneLine();
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		res ~= this.s(';');
		this.popOneLine();
		this.is_operation = false;
		
		return res;
	}
	
	
	/**
	 * Assign declare
	 */
	string OpAssignDeclare(OpAssignDeclare op_code){
		
		this.is_operation = true;
		this.current_opcode_level = 0;
		this.pushOneLine(true);
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.tp) ~ this.translateRun(op_code.ident) ~ ' = ';
		this.popOneLine();
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		res ~= this.s(';');
		this.popOneLine();
		this.is_operation = false;
		
		return res;
	}
	
	
	
	string OpBreak(OpBreak op_code){  return ""; }
	string OpClone(OpClone op_code){  return ""; }
	string OpContinue(OpContinue op_code){  return ""; }
	string OpDelete(OpDelete op_code){  return ""; }
	string OpFor(OpFor op_code){  return ""; }
	string OpIf(OpIf op_code){  return ""; }
	string OpIfElse(OpIfElse op_code){  return ""; }
	string OpNamespace(OpNamespace op_code){  return ""; }
	string OpReturn(OpReturn op_code){  return ""; }
	string OpThrow(OpThrow op_code){  return ""; }
	string OpTryCatch(OpTryCatch op_code){  return ""; }
	string OpUse(OpUse op_code){  return ""; }
	string OpWhile(OpWhile op_code){  return ""; }
}