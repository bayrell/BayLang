/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.re;
use Runtime.BaseStruct;
use BayLang.CoreTranslator;
use BayLang.SaveOpCode;
use BayLang.LangES6.AsyncAwait;
use BayLang.LangES6.TranslatorES6AsyncAwait;
use BayLang.LangES6.TranslatorES6Expression;
use BayLang.LangES6.TranslatorES6Html;
use BayLang.LangES6.TranslatorES6Operator;
use BayLang.LangES6.TranslatorES6Program;
use BayLang.OpCodes.BaseOpCode;


class TranslatorES6 extends CoreTranslator
{
	/* Translators */
	TranslatorES6Expression expression = new TranslatorES6Expression(this);
	TranslatorES6Operator operator = new TranslatorES6Operator(this);
	TranslatorES6Program program = new TranslatorES6Program(this);
	TranslatorES6Html html = new TranslatorES6Html(this);
	
	/* Flags */
	bool use_module_name = false;
	bool use_window = true;
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		parent();
		this.uses.set("rtl", "Runtime.rtl");
		this.uses.set("rs", "Runtime.rs");
		this.uses.set("Vector", "Runtime.Vector");
		this.preprocessor_flags.set("FRONTEND", true);
		this.preprocessor_flags.set("ES6", true);
		this.preprocessor_flags.set("JAVASCRIPT", true);
	}
	
	
	/**
	 * Returns string
	 */
	string toString(string s)
	{
		s = re::replace('\\\\', '\\\\', s);
		s = re::replace('"', '\\\"', s);
		s = re::replace('\n', '\\n', s);
		s = re::replace('\r', '\\r', s);
		s = re::replace('\t', '\\t', s);
		return "\"" ~ s ~ "\"";
	}
	
	
	/**
	 * Use module
	 */
	string useModule(string module_name)
	{
		if (module_name == "rtl") return "Runtime.rtl";
		if (module_name == "rs") return "Runtime.rs";
		return module_name;
	}
	
	
	/**
	 * Translate BaseOpCode
	 */
	string translate(BaseOpCode op_code)
	{
		Collection<string> content = [];
		content.push('"use strict;"');
		content.push(this.newLine());
		this.program.translate(op_code, content);
		return rs::join("", content);
	}
}