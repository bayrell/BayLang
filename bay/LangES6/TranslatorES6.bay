/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangES6;

use Runtime.re;
use Runtime.rs;
use BayrellLang.CommonTranslator;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpAnd;
use BayrellLang.OpCodes.OpAssign;
use BayrellLang.OpCodes.OpAssignDeclare;
use BayrellLang.OpCodes.OpBitAnd;
use BayrellLang.OpCodes.OpBitNot;
use BayrellLang.OpCodes.OpBitOr;
use BayrellLang.OpCodes.OpBitXor;
use BayrellLang.OpCodes.OpBreak;
use BayrellLang.OpCodes.OpCall;
use BayrellLang.OpCodes.OpCallAwait;
use BayrellLang.OpCodes.OpChilds;
use BayrellLang.OpCodes.OpClassDeclare;
use BayrellLang.OpCodes.OpClassName;
use BayrellLang.OpCodes.OpClone;
use BayrellLang.OpCodes.OpComment;
use BayrellLang.OpCodes.OpCompare;
use BayrellLang.OpCodes.OpConcat;
use BayrellLang.OpCodes.OpContinue;
use BayrellLang.OpCodes.OpCopyStruct;
use BayrellLang.OpCodes.OpDelete;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpFor;
use BayrellLang.OpCodes.OpFunctionArrowDeclare;
use BayrellLang.OpCodes.OpFunctionDeclare;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpHtmlAttribute;
use BayrellLang.OpCodes.OpHtmlComment;
use BayrellLang.OpCodes.OpHtmlEscape;
use BayrellLang.OpCodes.OpHtmlJson;
use BayrellLang.OpCodes.OpHtmlRaw;
use BayrellLang.OpCodes.OpHtmlTag;
use BayrellLang.OpCodes.OpHtmlText;
use BayrellLang.OpCodes.OpHtmlView;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpIf;
use BayrellLang.OpCodes.OpIfElse;
use BayrellLang.OpCodes.OpInterfaceDeclare;
use BayrellLang.OpCodes.OpMap;
use BayrellLang.OpCodes.OpMethod;
use BayrellLang.OpCodes.OpMod;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpNamespace;
use BayrellLang.OpCodes.OpNew;
use BayrellLang.OpCodes.OpNope;
use BayrellLang.OpCodes.OpNot;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpOr;
use BayrellLang.OpCodes.OpPipe;
use BayrellLang.OpCodes.OpPostDec;
use BayrellLang.OpCodes.OpPostInc;
use BayrellLang.OpCodes.OpPow;
use BayrellLang.OpCodes.OpPreDec;
use BayrellLang.OpCodes.OpPreInc;
use BayrellLang.OpCodes.OpPreprocessorCase;
use BayrellLang.OpCodes.OpPreprocessorSwitch;
use BayrellLang.OpCodes.OpReturn;
use BayrellLang.OpCodes.OpShiftLeft;
use BayrellLang.OpCodes.OpShiftRight;
use BayrellLang.OpCodes.OpStatic;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpStructDeclare;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpTemplateIdentifier;
use BayrellLang.OpCodes.OpTernary;
use BayrellLang.OpCodes.OpThrow;
use BayrellLang.OpCodes.OpTryCatch;
use BayrellLang.OpCodes.OpTryCatchChilds;
use BayrellLang.OpCodes.OpUse;
use BayrellLang.OpCodes.OpVector;
use BayrellLang.OpCodes.OpWhile;
use BayrellLang.LangES6.FunctionStack;


export class TranslatorES6 extends CommonTranslator {
	
	Vector<string> ui_struct_class_name = null;
	Map<string> modules = null;
	string current_namespace = "";
	string current_class_name = "";
	Vector<string> function_stack = null;
	string current_module_name = "";
	bool is_interface = false;
	bool is_struct = false;
	bool is_return = false;
	bool is_async_opcode = false;
	bool is_async_await_op_call = false;
	
	
	/**
	 * Returns full class name
	 * @return string
	 */
	string getCurrentClassName()
	{
		return this.current_namespace ~ "." ~ this.current_class_name;
	}
	
	
	
	/**
	 * Returns UI struct class name
	 * @return string
	 */
	string getUIStructClassName()
	{
		return this.ui_struct_class_name.last();
	}
	
	
	
	/**
	 * Returns true if function is async
	 * @return bool
	 */
	void checkAwaitOpCode(BaseOpCode op_code){
		if (this.detectIsAwait(op_code)){
			this.is_async_opcode = true;
		}
		else{
			this.is_async_opcode = false;
		}
	}
	
	
	
	/**
	 * Returns true if function is async
	 * @return bool
	 */
	bool isAsyncF(){
		if (this.function_stack.count() == 0) return false;
		return this.function_stack.last().is_async;
	}
	
	
	
	/**
	 * Returns true if function is async
	 * @return bool
	 */
	bool isAsync(){
		if (not this.isAsyncF()) return false;
		return this.is_async_opcode;
	}
	
	
	
	/**
	 * Returns async ctx name
	 * @return string
	 */
	string asyncContextName(){
		if (not this.isAsyncF()) return "";
		return this.function_stack.last().async_ctx;
	}
	
	
	
	/**
	 * Returns async jump name
	 * @return string
	 */
	string asyncJumpName(){
		if (not this.isAsyncF()) return "";
		return this.function_stack.last().async_jump;
	}
	
	
	
	/**
	 * Returns async jump position
	 * @return string
	 */
	string asyncJumpCurrent(){
		if (not this.isAsyncF()) return "";
		FunctionStack obj = this.function_stack.last();
		return obj.getJumpPos();
	}
	
	
	
	/**
	 * Returns async jump position
	 * @return string
	 */
	string asyncJumpAdd(bool force = false){
		if (not this.isAsync() and not force) return "";
		FunctionStack obj = this.function_stack.last();
		obj.jumpAdd();
		return obj.getJumpPos();
	}
	
	
	
	/**
	 * Returns next jump position
	 * @return string
	 */
	string asyncJumpNext(bool force = false){
		if (not this.isAsync() and not force) return "";
		FunctionStack obj = this.function_stack.last();
		return this.function_stack.last().getJumpNext();
	}
	
	
	
	/**
	 * Increment jump position's level 
	 */
	void asyncJumpPush(bool force = false){
		if (not this.isAsync() and not force) return ;
		FunctionStack obj = this.function_stack.last();
		this.function_stack.last().jumpPush();
	}
	
	
	
	/**
	 * Decrement jump position's level
	 */
	void asyncJumpPop(bool force = false){
		if (not this.isAsync() and not force) return ;
		FunctionStack obj = this.function_stack.last();
		this.function_stack.last().jumpPop();
	}
	
	
	
	/**
	 * Push stop jump positions for break and continue
	 */
	void asyncPushStop(string start_pos, string end_pos){
		if (not this.isAsync()) return ;
		FunctionStack obj = this.function_stack.last();
		obj.stopPush(start_pos, end_pos);
	}
	
	
	
	/**
	 * Pop stop jump positions
	 */
	void asyncPopStop(){
		if (not this.isAsync()) return ;
		FunctionStack obj = this.function_stack.last();
		obj.stopPop();
	}
	
	
	
	/**
	 * Returns begin async position
	 * @return string
	 */
	string asyncBeginPos(){
		if (not this.isAsync()) return ;
		FunctionStack obj = this.function_stack.last();
		return obj.getAsyncBeginPos();
	}
	
	
	
	/**
	 * Returns end async position
	 * @return string
	 */
	string asyncEndPos(){
		if (not this.isAsync()) return ;
		FunctionStack obj = this.function_stack.last();
		return obj.getAsyncEndPos();
	}
	
	
	
	/**
	 * Push function
	 * @string name - Function name
	 */
	void functionPush(string name, bool is_async){
		FunctionStack obj = new FunctionStack();
		
		obj.name = name;
		obj.is_async = is_async;
		if (is_async){
			obj.async_ctx = "async_ctx_" ~ this.function_stack.count();
			obj.async_jump = "async_jump_" ~ this.function_stack.count();
			obj.async_jump_pos.push(0);
		}
		
		this.function_stack.push(obj);
	}
	
	
	
	/**
	 * Pop function
	 */
	void functionPop(){
		this.function_stack.pop();
	}
	
	
	
	/**
	 * Get name
	 */
	string getName(string name){
		if (name == 'parent'){
			return "super";
		}
		else if (name == 'self'){
			return this.current_namespace ~ "." ~ this.current_class_name;
		}
		else if (name == 'static'){
			return "this";
			/*return this.current_namespace ~ "." ~ this.current_class_name;*/
		}
		else if (this.modules.has(name)){
			return this.modules.item(name);
		}
		
		return name;
	}
	
	
	
	/**
	 * Get module name
	 * @param string name
	 * @return string
	 */
	string getModuleName(string name){
		if (this.modules.has(name)){
			return this.modules.item(name);
		}
		return name;
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor (ContextInterface context = null){
		parent(context);
		this.modules = new Map<string, string>();
	}
	
	
	
	/**
	 * Escape string
	 */
	string escapeString(string s){
		s = re::replace('\\\\', '\\\\', s);
		s = re::replace('"', '\\\"', s);
		s = re::replace('\n', '\\n', s);
		s = re::replace('\r', '\\r', s);
		s = re::replace('\t', '\\t', s);
		return s;
	}
	
	
	
	/**
	 * Escape string
	 */
	string convertString(string s){
		return '"' ~ this.escapeString(s) ~ '"';
	}
	
	
	
	/**
	 * Comment
	 */
	string OpComment(OpComment op_code){
		return "/*" ~ op_code.value ~ "*/"; 
	}
	
	
	/** =========================== Identifier ============================ */
	
	
	/**
	 * HexNumber
	 */
	string OpHexNumber(OpHexNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * Identifier
	 */
	string OpIdentifier(OpIdentifier op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.getName(op_code.value);
	}
	
	
	
	/**
	 * Number
	 */
	string OpNumber(OpNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * String
	 */
	string OpString(OpString op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.convertString(op_code.value);
	}
	
	
	
	/**
	 * OpStringItem
	 */
	string OpStringItem(OpStringItem op_code){
		return this.translateRun(op_code.value1) ~ '[' ~ this.s(this.translateRun(op_code.value2)) ~ this.s(']');
	}
	
	
	
	/** ======================== Dynamic or static ======================== */
	
	
	
	/**
	 * Dynamic load
	 */
	string OpDynamic(OpDynamic op_code){
		string res = this.o(this.translateRun(op_code.value), this.max_opcode_level) ~ '.' ~ op_code.name;
		this.current_opcode_level = this.max_opcode_level;
		return res;
	}
	
	
	
	/**
	 * Static load
	 */
	string OpStatic(OpStatic op_code){
		return this.translateRun(op_code.value) ~ '.' ~ op_code.name;
	}
	
	
	
	/**
	 * Template Identifier
	 */
	string OpTemplateIdentifier(OpTemplateIdentifier op_code){
		return this.translateRun(op_code.t);
	}
	
	
	
	
	/** ============================ Operations ============================ */
	
	
	/**
	 * ADD
	 */
	string OpAdd(OpAdd op_code){
		return this.op(op_code, '+', 13);
	}
	
	
	
	/**
	 * AND
	 */
	string OpAnd(OpAnd op_code){ 
		return this.op(op_code, '&&', 6);
	}
	
	
	
	/**
	 * Bit AND
	 */
	string OpBitAnd(OpBitAnd op_code){
		return this.op(op_code, '&', 9);
	}
	
	
	
	/**
	 * Bit NOT
	 */
	string OpBitNot(OpBitNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit OR
	 */
	string OpBitOr(OpBitOr op_code){
		return this.op(op_code, '|', 7);
	}
	
	
	
	/**
	 * Bit XOR
	 */
	string OpBitXor(OpBitXor op_code){
		return this.op(op_code, '^', 8);
	}
	
	
	
	/**
	 * Concat strings
	 */
	string OpConcat(OpConcat op_code){
	
		string res = "";
		if ( (op_code.value1 instanceof OpConcat) or (op_code.value1 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value1)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ ".toString(" ~
				this.s(this.translateRun(op_code.value1)) ~
				")"
			;
		}
		
		res ~= this.s('+');
		if ( (op_code.value2 instanceof OpConcat) or (op_code.value2 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value2)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ ".toString(" ~
				this.s(this.translateRun(op_code.value2)) ~
				")"
			;
		}
		
		this.current_opcode_level = 13;
		return res;
	}
	
	
	
	/**
	 * Divide
	 */
	string OpDiv(OpDiv op_code){
		return this.op(op_code, '/', 14);
	}
	
	
	
	/**
	 * Module
	 */
	string OpMod(OpMod op_code){
		return this.op(op_code, '%', 14);
	}
	
	
	
	/**
	 * Multiply
	 */
	string OpMult(OpMult op_code){
		return this.op(op_code, '*', 14);
	}
	
	
	
	/**
	 * New
	 */
	string OpNew(OpNew op_code){
		
		string s = "";
		
		/* Function name */
		s ~= "new " ~ this.translateRun(op_code.value);
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch ~ this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = 19;
		
		return s;
	}
	
	
	
	/**
	 * Not
	 */
	string OpNot(OpNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Or
	 */
	string OpOr(OpOr op_code){
		return this.op(op_code, '||', 5);
	}
	
	
	
	/**
	 * Post decrement
	 */
	string OpPostDec(OpPostDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '--' ~ semicolon;
		this.current_opcode_level = 17;
		return res;
	}
	
	
	
	/**
	 * Post increment
	 */
	string OpPostInc(OpPostInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '++' ~ semicolon;
		this.current_opcode_level = 17;
		return res;
	}
	
	
	
	/**
	 * Pow
	 */
	string OpPow(OpPow op_code){
		return this.op(op_code, '**', 15);
	}
	
	
	
	/**
	 * Pre decrement
	 */
	string OpPreDec(OpPreDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '--' ~ this.o(this.translateRun(op_code.value), 16) ~ semicolon;
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Pre increment
	 */
	string OpPreInc(OpPreInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '++' ~ this.o(this.translateRun(op_code.value), 16) ~ semicolon;
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit shift left
	 */
	string OpShiftLeft(OpShiftLeft op_code){
		return this.op(op_code, '<<', 12);
	}
	
	
	
	/**
	 * Bit shift right
	 */
	string OpShiftRight(OpShiftRight op_code){
		return this.op(op_code, '>>', 12);
	}
	
	
	
	/**
	 * Sub
	 */
	string OpSub(OpSub op_code){
		return this.op(op_code, '-', 13);
	}
	
	
	
	
	/**
	 * Operator call function
	 */
	string OpCall(OpCall op_code){ 
		
		string s = "";
		this.pushOneLine(true);
		
		/* Function name */
		bool f = true;
		if (op_code.value instanceof OpIdentifier){
			if (op_code.value.value == 'parent' and this.function_stack.get(0).name != "constructor"){
				s ~= "super." ~ this.function_stack.get(0).name;
				f = false;
			}
		}
		if (f){
			bool old_is_operation = this.is_operation;
			this.is_operation = true;
			s ~= this.translateRun(op_code.value);
			this.is_operation = old_is_operation;
		}
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch ~ this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		
		/* semicolon */
		this.popOneLine();
		if (not this.is_operation){
			s ~= ";";
		}
		
		this.current_opcode_level = this.max_opcode_level;
		
		if ( this.isAsyncF() and not this.is_async_await_op_call and op_code.is_await ){
			bool old_async_opcode = this.is_async_opcode;
			this.is_async_opcode = true;
			
			string res = "";
			string jump_pos_next = this.asyncJumpNext();
			res ~= this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_next) ~ ");";
			res ~= this.s("return " ~ s);
			
			this.levelDec();
			res ~= this.s("}");
			res ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_next) ~ "){");
			this.levelInc();
			this.asyncJumpAdd();
			
			this.is_async_opcode = old_async_opcode;
			
			return res;
		}
		
		
		return s;
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpCompare(OpCompare op_code){
		if (op_code.condition == 'implements'){
			return this.getName("rtl") ~ ".implements(" ~ this.translateRun(op_code.value1) ~ ", " ~ this.s(this.translateRun(op_code.value2)) ~ ")";
		}
		
		this.current_opcode_level = 10;
		return this.op(op_code, op_code.condition, 10);
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpTernary(OpTernary op_code){		
		string semicolon = this.is_operation ? "" : ";";
		string res = 
			'(' ~ this.translateRun(op_code.condition) ~ ') ? ' ~
			'(' ~ this.s(this.translateRun(op_code.if_true)) ~ ') : ' ~
			'(' ~ this.s(this.translateRun(op_code.if_false)) ~ ')'
		;
		this.current_opcode_level = 4;
		return res;
	}
	
	
	
	/**
	 * Copy struct
	 */
	string copyStruct(OpCopyStruct op_code, Vector<string> names)
	{
		bool old_is_operation = this.beginOperation();
		string res = "";
		
		if (op_code.item instanceof OpCopyStruct)
		{
			
			names.push(op_code.name);
			string name = rs::implode(".", names);
			
			res = name ~ ".copy( new " ~ this.getName("Map") ~ "({ " ~ 
				this.convertString(op_code.item.name) ~ 
				": " ~ 
				this.copyStruct( op_code.item, names ) ~ 
			" })  )";
			
		}
		else
		{
			res = this.translateItem( op_code.item );
		}
		
		this.endOperation(old_is_operation);
		return res;
	}
	
	
	
	/**
	 * Copy struct
	 */
	string OpCopyStruct(OpCopyStruct op_code)
	{		
		if (this.is_operation){
			return this.copyStruct(op_code, []);
		}
		
		return op_code.name ~ " = " ~ this.copyStruct(op_code, []) ~ ";";
	}
	
	
	
	/**
	 * Pipe
	 */
	string OpPipe(OpPipe op_code)
	{
		string res = "";
		
		res = this.getName("Maybe") ~ ".of(" ~ this.translateItem(op_code.value) ~ ")";		
		if (op_code.items != null)
		{
			for (int i=0; i<op_code.items.count(); i++)
			{
				BaseOpCode op_item = op_code.items.item(i);
				res ~= this.s( ".map(" ~ this.translateItem(op_item) ~ ")" );
			}
		}
		if (op_code.is_return_value)
		{
			res ~= this.s( ".value()" );
		}
		
		return res;
	}
	
	
	/** ========================== Vector and Map ========================= */
	
	
	/**
	 * Vector
	 */
	string OpVector(OpVector op_code){
		string res = "";
		
		res ~= "(new " ~ this.getName("Vector") ~ "())";
		for (var i=0; i<op_code.values.count(); i++){
			BaseOpCode item = op_code.values.item(i);
			this.current_opcode_level = this.max_opcode_level;
			res ~= this.s(".push(" ~ this.translateRun(item) ~ ")");
		}
		this.current_opcode_level = this.max_opcode_level;
		
		return res;
	}
	
	
	
	/**
	 * Map
	 */
	string OpMap(OpMap op_code){
		string res = "";
		
		Vector<string> keys = op_code.values.keys();
		
		res ~= "(new " ~ this.getName("Map") ~ "())";
		for (var i=0; i<keys.count(); i++){
			string key = keys.item(i);
			BaseOpCode item = op_code.values.item(key);
			this.current_opcode_level = this.max_opcode_level;
			res ~= this.s(".set(" ~ rs::json_encode(key) ~ ", " ~ this.translateRun(item) ~ ")");
		}
		this.current_opcode_level = this.max_opcode_level;
		
		return res;
	}
	
	
	
	/**
	 * Clone
	 */
	string OpMethod(OpMethod op_code){
		
		if (op_code.value instanceof OpDynamic)
		{
			string name = op_code.value.name;
			string obj = this.translateRun(op_code.value.value);
			if (obj == 'this')
				return obj ~ "." ~ name ~ ".bind(this)";
			return obj ~ "." ~ name;
		}
		
		return this.translateRun(op_code.value);
	}
	
	
	
	/**
	 * Class name
	 */
	string OpClassName(OpClassName op_code){
		return this.convertString(this.modules.get(op_code.value, ""));
	}
	
	
	
	/** ============================ Operators ============================ */
	
	
	/**
	 * Assign
	 */
	string OpAssignAwait(BaseOpCode op_code){
		string res = "";
		string s = "";
		
		this.is_async_await_op_call = true;
		
		bool old_is_operation = this.beginOperation();
		this.current_opcode_level = 0;
		this.levelInc();
		s = this.s(this.translateRun(op_code.value));
		this.levelDec();
		this.endOperation(old_is_operation);
		
		string jump_pos_next = this.asyncJumpNext(true);
		res ~= this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_next) ~ ");";
		res ~= this.s("return " ~ s ~ ";");
		
		this.levelDec();
		res ~= this.s("}");
		res ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_next) ~ "){");
		this.levelInc();
		
		bool old_is_operation = this.beginOperation();
		this.pushOneLine(true);
		
		if (op_code instanceof OpAssign){
			s = this.translateRun(op_code.ident);
			if (op_code.op_name == "=") s ~= " = ";
			else if (op_code.op_name == "~=") s ~= " += ";
			else if (op_code.op_name == "+=") s ~= " += ";
			else if (op_code.op_name == "-=") s ~= " -= ";		
		}
		else if (op_code instanceof OpAssignDeclare){
			s = op_code.name ~ " = ";
		}
		
		s ~= this.asyncContextName() ~ ".result();";
		this.popOneLine();
		this.endOperation(old_is_operation);
		this.asyncJumpAdd(true);
		
		res ~= this.s(s);
		
		this.is_async_await_op_call = false;
		
		return res;
	}
	
	
	
	/**
	 * Assign
	 */
	string OpAssign(OpAssign op_code){
		
		bool is_async_f = this.isAsyncF();
		bool is_async = false;
		if (is_async_f){
			if (op_code.value instanceof OpCall){
				if (op_code.value.is_await){
					is_async = true;
				}
			}
		}
		
		
		if (is_async){
			return this.OpAssignAwait(op_code);
		}
		
		
		bool old_is_operation = this.beginOperation();
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.ident);
		this.popOneLine();
		
		if (op_code.op_name == "=") res ~= " = ";
		else if (op_code.op_name == "~=") res ~= " += ";
		else if (op_code.op_name == "+=") res ~= " += ";
		else if (op_code.op_name == "-=") res ~= " -= ";
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Assign declare
	 */
	string OpAssignDeclare(OpAssignDeclare op_code){
		
		bool is_async_f = this.isAsyncF();
		bool is_async = false;
		if (is_async_f){
			if (op_code.value != null and op_code.value instanceof OpCall){
				if (op_code.value.is_await){
					is_async = true;
				}
			}
		}
		
		
		if (is_async){
			return this.OpAssignAwait(op_code);
		}
		
		
		string res = "";
		bool old_is_operation = this.beginOperation();
		
		if (op_code.value == null){
			if (is_async_f){
				this.endOperation(old_is_operation);
				return "";
			}
			this.pushOneLine(true);
			res = "var " ~ op_code.name;
			this.popOneLine();
		}
		else{
			/* one line */
			this.pushOneLine(true);
			res = ((not is_async_f) ? "var " : "") ~ op_code.name ~ ' = ';
			this.popOneLine();
			
			/* result */
			this.current_opcode_level = 0;
			this.levelInc();
			res ~= this.s(this.translateRun(op_code.value));
			this.levelDec();
		}
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Break
	 */
	string OpBreak(OpBreak op_code){
		
		if (this.isAsync()){
			this.is_return = true;
			string pos = this.asyncEndPos();
			return "return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(pos) ~ ");";
		}
		
		return "break;";
	}
	
	
	
	/**
	 * Clone
	 */
	string OpClone(OpClone op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* result */
		string s = this.getName("rtl") ~ "._clone(";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= this.s(")");
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return s;
	}
	
	
	
	/**
	 * Continue
	 */
	string OpContinue(OpContinue op_code){
		if (this.isAsync()){
			this.is_return = true;
			string pos = this.asyncBeginPos();
			return "return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(pos) ~ ");";
		}
		return "continue;"; 
	}
	
	
	
	/**
	 * Delete
	 */
	string OpDelete(OpDelete op_code){
		return "";
	}
	
	
	
	/**
	 * For
	 */
	string OpFor(OpFor op_code){
		string s = "";
		string jump_pos_begin = "";
		string jump_pos_end = "";
		string jump_pos_childs = "";
		
		
		/* Check await op_code*/
		this.checkAwaitOpCode(op_code);
		
		
		/* Async start */
		jump_pos_begin = this.asyncJumpCurrent();
		jump_pos_end = this.asyncJumpNext();
		this.asyncJumpPush();
		jump_pos_childs = this.asyncJumpCurrent();
		
		
		/* Push stop jump positions for break and continue */
		this.asyncPushStop(jump_pos_begin, jump_pos_end);
		
		
		/* Header */
		if (this.isAsync()){
			s ~= this.translateRun(op_code.loop_init);
			
			/* for header */
			this.asyncJumpAdd();
			jump_pos_begin = this.asyncJumpCurrent();
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_begin) ~ ");");
			this.levelDec();
			s ~= this.s("}");
			s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_begin) ~ "){");
			this.levelInc();
			
			/* for condition */
			this.beginOperation();
			string s1 = "if (" ~ this.translateRun(op_code.loop_condition) ~ "){";
			this.endOperation();
			s ~= this.s(s1);
		}
		else {
			this.beginOperation();
			s ~= "for (" ~ 
				this.translateRun(op_code.loop_init) ~ "; " ~
				this.translateRun(op_code.loop_condition) ~ "; " ~
				this.translateRun(op_code.loop_inc) ~ "){"
			;
			this.endOperation();
		}
		
		
		/* Childs */
		string op_code_childs = "";
		if (not this.isAsync()) this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			op_code_childs ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		if (this.isAsync()) op_code_childs ~= this.s(this.translateRun(op_code.loop_inc));
		if (not this.isAsync()) this.levelDec();
		if (this.isAsync()){
			this.levelInc();
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_childs) ~ ");");
			this.levelDec();
		}
		else{
			s ~= op_code_childs;
		}		
		s ~= this.s("}");
		
		
		
		/* Async jump code */
		if (this.isAsync()){
			
			/* Continue jump position */
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
			
			/* While */
			if (jump_pos_childs != ""){
				this.levelDec();
				s ~= this.s("}");
				s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_childs) ~ "){");
				this.levelInc();
				s ~= op_code_childs;
				s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_begin) ~ ");");
			}
			
			this.levelDec();
			s ~= this.s("}");
			s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_end) ~ "){");
			this.levelInc();
			
		}
		
		
		
		/* Pop stop jump positions */
		this.asyncPopStop();
		this.asyncJumpPop();
		this.asyncJumpAdd();
		
		return s;
	}
	
	
	
	/**
	 * If
	 */
	string OpIf(OpIf op_code){
		string s = "";
		bool old_is_return = this.is_return;
		
		string jump_pos_true = "";
		string jump_pos_false = "";
		string jump_pos_begin = "";
		string jump_pos_end = "";
		bool is_return_true = false;
		bool is_return_false = false;
		
		string op_code_true = "";
		string op_code_false = "";
		Vector<Map> op_code_else = new Vector<Map>();
		
		/* Check await op_code*/
		this.checkAwaitOpCode(op_code);
		
		/* Condition */
		this.beginOperation();
		s ~= "if (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		
		/* Increase level */
		jump_pos_end = this.asyncJumpNext();
		this.asyncJumpPush();
		jump_pos_begin = this.asyncJumpCurrent();
		
		
		/* If true */
		this.is_return = false;
		jump_pos_true = this.asyncJumpAdd();
		if (not this.isAsync()) this.levelInc();
		for (int i=0; i<op_code.if_true.count(); i++){
			op_code_true ~= this.s(this.translateRun(op_code.if_true.item(i)));
		}
		if (not this.isAsync()) this.levelDec();
		if (this.isAsync()){
			is_return_true = this.is_return;
			this.levelInc();
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_true) ~ ");");
			this.levelDec();
		}
		else {
			s ~= op_code_true;
		}
		s ~= this.s("}");
		
		
		
		/* If else */
		for (int i=0; i<op_code.if_else.count(); i++){
			OpIfElse if_else = op_code.if_else.item(i);
			
			this.beginOperation();
			string res = "else if (" ~ this.translateRun(if_else.condition) ~ "){";
			this.endOperation();
			s ~= this.s(res);
			
			this.is_return = false;
			string jump_pos = this.asyncJumpAdd();
			string code_else = "";
			if (not this.isAsync()) this.levelInc();
			for (int j=0; j<if_else.if_true.count(); j++){
				code_else ~= this.s(this.translateRun(if_else.if_true.item(j)));
			}
			if (not this.isAsync()) this.levelDec();
			
			if (this.isAsync()){
				bool is_return = this.is_return;
				op_code_else.push({
					'jump_pos': jump_pos,
					'is_return': is_return,
					'op_code': code_else,
				});
				this.levelInc();
				s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos) ~ ");");
				this.levelDec();
			}
			else{
				s ~= code_else;
			}
			
			s ~= this.s("}");
		}
		
		
		
		/* If false */
		if (op_code.if_false != null){
			this.is_return = false;
			jump_pos_false = this.asyncJumpAdd();
			s ~= this.s("else {");
			if (not this.isAsync()) this.levelInc();
			for (int i=0; i<op_code.if_false.count(); i++){
				op_code_false ~= this.s(this.translateRun(op_code.if_false.item(i)));
			}
			if (not this.isAsync()) this.levelDec();
			if (this.isAsync()){
				is_return_false = this.is_return;
				this.levelInc();
				s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_false) ~ ");");
				this.levelDec();
			}
			else {
				s ~= op_code_false;
			}
			s ~= this.s("}");
		}
		
		
		
		/* Async jump code */
		if (this.isAsync()){
			
			/* Continue jump position */
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
			
			
			/* True */
			if (jump_pos_true != ""){
				this.levelDec();
				s ~= this.s("}");
				s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_true) ~ "){");
				this.levelInc();
				s ~= op_code_true;
				if (not is_return_true){
					s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
				}
			}
			
			
			/* else */
			if (op_code_else.count() > 0){
				int op_code_else_sz = op_code_else.count();
				for (int i=0; i<op_code_else_sz; i++){
					Map item = op_code_else.item(i);
					int jump_pos = item.get("jump_pos", -1, "int");
					bool is_return = item.get("is_return", false, "bool");
					string op_code = item.get("op_code", "", "string");
					
					this.levelDec();
					s ~= this.s("}");
					s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos) ~ "){");
					this.levelInc();
					s ~= op_code;
					if (not is_return){
						s ~= this.s("return " ~ this.asyncContextName() ~ 
							".jump(" ~ this.convertString(jump_pos_end) ~ ");");
					}
				}
			}
			
			
			/* False */
			if (jump_pos_false != ""){
				this.levelDec();
				s ~= this.s("}");
				s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_false) ~ "){");
				this.levelInc();
				s ~= op_code_false;
				if (not is_return_false){
					s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
				}
			}
			
			this.levelDec();
			s ~= this.s("}");
			s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_end) ~ "){");
			this.levelInc();
		}
		
		
		/* Decrease level */
		this.asyncJumpPop();
		this.asyncJumpAdd();
		this.is_return = old_is_return;
		
		
		return s;
	}
	
	
	
	/**
	 * Return
	 */
	string OpReturn(OpReturn op_code){
		this.beginOperation();
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		string s = this.s( this.translateRun(op_code.value) );
		this.levelDec();
		
		if (this.isAsyncF()){
			s = "return " ~ this.asyncContextName() ~ ".resolve(" ~ s ~ ");";
			this.is_return = true;
		}
		else {
			s = "return " ~ s ~ ";";
		}
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Throw
	 */
	string OpThrow(OpThrow op_code){
		this.beginOperation();
		
		/* result */
		string s = "throw ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Try Catch
	 */
	string OpTryCatch(OpTryCatch op_code){
		string s = "";
		
		/* Check await op_code*/
		this.checkAwaitOpCode(op_code);
		
		string jump_pos_catch = "";
		string jump_pos_end = "";
		if ( this.isAsync() ){}
		else{
			s ~= "try{"; 
			this.levelInc();
		}
		
		string op_code_try = "";
		for (int i=0; i<op_code.op_try.count(); i++){
			op_code_try ~= this.s(this.translateRun(op_code.op_try.item(i)));
		}
		jump_pos_catch = this.asyncJumpNext();
		this.asyncJumpAdd();
		jump_pos_end = this.asyncJumpNext();
		
		if ( this.isAsync() ){ 
			s ~= this.asyncContextName() ~ ".catchPush(" ~ this.convertString(jump_pos_catch) ~ ");";
			s ~= op_code_try;
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
			this.levelDec();
			s ~= this.s("}");
			s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_catch) ~ "){");
			this.levelInc();
			this.asyncJumpAdd();
		}
		else{
			s ~= op_code_try;
			this.levelDec();
			s ~= this.s("}"); 
		}
		
		string is_else = "";
		int try_catch_childs_sz = op_code.childs.count();
		if ( not this.isAsync() ) s ~= "catch(_the_exception){";
		else {
			s ~= this.s(this.asyncContextName() ~ ".catchPop();");
			s ~= this.s("var _the_exception = " ~ this.asyncContextName() ~ ".getError();");
		}
		for (int i=0; i<try_catch_childs_sz; i++){
			OpTryCatchChilds try_catch = op_code.childs.item(i);
			
			this.beginOperation();
			string tp = this.translateRun(try_catch.op_type);
			string name = this.translateRun(try_catch.op_ident);
			this.endOperation();
			
			if (tp == 'var') tp = 'Error';
			
			/* catch childs */
			if ( not this.isAsync() ) this.levelInc();
			s ~= this.s(is_else ~ "if (_the_exception instanceof " ~ tp ~ "){");
			this.levelInc();
			s ~= this.s("var " ~ name ~ " = _the_exception;");
			for (int j=0; j<try_catch.childs.count(); j++){
				s ~= this.s(this.translateRun(try_catch.childs.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
			if ( not this.isAsync() ) this.levelDec();
			
			is_else = "else"; 
		}
		if (try_catch_childs_sz > 0){
			if ( this.isAsync() ){
				s ~= this.s("else {  return " ~ this.asyncContextName() ~ ".error( _the_exception );  }");
			}
			else{
				this.levelInc();
				s ~= this.s("else { throw _the_exception; }");
				this.levelDec();
			}
		}
		if ( this.isAsync() ){
			s ~= this.s(this.asyncContextName() ~ ".clearError();");
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
			this.levelDec();
			s ~= this.s("}");
			s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_end) ~ "){");
			this.levelInc();
			this.asyncJumpAdd();
		}
		else {
			s ~= this.s("}");
		}
		
		return s;
	}
	
	
	
	/**
	 * While
	 */
	string OpWhile(OpWhile op_code){
		string s = "";
		string jump_pos_begin = "";
		string jump_pos_end = "";
		string jump_pos_childs = "";
		
		/* Check await op_code*/
		this.checkAwaitOpCode(op_code);
		
		jump_pos_begin = this.asyncJumpCurrent();
		jump_pos_end = this.asyncJumpNext();
		this.asyncJumpPush();
		jump_pos_childs = this.asyncJumpCurrent();
		
		
		/* Push stop jump positions for break and continue */
		this.asyncPushStop(jump_pos_begin, jump_pos_end);
		
		
		/* Condition */
		this.beginOperation();
		if (this.isAsync()) s ~= "if (" ~ this.translateRun(op_code.condition) ~ "){";
		else s ~= "while (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		
		/* Childs */
		string op_code_childs = "";
		if (not this.isAsync()) this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			op_code_childs ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		if (not this.isAsync()) this.levelDec();
		if (this.isAsync()){
			this.levelInc();
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_childs) ~ ");");
			this.levelDec();
		}
		else{
			s ~= op_code_childs;
		}
		s ~= this.s("}");
		
		
		/* Async jump code */
		if (this.isAsync()){
			
			/* Continue jump position */
			s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_end) ~ ");");
			
			
			/* While */
			if (jump_pos_childs != ""){
				this.levelDec();
				s ~= this.s("}");
				s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_childs) ~ "){");
				this.levelInc();
				s ~= op_code_childs;
				s ~= this.s("return " ~ this.asyncContextName() ~ ".jump(" ~ this.convertString(jump_pos_begin) ~ ");");
			}
			
			
			this.levelDec();
			s ~= this.s("}");
			s ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(jump_pos_end) ~ "){");
			this.levelInc();
			
		}
		
		/* Pop stop jump positions */
		this.asyncPopStop();
		this.asyncJumpPop();
		this.asyncJumpAdd();
		
		return s;
	}
	
	
	
	
	/** ======================== Namespace and use ======================== */
	
	
	/**
	 * Namespace
	 */
	string OpNamespace(OpNamespace op_code){
		this.current_namespace = op_code.value;
		Vetor<string> arr = rs::explode(".", this.current_namespace);
		this.current_module_name = arr.item(0);
		this.modules.clear();
		if (this.current_module_name != 'Runtime'){
			this.modules.set("rtl", "Runtime.rtl");
			this.modules.set("rs", "Runtime.rs");
			this.modules.set("Map", "Runtime.Map");
			this.modules.set("Dict", "Runtime.Dict");
			this.modules.set("Vector", "Runtime.Vector");
			this.modules.set("Collection", "Runtime.Collection");
			this.modules.set("IntrospectionInfo", "Runtime.IntrospectionInfo");
			this.modules.set("UIStruct", "Runtime.UIStruct");
		}
		return "";
	}
	
	
	
	/**
	 * Use
	 */
	string OpUse(OpUse op_code){
		string lib_name = op_code.value;
		Vector<string> arr = rs::explode(".", lib_name);
		string class_name = arr.getLastItem("");
		if (op_code.alias_name != ""){
			this.modules.set(op_code.alias_name, lib_name);
		}
		else if (class_name != ""){
			this.modules.set(class_name, lib_name);
		}
		return "";
	}
	
	
	
	
	/** ============================= Classes ============================= */
	
	
	
	/**
	 * Returns all declare variables for async function
	 * @param BaseOpCode op_code
	 * @param Vector<string> variables
	 */
	void detectAsyncDeclareVariables(BaseOpCode op_code, Vector<string> variables){
		
		if (op_code instanceof OpAssignDeclare){
			variables.push(op_code.name);
		}
		else if (op_code instanceof OpFunctionDeclare){
			if (op_code.childs != null)
			{
				for (int i=0; i<op_code.childs.count(); i++){
					this.detectAsyncDeclareVariables( op_code.childs.item(i), variables );
				}
			}
		}
		else if (op_code instanceof OpFor){
			for (int i=0; i<op_code.childs.count(); i++){
				this.detectAsyncDeclareVariables( op_code.childs.item(i), variables );
			}
		}
		else if (op_code instanceof OpIf){
			for (int i=0; i<op_code.if_true.count(); i++){
				this.detectAsyncDeclareVariables( op_code.if_true.item(i), variables );
			}
			for (int i=0; i<op_code.if_else.count(); i++){
				OpIfElse item = op_code.if_else.item(i);
				for (int j=0; j<item.if_true.count(); j++){
					this.detectAsyncDeclareVariables( item.if_true.item(j), variables );
				}
			}
			if (op_code.if_false != null){
				for (int i=0; i<op_code.if_false.count(); i++){
					this.detectAsyncDeclareVariables( op_code.if_false.item(i), variables );
				}
			}
		}
		else if (op_code instanceof OpTryCatch){
			for (int i=0; i<op_code.op_try.count(); i++){
				this.detectAsyncDeclareVariables( op_code.op_try.item(i), variables );
			}
		}
		else if (op_code instanceof OpWhile){
			for (int i=0; i<op_code.childs.count(); i++){
				this.detectAsyncDeclareVariables( op_code.childs.item(i), variables );
			}
		}
		
	}
	
	
	
	/**
	 * Returns true if op_code contains await opCall
	 * @param BaseOpCode op_code
	 * @return bool
	 */
	bool detectIsAwait(BaseOpCode op_code){
		
		if (op_code instanceof OpAssign){
			if (op_code.value != null and op_code.value instanceof OpCall){
				if (op_code.value.is_await){
					return true;
				}
			}
			return false;
		}
		else if (op_code instanceof OpAssignDeclare){
			if (op_code.value != null and op_code.value instanceof OpCall){
				if (op_code.value.is_await){
					return true;
				}
			}
			return false;
		}
		else if (op_code instanceof OpCall){
			if (op_code.is_await){
				return true;
			}
			return false;
		}
		else if (op_code instanceof OpFunctionDeclare){
			for (int i=0; i<op_code.childs.count(); i++){
				if (this.detectIsAwait( op_code.childs.item(i) )){
					return true;
				}
			}
		}
		else if (op_code instanceof OpFor){
			for (int i=0; i<op_code.childs.count(); i++){
				if (this.detectIsAwait( op_code.childs.item(i) )){
					return true;
				}
			}
		}
		else if (op_code instanceof OpIf){
			for (int i=0; i<op_code.if_true.count(); i++){
				if (this.detectIsAwait( op_code.if_true.item(i) )){
					return true;
				}
			}
			for (int i=0; i<op_code.if_else.count(); i++){
				OpIfElse item = op_code.if_else.item(i);
				for (int j=0; j<item.if_true.count(); j++){
					if (this.detectIsAwait( item.if_true.item(j) )){
						return true;
					}
				}
			}
			if (op_code.if_false != null){
				for (int i=0; i<op_code.if_false.count(); i++){
					if (this.detectIsAwait( op_code.if_false.item(i) )){
						return true;
					}
				}
			}
		}
		else if (op_code instanceof OpTryCatch){
			for (int i=0; i<op_code.op_try.count(); i++){
				if (this.detectIsAwait( op_code.op_try.item(i) )){
					return true;
				}
			}
		}
		else if (op_code instanceof OpWhile){
			for (int i=0; i<op_code.childs.count(); i++){
				if (this.detectIsAwait( op_code.childs.item(i) )){
					return true;
				}
			}
		}
		
		return false;
	}
	
	
	
	/**
	 * Function header
	 */
	string OpFunctionDeclareHeader(OpFunctionDeclare op_code){
		
		string res = "";
		string ch = "";
		
		/* Static function */
		if (op_code.isFlag("static")){
			res ~= "static ";
		}
		
		/* Function Header */
		res ~= op_code.name;
		res ~= "(";
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			this.pushOneLine(true);
			res ~= ch ~ variable.name;
			this.popOneLine();
			ch = ", ";
		}
		res ~= ")";
		
		if (this.function_stack.count() > 1){
			res ~= " => ";
		}
		
		return res;
	}
	
	
	
	/**
	 * Function declare
	 */
	string OpFunctionDeclare(OpFunctionDeclare op_code){
		
		string res = "";
		string s = "";
		
		/* Skip if declare function */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		
		/* Function Header */
		this.functionPush(op_code.name, op_code.isFlag("async"));
		res ~= this.OpFunctionDeclareHeader(op_code);
		res ~= "{";
		this.setOperation(false);
		this.pushOneLine(false);
		this.levelInc();
		
		
		/* Async function */
		if (op_code.isFlag("async")){
			
			/* Detect async declare variables */
			Vector<string> variables = new Vector<string>();
			this.detectAsyncDeclareVariables(op_code, variables);
			if (variables.count() > 0){
				res ~= this.s("var " ~ rs::implode(", ", variables) ~ ";");
			}
			delete variables;
			
			/* Detect async return function */
			res ~= this.s("return (" ~ this.asyncContextName() ~ ") => {");
			this.levelInc();
			res ~= this.s("var " ~ this.asyncJumpName() ~ " = " ~ this.asyncContextName() ~ ".current();");
			res ~= this.s("if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString(this.asyncJumpCurrent()) ~ "){");
			this.levelInc();
		}
		
		
		/* Default variables */
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			if (variable.value == null)
				continue;
			this.pushOneLine(true);
			s = "if ("~variable.name~" == undefined) "~variable.name~"="~this.translateRun(variable.value)~";";
			this.popOneLine();
			res ~= this.s(s);
		}
		
		
		/* Childs */
		if (op_code.childs != null)
		{
			if (op_code.is_lambda)
			{
				if (op_code.childs.count() > 0)
				{
					bool old_is_operation = this.beginOperation(true);
					string lambda_res = this.translateRun(op_code.childs.item(0));
					this.endOperation(old_is_operation);
					res ~= this.s("return " ~ lambda_res ~ ";");
				}
			}
			else
			{
				for (int i=0; i<op_code.childs.count(); i++)
				{
					res ~= this.s(this.translateRun(op_code.childs.item(i)));
				}
			}
		}
		
		
		/* Childs */
		else if (op_code.return_function != null)
		{
			res ~= this.s("return " ~ this.translateItem( op_code.return_function ));
		}
		
		
		
		/* Async function */
		if (op_code.isFlag("async")){
			this.levelDec();
			res ~= this.s("}");
			res ~= this.s("else if (" ~ this.asyncJumpName() ~ " == " ~ this.convertString("-1") ~ "){");
			this.levelInc();
			res ~= this.s("return " ~ this.asyncContextName() ~ ".error( " ~ this.asyncContextName() ~ ".getError() )");
			this.levelDec();
			res ~= this.s("}");
			res ~= this.s("else{");
			this.levelInc();
			res ~= this.s("return " ~ this.asyncContextName() ~ ".next();");
			this.levelDec();	
			res ~= this.s("}");
			res ~= this.s("return " ~ this.asyncContextName() ~ ".end();");
			this.levelDec();
			res ~= this.s("}");
		}
		
		
		this.levelDec();
		res ~= this.s("}");
		this.popOneLine();
		this.functionPop();
		
		return res;
	}
	
	
	
	/**
	 * Class declare header
	 */
	string OpClassDeclareHeader(OpClassDeclare op_code){
		
		string s = "";
		string res = "";
		string name = "";
		string ch = "";
		Vector<string> v = rs::explode(".", this.current_namespace);
		this.ui_struct_class_name.push( this.current_namespace ~ "." ~ this.current_class_name );
		
		for (int i=0; i<v.count(); i++){
			name ~= ch ~ v.item(i);
			s = "if (typeof "~name~" == 'undefined') "~name~" = {};";
			if (i==0) res ~= s;
			else res ~= this.s(s);
			ch = ".";
		}
		
		this.beginOperation();
		s = this.current_namespace ~ "." ~ op_code.class_name ~ " = class";
		if (op_code.class_extends != ""){
			s ~= " extends " ~ this.translateRun(op_code.class_extends);
		}
		s ~= "{";
		this.endOperation();
		res ~= this.s(s);
		this.levelInc();
		
		return res;
	}
	
	
	
	/**
	 * Class declare footer
	 */
	string OpClassDeclareFooter(OpClassDeclare op_code){
		
		string res = "";
		
		/* Static variables */
		for (int i=0; i<op_code.childs.count(); i++){
			BaseOpCode variable = op_code.childs.item(i);
			if (not (variable instanceof OpAssignDeclare))
				continue;
			if (variable.flags != null and (variable.isFlag('static') or variable.isFlag('const'))){
				this.beginOperation();
				string s = this.current_namespace ~ "." ~ op_code.class_name ~ "." ~ variable.name ~ " = " ~
					this.translateRun(variable.value) ~ ";";
				this.endOperation();
				res ~= this.s(s);
			}
		}
		
		/* Static implements */
		Vector<string> class_implements = op_code.class_implements;
		if (class_implements != null and class_implements.count() > 0){
			string name = this.current_namespace ~ "." ~ op_code.class_name;
			res ~= this.s( name ~ ".__static_implements__ = [];" );
			for (int i=0; i<class_implements.count(); i++){
				string value = class_implements.item(i);
				res ~= this.s( name ~ ".__static_implements__.push(" ~ this.getName(value) ~ ")" );
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Returns declare type
	 * @return string
	 */
	string getTypeValue(BaseOpCode tp){
		string res = "";
		while (tp != null){
			
			if (tp instanceof OpIdentifier){
				if (res != "") res = "." ~ res;
				res = this.getModuleName(tp.value) ~ res;
				tp = null;
			}
			else if (tp instanceof OpDynamic){
				if (res != "") res = "." ~ res;
				res = tp.name ~ res;
				tp = tp.value;			
			}
			else if (tp instanceof OpTemplateIdentifier){
				tp = tp.t;
			}
			else {
				tp = null;
			}
		}
		return res;
	}
	
	
	
	/**
	 * Returns declare type
	 * @return string
	 */
	string getAssignDeclareTypeValue(OpAssignDeclare variable){
		return this.getTypeValue(variable.tp);
	}
	
	
	
	/**
	 * Returns declare type
	 * @return string
	 */
	string getAssignDeclareTypeTemplate(OpAssignDeclare variable){
		
		if (variable.tp instanceof OpTemplateIdentifier){
			if (variable.tp.childs != null){
				BaseOpCode code = variable.tp.childs.get(0);
				return this.getTypeValue(code);
			}
		}
		
		return "";
	}
	
	
	
	/**
	 * Class init functions
	 */
	string OpClassInit(OpClassDeclare op_code){
		
		Vector<BaseOpCode> childs = op_code.childs;
		Vector<string> class_implements = op_code.class_implements;
		string class_extends = "";
		
		if (op_code.class_extends){
			if (this.modules.has(op_code.class_extends.value))
			{
				class_extends = this.modules.item(op_code.class_extends.value);
			}
			else
			{
				class_extends = op_code.class_extends.value;
			}
		}
		
		string s = "";
		string res = "";
		bool has_assignable = false;
		bool has_serializable = false;
		bool has_cloneable = false;
		bool has_variables = false;
		bool has_implements = class_implements != null and class_implements.count() > 0;
		bool has_methods_annotations = false;
		bool has_fields_annotations = false;
		
		for (int i=0; i<childs.count(); i++){
			BaseOpCode variable = childs.item(i);
			if (variable instanceof OpAssignDeclare){
				if (variable.isFlag("serializable")){
					has_serializable = true;
					has_cloneable = true;
				}
				if (variable.isFlag("cloneable")){
					has_cloneable = true;
				}
				if (variable.isFlag("assignable")){
					has_assignable = true;
				}
				if (not variable.isFlag('static') and not variable.isFlag('const')){
					has_variables = true;
				}
				if (variable.hasAnnotations()){
					has_fields_annotations = true;
				}
			}
			if (variable instanceof OpFunctionDeclare){
				if (variable.hasAnnotations()){
					has_methods_annotations = true;
				}
			}
		}
		
		if (this.is_struct){
			has_serializable = true;
			has_cloneable = true;
		}
		
		res ~= this.s("/* ======================= Class Init Functions ======================= */");
		
		if (not this.is_interface){
			res ~= this.s(
				"getClassName(){" ~
					"return " ~ this.convertString(this.current_namespace ~ "." ~ this.current_class_name) ~ 
				";}"
			);
			res ~= this.s(
				"static getParentClassName(){" ~
					"return " ~ this.convertString(class_extends) ~ 
				";}"
			);
		}
		
		if (this.current_module_name != 'Runtime' or this.current_class_name != 'CoreObject'){
			
			/* Init function */
			if (has_variables or has_implements){
				res ~= this.s("_init(){");
				this.levelInc();
				
				/* super init */
				if (class_extends != ""){
					res ~= this.s("super._init();");
				}
				
				/* Output variables */
				if (childs != null)
				{
					for (int i=0; i<childs.count(); i++)
					{
						BaseOpCode variable = childs.item(i);
						if (not (variable instanceof OpAssignDeclare)) continue;
						if (variable.value == null) continue;
						string var_prefix = "";
						if (this.is_struct and variable.isFlag("public") and not variable.isFlag("static"))
						{
							var_prefix = "__";
						}
						bool is_struct = this.is_struct and not variable.isFlag("static") and 
							not variable.isFlag("const");
						if (is_struct)
						{
							this.beginOperation();
							s = "this." ~ var_prefix ~ variable.name ~ " = " ~ this.translateRun(variable.value) ~ ";";
							this.endOperation();
							res ~= this.s(s);
							res ~= this.s(  
								"Object.defineProperty(this, " ~ this.convertString(variable.name) ~ 
								", { get: function() { return this.__"~ variable.name ~
								"; }, set: function(value) { throw new Runtime.Exceptions.AssignStructValueError("~
								this.convertString(variable.name)~") }});"
							);
						}
						else
						{
							this.beginOperation();
							s = "this." ~ variable.name ~ " = " ~ this.translateRun(variable.value) ~ ";";
							this.endOperation();
							res ~= this.s(s);
						}
					}
				}
				
				/* Implements */
				if (class_implements != null and class_implements.count() > 0)
				{
					res ~= this.s("if (this.__implements__ == undefined){this.__implements__ = [];}");
					for (int i=0; i<class_implements.count(); i++)
					{
						string name = class_implements.item(i);
						this.beginOperation();
						s = "this.__implements__.push(" ~ this.getName(name) ~ ");";
						this.endOperation();
						res ~= this.s(s);
					}
				}
				
				this.levelDec();
				res ~= this.s("}");
			}
			
			/* If has cloneable variables */
			if (has_cloneable or has_assignable)
			{
				
				/*
				res ~= this.s("createNewInstance(){");
				this.levelInc();
				res ~= this.s("return " ~ this.getName("rtl") ~ ".newInstance( this.getClassName() );");
				this.levelDec();
				res ~= this.s("}");
				*/
				
				res ~= this.s("assignObject(obj){");
				this.levelInc();
				res ~= this.s("if (obj instanceof " ~ this.getName(this.current_class_name) ~ "){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++)
				{
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					bool is_struct = this.is_struct and not variable.isFlag("static") and 
						not variable.isFlag("const");
					string var_prefix = "";
					if (this.is_struct and variable.isFlag("public") and not variable.isFlag("static"))
					{
						var_prefix = "__";
					}	
					if (variable.isFlag("public") and (variable.isFlag("cloneable") or 
						variable.isFlag("serializable") or is_struct))
					{
						if (this.is_struct)
						{
							res ~= this.s(
								"this." ~ var_prefix ~ variable.name ~ " = " ~
								"obj." ~ var_prefix ~ variable.name ~ ";"
							);
						}
						else
						{
							res ~= this.s(
								"this." ~ var_prefix ~ variable.name ~ " = " ~
								this.getName("rtl") ~ "._clone(" ~
								"obj." ~ var_prefix ~ variable.name ~ ");"
							);
						}
					}
				}
				this.levelDec();
				res ~= this.s("}");
				res ~= this.s("super.assignObject(obj);");
				this.levelDec();
				res ~= this.s("}");
			}
			
			/* If has serializable variables */
			if (has_serializable or has_assignable)
			{
				int class_variables_serializable_count = 0;
				
				/* assignValue function */
				res ~= this.s("assignValue(variable_name, value, sender){if(sender==undefined)sender=null;");
				this.levelInc();
				class_variables_serializable_count = 0;
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					bool is_struct = this.is_struct and not variable.isFlag("static") and 
						not variable.isFlag("const");
					string var_prefix = "";
					if (this.is_struct and variable.isFlag("public") and not variable.isFlag("static"))
					{
						var_prefix = "__";
					}
					if (variable.isFlag("public") and (variable.isFlag("serializable") or 
						variable.isFlag("assignable") or is_struct))
					{
						
						string type_value = this.getAssignDeclareTypeValue(variable);
						string type_template = this.getAssignDeclareTypeTemplate(variable);
						string def_val = "null";
						if (variable.value != null)
						{
							def_val = this.translateRun(variable.value);
						}
						
						string s = "if (variable_name == " ~ this.convertString(variable.name) ~ ")";
						s ~= "this." ~ var_prefix ~ variable.name ~ " = ";
						s ~= this.getName("rtl") ~ 
							".correct(value,\""~type_value~"\","~def_val~",\""~type_template~"\");";
						/*s ~= "this.assignValueAfter(" ~ this.convertString(variable.name) ~ ",value,sender);}";*/
						
						if (class_variables_serializable_count == 0) res ~= this.s(s);
						else res ~= this.s("else " ~ s);
						class_variables_serializable_count++;
					}
				}
				if (class_variables_serializable_count == 0){
					res ~= this.s("super.assignValue(variable_name, value, sender);");
				}
				else{
					res ~= this.s("else super.assignValue(variable_name, value, sender);");
				}
				this.levelDec();
				res ~= this.s("}");
				
				
				/* takeValue function */
				res ~= this.s("takeValue(variable_name, default_value){");
				this.levelInc();
				res ~= this.s("if (default_value == undefined) default_value = null;");
				class_variables_serializable_count = 0;
				for (int i=0; i<childs.count(); i++)
				{
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					bool is_struct = this.is_struct and not variable.isFlag("static") and 
						not variable.isFlag("const");
					string var_prefix = "";
					if (this.is_struct and variable.isFlag("public") and not variable.isFlag("static"))
					{
						var_prefix = "__";
					}	
					if (variable.isFlag("public") and (variable.isFlag("serializable") or 
						variable.isFlag("assignable") or is_struct))
					{
						string take_value_s = "if (variable_name == " ~ this.convertString(variable.name) ~ ") " ~ 
							"return this." ~ var_prefix ~ variable.name ~ ";";
						if (class_variables_serializable_count == 0) res ~= this.s(take_value_s);
						else res ~= this.s("else " ~ take_value_s);
						class_variables_serializable_count++;
					}
				}
				res ~= this.s("return super.takeValue(variable_name, default_value);");
				this.levelDec();
				res ~= this.s("}");		
			}
				
				
			if (has_serializable or has_assignable or has_fields_annotations){
				
				/* getFieldsList function */
				res ~= this.s("static getFieldsList(names, flag){");
				this.levelInc();
				res ~= this.s("if (flag==undefined)flag=0;");
				
				Map<Vector> vars = new Map();
				
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					if (not variable.isFlag("public"))
						continue;
					
					bool is_struct = this.is_struct and not variable.isFlag("static") and 
						not variable.isFlag("const");
					
					bool is_static = variable.isFlag("static");
					bool is_serializable = variable.isFlag("serializable");
					bool is_assignable = variable.isFlag("assignable");
					bool has_annotation = variable.hasAnnotations();
					
					if (is_struct){
						is_serializable = true;
						is_assignable = true;
					}
					if (is_serializable){
						is_assignable = true;
					}
					
					int flag = 0;
					if (is_serializable) flag = flag | 1;
					if (is_assignable) flag = flag | 2;
					if (has_annotation) flag = flag | 4;
					
					if (flag != 0){
						if (not vars.has(flag)) vars.set(flag, new Vector<string>());
						Vector<string> v = vars.item(flag);
						v.push(variable.name);
					}
					
				}
				
				vars.each(
					void (string flag, Vector<string> v) use (res)
					{
						res ~= this.s("if ((flag | "~flag~")=="~flag~"){");
						this.levelInc();
						v.each(
							void (string varname) use (res)
							{
								res ~= this.s("names.push(" ~ this.convertString(varname) ~ ");");
							}
						);
						this.levelDec();
						res ~= this.s("}");
					}
				);
				
				this.levelDec();
				res ~= this.s("}");
				
				
				/* getFieldInfoByName function */
				res ~= this.s("static getFieldInfoByName(field_name){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
						
					if (variable.isFlag("public") and variable.hasAnnotations()){
						res ~= this.s("if (field_name == " ~ this.convertString(variable.name) ~ "){");
						this.levelInc();
						res ~= this.s("return new " ~ this.getName("IntrospectionInfo") ~ "(");
						this.levelInc();
						
						res ~= this.s("(new " ~ this.getName("Map") ~ "())");
						res ~= this.s(".set(\"kind\", \"field\")");
						res ~= this.s(".set(\"class_name\", " ~ 
							this.convertString(this.getCurrentClassName()) ~  ")");
						res ~= this.s(".set(\"name\", " ~ this.convertString(variable.name) ~ ")");
						res ~= this.s(".set(\"annotations\", ");
						this.levelInc();
						res ~= this.s("(new " ~ this.getName("Vector") ~ "())");
						for (int j=0; j<variable.annotations.count(); j++){
							OpAnnotation annotation = variable.annotations.item(j);
							
							this.pushOneLine(true);
							string s_kind = this.translateRun(annotation.kind);
							string s_options = this.translateRun(annotation.options);
							this.popOneLine();
							
							res ~= this.s(".push(new " ~ s_kind ~ "(" ~ s_options ~ "))");
						}
						this.levelDec();
						res ~= this.s(")");
						
						this.levelDec();
						res ~= this.s(");");
						this.levelDec();
						res ~= this.s("}");
					}
					
				}
				res ~= this.s("return null;");
				this.levelDec();
				res ~= this.s("}");
			}	
			
			
			
			if (has_methods_annotations){	
				
				/* getMethodsList function */
				res ~= this.s("static getMethodsList(names){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpFunctionDeclare))
						continue;
					if (variable.isFlag("public") and variable.hasAnnotations())
						res ~= this.s("names.push(" ~ this.convertString(variable.name) ~ ");");
				}
				this.levelDec();
				res ~= this.s("}");
				
				
				/* getMethodInfoByName function */
				res ~= this.s("static getMethodInfoByName(method_name){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpFunctionDeclare))
						continue;
					if (variable.isFlag("public") and variable.hasAnnotations()){
						res ~= this.s("if (method_name == " ~ this.convertString(variable.name) ~ "){");
						this.levelInc();
						res ~= this.s("return new " ~ this.getName("IntrospectionInfo") ~ "(");
						this.levelInc();
						
						res ~= this.s("(new " ~ this.getName("Map") ~ "())");
						res ~= this.s(".set(\"kind\", \"method\")");
						res ~= this.s(".set(\"class_name\", " ~ 
							this.convertString(this.getCurrentClassName()) ~  ")");
						res ~= this.s(".set(\"name\", " ~ this.convertString(variable.name) ~ ")");
						
						res ~= this.s(".set(\"annotations\", ");
						this.levelInc();
						res ~= this.s("(new " ~ this.getName("Vector") ~ "())");
						for (int j=0; j<variable.annotations.count(); j++){
							OpAnnotation annotation = variable.annotations.item(j);
							
							this.pushOneLine(true);
							string s_kind = this.translateRun(annotation.kind);
							string s_options = this.translateRun(annotation.options);
							this.popOneLine();
							
							res ~= this.s(".push(new " ~ s_kind ~ "(" ~ s_options ~ "))");
						}
						this.levelDec();
						res ~= this.s(")");
						
						this.levelDec();
						res ~= this.s(");");
						this.levelDec();
						res ~= this.s("}");
					}
				}
				res ~= this.s("return null;");
				this.levelDec();
				res ~= this.s("}");
			}
			
		}
		
		/* Output classes annotations */
		if (op_code.hasAnnotations()){
			res ~= this.s("static getClassInfo(){");
			this.levelInc();
			
			res ~= this.s("return new " ~ this.getName("IntrospectionInfo") ~ "(");
			this.levelInc();
			
			res ~= this.s("(new " ~ this.getName("Map") ~ "())");
			res ~= this.s(".set(\"kind\", \"class\")");
			res ~= this.s(".set(\"class_name\", " ~ this.convertString(this.getCurrentClassName()) ~  ")");
			
			res ~= this.s(".set(\"annotations\", ");
			this.levelInc();
			res ~= this.s("(new " ~ this.getName("Vector") ~ "())");
			for (int j=0; j<op_code.annotations.count(); j++){
				OpAnnotation annotation = op_code.annotations.item(j);
				
				this.pushOneLine(true);
				string s_kind = this.translateRun(annotation.kind);
				string s_options = this.translateRun(annotation.options);
				this.popOneLine();
				
				res ~= this.s(".push(new " ~ s_kind ~ "(" ~ s_options ~ "))");
			}
			this.levelDec();
			res ~= this.s(")");
			
			this.levelDec();
			res ~= this.s(");");
			
			this.levelDec();
			res ~= this.s("}");
		}
		
		
		return res;
	}
	
	
	
	/**
	 * Class declare body
	 */
	string OpClassBody(OpClassDeclare op_code){
		string res = "";
		for (int i=0; i<op_code.childs.count(); i++){
			BaseOpCode item = op_code.childs.item(i);
			res ~= this.s(this.OpClassBodyItem(item));
		}
		return res;
	}
	
	
	
	/**
	 * Class declare body item
	 */
	string OpClassBodyItem(BaseOpCode op_code){
		if (op_code instanceof OpFunctionArrowDeclare){
			return this.OpFunctionArrowDeclare(op_code);
		}
		else if (op_code instanceof OpFunctionDeclare){
			return this.OpFunctionDeclare(op_code);
		}
		else if (op_code instanceof OpPreprocessorSwitch){
			return this.OpPreprocessorSwitch(op_code);
		}
		else if (op_code instanceof OpComment){
			return this.OpComment(op_code);
		}
		return "";
	}
	
	
	
	/**
	 * Class declare
	 */
	string OpClassDeclare(OpClassDeclare op_code){
		string res = "";
		string s = "";
		
		/* Set current class name */
		this.current_class_name = op_code.class_name;
		this.modules.set(this.current_class_name, this.current_namespace ~ "." ~ this.current_class_name);
		
		/* Skip if declare class */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Header */
		res ~= this.OpClassDeclareHeader(op_code);
		
		/* Body */
		res ~= this.OpClassBody(op_code);
		
		/* Class Init */
		res ~= this.OpClassInit(op_code);
		
		/* Footer class */
		this.levelDec();
		res ~= this.s("}");
		
		/* Footer */
		res ~= this.OpClassDeclareFooter(op_code);
		
		
		return res;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpInterfaceDeclare(OpInterfaceDeclare op_code){
		this.is_interface = true;
		string res = this.OpClassDeclare(op_code);
		this.is_interface = false;
		return res;
	}
	
	
	
	/**
	 * Struct declare
	 */
	string OpStructDeclare(OpStructDeclare op_code){
		this.is_struct = true;
		string res = this.OpClassDeclare(op_code);
		this.is_struct = false;
		return res;
	}
	
	
	
	
	/* =========================== HTML OP Codes ========================== */
	
	
	/**
	 * Check if name is component
	 * @param string name
	 * @return bool
	 */
	bool isComponent(string name)
	{
		string ch = rs::charAt(name, 0);
		return rs::strtoupper(ch) == ch and ch != "";
	}
	
	
	
	/**
	 * Html escape
	 */
	string OpHtmlEscape(OpHtmlEscape op_code)
	{
		string value = this.translateRun(op_code.value);
		return this.getName("rs") ~ ".htmlEscape(" ~ value ~ ")";
	}
	
	
	
	/**
	 * OpHtmlJson
	 */
	string OpHtmlJson(OpHtmlJson op_code)
	{
		return this.getName("rtl") ~ ".json_encode(" ~ this.translateRun(op_code.value) ~ ")";
		string res = "";
		res = "new "~this.getName("UIStruct")~"(new "~this.getName("Map")~"({";
		res ~= this.s('"name":"span",');
		res ~= this.s('"props": new ' ~ this.getName("Map") ~ '({');
		res ~= this.s('"rawHTML":' ~ value);
		res ~= this.s("})})");
		return res;
	}
	
	
	
	/**
	 * OpHtmlRaw
	 */
	string OpHtmlRaw(OpHtmlRaw op_code)
	{
		return this.translateRun(op_code.value);
		string res = "";
		res = "new "~this.getName("UIStruct")~"(new "~this.getName("Map")~"({";
		res ~= this.s('"name":"span",');
		res ~= this.s('"props": new ' ~ this.getName("Map") ~ '({');
		res ~= this.s('"rawHTML":' ~ value);
		res ~= this.s("})})");
		return res;
	}
	
	
	
	/**
	 * Html Text
	 */
	string OpHtmlText(OpHtmlText op_code)
	{
		return this.convertString(op_code.value);
		return this.getName("rtl") ~".normalizeUI(" ~ this.convertString(op_code.value) ~ ")";
	}
	
	
	
	/**
	 * Html tag
	 */
	string OpHtmlTag(OpHtmlTag op_code)
	{
		
		bool is_component = false;
		string res = "";
		
		this.pushOneLine(false);
		
		/* isComponent */
		if (this.modules.has(op_code.tag_name))
		{
			res = "new "~this.getName("UIStruct")~"(new "~this.getName("Map")~"({";
			res ~= this.s('"kind":"component",');
			res ~= this.s('"name":'~this.convertString(this.modules.item(op_code.tag_name))~',');
			is_component = true;
		}
		else
		{
			res = "new "~this.getName("UIStruct")~"(new "~this.getName("Map")~"({";
			res ~= this.s('"class_name": '~this.convertString( this.getUIStructClassName() )~',');
			res ~= this.s('"name":'~this.convertString(op_code.tag_name)~',');
		}
		
		
		/* Check contains single raw item */
		
		/*
		BaseOpCode raw_item = null;
		if (not op_code.is_plain  and op_code.childs != null and op_code.childs.count() == 1)
		{
			BaseOpCode item = op_code.childs.item(0);
			if (item instanceof OpHtmlJson)
			{
				raw_item = item;
			}
			else if (item instanceof OpHtmlRaw)
			{
				raw_item = item;
			}
		}
		*/
		
		/* Attributes */
		if (is_component) res ~= this.s('"props": this.getElementAttrs()');
		else res ~= this.s('"props": (new ' ~ this.getName("Map") ~ '())');
		this.levelInc();
		if (op_code.attributes != null and op_code.attributes.count() > 0)
		{
			op_code.attributes.each(
				void (OpHtmlAttribute item) use (res)
				{
					bool old_operation = this.beginOperation(true);
					this.pushOneLine(true);
					string value = this.translateRun(item.value);
					this.popOneLine();
					this.endOperation(old_operation);
					res ~= this.s(".set(" ~ this.convertString(item.key) ~ ", " ~ value ~ ")");
				}
			);
		}
		if (op_code.spreads != null and op_code.spreads.count() > 0)
		{
			op_code.spreads.each(
				void (string item) use (res)
				{
					res ~= this.s(".addMap(" ~ item ~ ")");
				}
			);
		}
		
		this.levelDec();
		res ~= this.s(",");
		
		/* Plain HTML tag script, pre, textarea */
		if (op_code.is_plain)
		{
			if (op_code.childs != null)
			{
				string value = op_code.childs.reduce(
					void (string res, BaseOpCode item)
					{
						string value = "";
						if (item instanceof OpHtmlJson)
						{
							value = this.getName("rtl") ~ ".json_encode(" ~ this.translateRun(item.value) ~ ")";
							value = this.getName("rtl") ~ ".toString(" ~ value ~ ")";
						}
						else if (item instanceof OpHtmlRaw)
						{
							value = this.translateRun(item.value);
							value = this.getName("rtl") ~ ".toString(" ~ value ~ ")";
						}
						else if ( 
							(item instanceof OpConcat) or 
							(item instanceof OpString)
						){
							value = this.translateRun(item);
						}
						else if (item instanceof OpHtmlEscape)
						{
							value = this.translateRun(item);
							value = this.getName("rs") ~ ".htmlEscape(" ~ value ~ ")";
						}
						else if (item instanceof OpHtmlText)
						{
							value = this.convertString(item.value);
						}
						else
						{
							value = this.translateRun(item);
							value = this.getName("rtl") ~ ".toString(" ~ value ~ ")";
						}
						
						if (res == "") return value;
						return res ~ "+" ~ value;
					},
					""
				);
				
				bool old_operation = this.beginOperation(true);
				this.pushOneLine(true);
				
				res ~= this.s('"children": new ' ~ this.getName("Vector") ~ '(');
				this.levelInc();
				res ~= this.getName("rtl") ~".normalizeUI(" ~ value ~ ")";
				/* res ~= this.s('"rawHTML":' ~ value ~ ','); */
				this.levelDec();
				res ~= this.s(")");
				
				this.popOneLine();
				this.endOperation(old_operation);
				
			}
		}
		
		/* Single raw item */
		
		/*
		else if (raw_item != null)
		{
			if (raw_item instanceof OpHtmlJson)
			{
				string value = this.getName("rs") ~ ".json_encode(" ~ this.translateRun(raw_item.value) ~ ")";
				res ~= this.s('"rawHTML":' ~ value ~ ',');
			}
			else if (raw_item instanceof OpHtmlRaw)
			{
				string value = this.translateRun(raw_item.value);
				res ~= this.s('"rawHTML":' ~ value ~ ',');
			}
		}
		*/
		
		
		/* Childs */
		else 
		{
			if (op_code.childs == null or op_code.childs.count() == 0)
			{
			}
			else
			{
				res ~= this.s('"children": ' ~ this.getName("rtl") ~ 
					'.normalizeUIVector(new ' ~ this.getName("Vector") ~ '(');
				this.levelInc();
				string ch = "";
				op_code.childs.each(
					void (BaseOpCode item) use (res, ch)
					{
						if (item instanceof OpComment){ return; }
						res ~= ch ~ this.s( this.translateRun(item) );
						ch = ",";
					}
				);
				this.levelDec();
				res ~= this.s("))");
			}
		}
		
		res ~= this.s("}))");
		this.popOneLine();
		
		return res;
	}
	
	
	
	/**
	 * Html tag
	 */
	string OpHtmlView(OpHtmlView op_code)
	{
		string res = this.getName("rtl") ~ ".normalizeUIVector((new " ~ this.getName("Vector") ~ "())";
		this.pushOneLine(false);
		op_code.childs.each(
			void (BaseOpCode item) use (res)
			{
				res ~= this.s(".push(" ~ this.translateRun(item) ~ ")");
			}
		);
		this.popOneLine();
		res ~= this.s(")");
		return res;
	}
	
	
	
	
	/** =========================== Preprocessor ========================== */
	
	bool calcPreprocessorCondition(OpPreprocessorCase op_case){
		if (op_case.condition instanceof OpIdentifier){
			if (op_case.condition.value == "JAVASCRIPT" or op_case.condition.value == "ES6"){
				return true;
			}
		}
		return false;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpPreprocessorSwitch(OpPreprocessorSwitch op_code){
		
		if (op_code.childs == null)
			return "";
		
		string res = "";
		for (int i=0; i<op_code.childs.count(); i++){
			OpPreprocessorCase op_case = op_code.childs.item(i);
			if (this.calcPreprocessorCondition(op_case)){
				res ~= this.s(op_case.value);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Reset translator to default settings
	 */
	void resetTranslator(){
		parent();
		this.function_stack = new Vector<FunctionStack>();
		this.ui_struct_class_name = new Vector<string>();
	}
	
	
	
	/**
	 * Translate to language
	 * @param BaseOpCode op_code - Abstract syntax tree
	 * @returns string - The result
	 */
	string translate(BaseOpCode op_code){
		this.resetTranslator();
		string s = '"use strict;"' ~ this.crlf;
		s ~= this.translateRun(op_code);
		return s;
	}
	
}