/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangES6;

use BayrellRtl.Lib.re;
use BayrellRtl.Lib.rs;
use BayrellLang.CommonTranslator;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpAnd;
use BayrellLang.OpCodes.OpAssign;
use BayrellLang.OpCodes.OpAssignDeclare;
use BayrellLang.OpCodes.OpBitAnd;
use BayrellLang.OpCodes.OpBitNot;
use BayrellLang.OpCodes.OpBitOr;
use BayrellLang.OpCodes.OpBitXor;
use BayrellLang.OpCodes.OpBreak;
use BayrellLang.OpCodes.OpCall;
use BayrellLang.OpCodes.OpCallAwait;
use BayrellLang.OpCodes.OpChilds;
use BayrellLang.OpCodes.OpClassDeclare;
use BayrellLang.OpCodes.OpClone;
use BayrellLang.OpCodes.OpComment;
use BayrellLang.OpCodes.OpCompare;
use BayrellLang.OpCodes.OpConcat;
use BayrellLang.OpCodes.OpContinue;
use BayrellLang.OpCodes.OpDelete;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpFor;
use BayrellLang.OpCodes.OpFunctionArrowDeclare;
use BayrellLang.OpCodes.OpFunctionDeclare;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpIf;
use BayrellLang.OpCodes.OpIfElse;
use BayrellLang.OpCodes.OpInterfaceDeclare;
use BayrellLang.OpCodes.OpMap;
use BayrellLang.OpCodes.OpMethod;
use BayrellLang.OpCodes.OpMod;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpNamespace;
use BayrellLang.OpCodes.OpNew;
use BayrellLang.OpCodes.OpNope;
use BayrellLang.OpCodes.OpNot;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpOr;
use BayrellLang.OpCodes.OpPostDec;
use BayrellLang.OpCodes.OpPostInc;
use BayrellLang.OpCodes.OpPow;
use BayrellLang.OpCodes.OpPreDec;
use BayrellLang.OpCodes.OpPreInc;
use BayrellLang.OpCodes.OpPreprocessorCase;
use BayrellLang.OpCodes.OpPreprocessorSwitch;
use BayrellLang.OpCodes.OpReturn;
use BayrellLang.OpCodes.OpShiftLeft;
use BayrellLang.OpCodes.OpShiftRight;
use BayrellLang.OpCodes.OpStatic;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpTemplateIdentifier;
use BayrellLang.OpCodes.OpTernary;
use BayrellLang.OpCodes.OpThrow;
use BayrellLang.OpCodes.OpTryCatch;
use BayrellLang.OpCodes.OpTryCatchChilds;
use BayrellLang.OpCodes.OpUse;
use BayrellLang.OpCodes.OpVector;
use BayrellLang.OpCodes.OpWhile;


export class TranslatorES6 extends CommonTranslator {
	
	Map<string, string> modules = null;
	string current_namespace = "";
	string current_class_name = "";
	string current_function_name = "";
	string current_module_name = "";
	
	
	
	/**
	 * Get name
	 */
	string getName(string name){
		if (name == 'parent'){
			return "super";
		}
		else if (name == 'self'){
			return this.current_namespace ~ "." ~ this.current_class_name;
		}
		else if (this.modules.has(name)){
			return this.modules.item(name);
		}
		
		return name;
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor (ContextInterface context = null){
		parent(context);
		this.modules = new Map<string, string>();
	}
	
	
	
	/**
	 * Escape string
	 */
	string escapeString(string s){
		s = re::replace('\\\\', '\\\\', s);
		s = re::replace('"', '\\\"', s);
		s = re::replace('\n', '\\n', s);
		s = re::replace('\r', '\\r', s);
		s = re::replace('\t', '\\t', s);
		return s;
	}
	
	
	
	/**
	 * Escape string
	 */
	string convertString(string s){
		return '"' ~ this.escapeString(s) ~ '"';
	}
	
	
	
	/**
	 * Comment
	 */
	string OpComment(OpComment op_code){
		return "/*" ~ op_code.value ~ "*/"; 
	}
	
	
	/** =========================== Identifier ============================ */
	
	
	/**
	 * HexNumber
	 */
	string OpHexNumber(OpHexNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * Identifier
	 */
	string OpIdentifier(OpIdentifier op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.getName(op_code.value);
	}
	
	
	
	/**
	 * Number
	 */
	string OpNumber(OpNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * String
	 */
	string OpString(OpString op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.convertString(op_code.value);
	}
	
	
	
	/**
	 * OpStringItem
	 */
	string OpStringItem(OpStringItem op_code){
		return this.translateRun(op_code.value1) ~ '[' ~ this.s(this.translateRun(op_code.value2)) ~ this.s(']');
	}
	
	
	
	/** ======================== Dynamic or static ======================== */
	
	
	
	/**
	 * Dynamic load
	 */
	string OpDynamic(OpDynamic op_code){
		string res = this.o(this.translateRun(op_code.value), this.max_opcode_level) ~ '.' ~ op_code.name;
		this.current_opcode_level = this.max_opcode_level;
		return res;
	}
	
	
	
	/**
	 * Static load
	 */
	string OpStatic(OpStatic op_code){
		return this.translateRun(op_code.value) ~ '.' ~ op_code.name;
	}
	
	
	
	/**
	 * Template Identifier
	 */
	string OpTemplateIdentifier(OpTemplateIdentifier op_code){
		return this.translateRun(op_code.t);
	}
	
	
	
	
	/** ============================ Operations ============================ */
	
	
	/**
	 * ADD
	 */
	string OpAdd(OpAdd op_code){
		return this.op(op_code, '+', 13);
	}
	
	
	
	/**
	 * AND
	 */
	string OpAnd(OpAnd op_code){ 
		return this.op(op_code, '&&', 6);
	}
	
	
	
	/**
	 * Bit AND
	 */
	string OpBitAnd(OpBitAnd op_code){
		return this.op(op_code, '&', 9);
	}
	
	
	
	/**
	 * Bit NOT
	 */
	string OpBitNot(OpBitNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit OR
	 */
	string OpBitOr(OpBitOr op_code){
		return this.op(op_code, '|', 7);
	}
	
	
	
	/**
	 * Bit XOR
	 */
	string OpBitXor(OpBitXor op_code){
		return this.op(op_code, '^', 8);
	}
	
	
	
	/**
	 * Concat strings
	 */
	string OpConcat(OpConcat op_code){
	
		string res = "";
		if ( (op_code.value1 instanceof OpConcat) or (op_code.value1 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value1)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ ".toString(" ~
				this.s(this.translateRun(op_code.value1)) ~
				")"
			;
		}
		
		res ~= this.s('+');
		if ( (op_code.value2 instanceof OpConcat) or (op_code.value2 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value2)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ ".toString(" ~
				this.s(this.translateRun(op_code.value2)) ~
				")"
			;
		}
		
		this.current_opcode_level = 13;
		return res;
	}
	
	
	
	/**
	 * Divide
	 */
	string OpDiv(OpDiv op_code){
		return this.op(op_code, '/', 14);
	}
	
	
	
	/**
	 * Module
	 */
	string OpMod(OpMod op_code){
		return this.op(op_code, '%', 14);
	}
	
	
	
	/**
	 * Multiply
	 */
	string OpMult(OpMult op_code){
		return this.op(op_code, '*', 14);
	}
	
	
	
	/**
	 * New
	 */
	string OpNew(OpNew op_code){
		
		string s = "";
		
		/* Function name */
		s ~= "new " ~ this.translateRun(op_code.value);
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch ~ this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = 19;
		
		return s;
	}
	
	
	
	/**
	 * Not
	 */
	string OpNot(OpNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Or
	 */
	string OpOr(OpOr op_code){
		return this.op(op_code, '||', 5);
	}
	
	
	
	/**
	 * Post decrement
	 */
	string OpPostDec(OpPostDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '--';
		this.current_opcode_level = 17;
		return res;
	}
	
	
	
	/**
	 * Post increment
	 */
	string OpPostInc(OpPostInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '++';
		this.current_opcode_level = 17;
		return res;
	}
	
	
	
	/**
	 * Pow
	 */
	string OpPow(OpPow op_code){
		return this.op(op_code, '**', 15);
	}
	
	
	
	/**
	 * Pre decrement
	 */
	string OpPreDec(OpPreDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '--' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Pre increment
	 */
	string OpPreInc(OpPreInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '++' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit shift left
	 */
	string OpShiftLeft(OpShiftLeft op_code){
		return this.op(op_code, '<<', 12);
	}
	
	
	
	/**
	 * Bit shift right
	 */
	string OpShiftRight(OpShiftRight op_code){
		return this.op(op_code, '>>', 12);
	}
	
	
	
	/**
	 * Sub
	 */
	string OpSub(OpSub op_code){
		return this.op(op_code, '-', 13);
	}
	
	
	
	
	/**
	 * Operator call function
	 */
	string OpCall(OpCall op_code){ 
		
		string s = "";
		this.pushOneLine(true);
		
		/* Function name */
		bool f = true;
		if (op_code.value instanceof OpIdentifier){
			if (op_code.value.value == 'parent' and this.current_function_name != "constructor"){
				s ~= "super." ~ this.current_function_name;
				f = false;
			}
		}
		if (f){
			s ~= this.translateRun(op_code.value);
		}
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch ~ this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		
		/* semicolon */
		this.popOneLine();
		if (not this.is_operation){
			s ~= ";";
		}
		
		this.current_opcode_level = this.max_opcode_level;
		return s;
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpCompare(OpCompare op_code){
		if (op_code.condition == 'implements'){
			return this.getName("rtl") ~ ".implements(" ~ this.translateRun(op_code.value1) ~ ", " ~ this.s(this.translateRun(op_code.value2)) ~ ")";
		}
		
		this.current_opcode_level = 10;
		return this.op(op_code, op_code.condition, 10);
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpTernary(OpTernary op_code){		
		string semicolon = this.is_operation ? "" : ";";
		string res = 
			'(' ~ this.translateRun(op_code.condition) ~ ') ? ' ~
			'(' ~ this.s(this.translateRun(op_code.if_true)) ~ ') : ' ~
			'(' ~ this.s(this.translateRun(op_code.if_false)) ~ ')'
		;
		this.current_opcode_level = 4;
		return res;
	}
	
	
	
	/** ========================== Vector and Map ========================= */
	
	
	/**
	 * Vector
	 */
	string OpVector(OpVector op_code){
		string res = "";
		
		res ~= "(new " ~ this.getName("Vector") ~ "())";
		for (var i=0; i<op_code.values.count(); i++){
			BaseOpCode item = op_code.values.item(i);
			this.current_opcode_level = this.max_opcode_level;
			res ~= this.s(".push(" ~ this.translateRun(item) ~ ")");
		}
		this.current_opcode_level = this.max_opcode_level;
		
		return res;
	}
	
	
	
	/**
	 * Map
	 */
	string OpMap(OpMap op_code){
		string res = "";
		
		Vector<string> keys = op_code.values.keys();
		
		res ~= "(new " ~ this.getName("Map") ~ "())";
		for (var i=0; i<keys.count(); i++){
			string key = keys.item(i);
			BaseOpCode item = op_code.values.item(key);
			this.current_opcode_level = this.max_opcode_level;
			res ~= this.s(".set(" ~ rs::json_encode(key) ~ ", " ~ this.translateRun(item) ~ ")");
		}
		this.current_opcode_level = this.max_opcode_level;
		
		return res;
	}
	
	
	
	/**
	 * Clone
	 */
	string OpMethod(OpMethod op_code){
		return this.translateRun(op_code.value);
	}
	
	
	
	/** ============================ Operators ============================ */
	
	
	/**
	 * Assign
	 */
	string OpAssign(OpAssign op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.ident);
		this.popOneLine();
		
		if (op_code.op_name == "=") res ~= " = ";
		else if (op_code.op_name == "~=") res ~= " += ";
		else if (op_code.op_name == "+=") res ~= " += ";
		else if (op_code.op_name == "-=") res ~= " -= ";
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Assign declare
	 */
	string OpAssignDeclare(OpAssignDeclare op_code){
		
		string res = "";
		bool old_is_operation = this.beginOperation();
		
		if (op_code.value == null){
			this.pushOneLine(true);
			res = "var " ~ op_code.name;
			this.popOneLine();
		}
		else{
			/* one line */
			this.pushOneLine(true);
			res = "var " ~ op_code.name ~ ' = ';
			this.popOneLine();
			
			/* result */
			this.current_opcode_level = 0;
			this.levelInc();
			res ~= this.s(this.translateRun(op_code.value));
			this.levelDec();
		}
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Break
	 */
	string OpBreak(OpBreak op_code){
		return "break;"; 
	}
	
	
	
	/**
	 * Clone
	 */
	string OpClone(OpClone op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* result */
		string s = this.getName("rtl") ~ "._clone(";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= this.s(")");
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return s;
	}
	
	
	
	/**
	 * Continue
	 */
	string OpContinue(OpContinue op_code){
		return "continue;"; 
	}
	
	
	
	/**
	 * Delete
	 */
	string OpDelete(OpDelete op_code){
		return "";
	}
	
	
	
	/**
	 * For
	 */
	string OpFor(OpFor op_code){
		string s = "";
		
		/* Header */
		this.beginOperation();
		s ~= "for (" ~ 
			this.translateRun(op_code.loop_init) ~ "; " ~
			this.translateRun(op_code.loop_condition) ~ "; " ~
			this.translateRun(op_code.loop_inc) ~ "){"
		;
		this.endOperation();
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	/**
	 * If
	 */
	string OpIf(OpIf op_code){
		string s = "";
		
		/* Condition */
		this.beginOperation();
		s ~= "if (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		/* If true */
		this.levelInc();
		for (int i=0; i<op_code.if_true.count(); i++){
			s ~= this.s(this.translateRun(op_code.if_true.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		
		/* If else */
		for (int i=0; i<op_code.if_else.count(); i++){
			OpIfElse if_else = op_code.if_else.item(i);
			
			this.beginOperation();
			string res = "else if (" ~ this.translateRun(if_else.condition) ~ "){";
			this.endOperation();
			s ~= this.s(res);
			
			this.levelInc();
			for (int j=0; j<if_else.if_true.count(); j++){
				s ~= this.s(this.translateRun(if_else.if_true.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		/* If false */
		if (op_code.if_false != null){
			s ~= this.s("else {");
			this.levelInc();
			for (int i=0; i<op_code.if_false.count(); i++){
				s ~= this.s(this.translateRun(op_code.if_false.item(i)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		return s;
	}
	
	
	
	/**
	 * Return
	 */
	string OpReturn(OpReturn op_code){
		this.beginOperation();
		
		/* result */
		string s = "return ";
		this.current_opcode_level = 0;
		this.levelInc();
		s ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		s ~= this.s(";");
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Throw
	 */
	string OpThrow(OpThrow op_code){
		this.beginOperation();
		
		/* result */
		string s = "throw ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Try Catch
	 */
	string OpTryCatch(OpTryCatch op_code){
		string s = "";
		
		s ~= "try{";
		this.levelInc();
		for (int i=0; i<op_code.op_try.count(); i++){
			s ~= this.s(this.translateRun(op_code.op_try.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		
		string is_else = "";
		s ~= "catch(_the_exception){";
		for (int i=0; i<op_code.childs.count(); i++){
			OpTryCatchChilds try_catch = op_code.childs.item(i);
			
			this.beginOperation();
			string tp = this.translateRun(try_catch.op_type);
			string name = this.translateRun(try_catch.op_ident);
			this.endOperation();
			
			if (tp == 'var') tp = 'Error';
			
			/* catch childs */
			this.levelInc();
			s ~= this.s(is_else ~ "if (_the_exception instanceof " ~ tp ~ "){");
			this.levelInc();
			s ~= this.s("var " ~ name ~ " = _the_exception;");
			for (int j=0; j<try_catch.childs.count(); j++){
				s ~= this.s(this.translateRun(try_catch.childs.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
			this.levelDec();
			
			is_else = "else"; 
		}
		s ~= this.s("}");
		
		
		return s;
	}
	
	
	
	/**
	 * While
	 */
	string OpWhile(OpWhile op_code){
		string s = "";
		
		/* Condition */
		this.beginOperation();
		s ~= "while (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	
	/** ======================== Namespace and use ======================== */
	
	
	/**
	 * Namespace
	 */
	string OpNamespace(OpNamespace op_code){
		this.current_namespace = op_code.value;
		Vetor<string> arr = rs::explode(".", this.current_namespace);
		this.current_module_name = arr.item(0);
		this.modules.clear();
		if (this.current_module_name != 'BayrellRtl'){
			this.modules.set("rtl", "BayrellRtl.Lib.rtl");
			this.modules.set("Map", "BayrellRtl.Types.Map");
			this.modules.set("Vector", "BayrellRtl.Types.Vector");
		}
		return "";
	}
	
	
	
	/**
	 * Use
	 */
	string OpUse(OpUse op_code){
		string lib_name = op_code.value;
		Vector<string> arr = rs::explode(".", lib_name);
		string class_name = arr.getLastItem("");
		if (op_code.alias_name != ""){
			this.modules.set(op_code.alias_name, lib_name);
		}
		else if (class_name != ""){
			this.modules.set(class_name, lib_name);
		}
		return "";
	}
	
	
	
	
	/** ============================= Classes ============================= */
	
	
	/**
	 * Function header
	 */
	string OpFunctionDeclareHeader(OpFunctionDeclare op_code){
		
		string res = "";
		string ch = "";
		
		/* Static function */
		if (op_code.isFlag("static")){
			res ~= "static ";
		}
		
		/* Function Header */
		res ~= op_code.name;
		res ~= "(";
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			this.pushOneLine(true);
			res ~= ch ~ variable.name;
			this.popOneLine();
			ch = ", ";
		}
		res ~= ")";
		
		return res;
	}
	
	
	
	/**
	 * Function arrow declare
	 */
	string OpFunctionArrowDeclare(OpFunctionArrowDeclare op_code){
	
		string res = "";
		
		/* Skip if declare function */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Function Header */
		this.current_function_name = op_code.name;
		this.beginOperation();
		res ~= this.OpFunctionDeclareHeader(op_code);
		res ~= "{";
		this.endOperation();
		this.levelInc();
		
		res ~= this.s("return function ");
		res ~= this.OpFunctionDeclare(op_code.return_function);
		
		this.levelDec();
		res ~= this.s("}");
		
		return res;
	}
	
	
	
	/**
	 * Function declare
	 */
	string OpFunctionDeclare(OpFunctionDeclare op_code){
		
		string res = "";
		string s = "";
		
		/* Skip if declare function */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		
		/* Function Header */
		this.current_function_name = op_code.name;
		this.beginOperation();
		res ~= this.OpFunctionDeclareHeader(op_code);
		res ~= "{";
		this.endOperation();
		this.levelInc();
		
		
		/* Default variables */
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			if (variable.value == null)
				continue;
			this.pushOneLine(true);
			s = "if ("~variable.name~" == undefined) "~variable.name~"="~this.translateRun(variable.value)~";";
			this.popOneLine();
			res ~= this.s(s);
		}
		
		/* Childs */
		if (op_code.childs != null){
			for (int i=0; i<op_code.childs.count(); i++){
				res ~= this.s(this.translateRun(op_code.childs.item(i)));
			}
		}
		this.levelDec();
		res ~= this.s("}");
		
		return res;
	}
	
	
	
	
	/**
	 * Class declare header
	 */
	string OpClassDeclareHeader(OpClassDeclare op_code){
		
		string s = "";
		string res = "";
		string name = "";
		string ch = "";
		Vector<string> v = rs::explode(".", this.current_namespace);
		
		for (int i=0; i<v.count(); i++){
			name ~= ch ~ v.item(i);
			s = "if (typeof "~name~" == 'undefined') "~name~" = {};";
			if (i==0) res ~= s;
			else res ~= this.s(s);
			ch = ".";
		}
		
		this.beginOperation();
		s = this.current_namespace ~ "." ~ op_code.class_name ~ " = class";
		if (op_code.class_extends != ""){
			s ~= " extends " ~ this.translateRun(op_code.class_extends);
		}
		s ~= "{";
		this.endOperation();
		res ~= this.s(s);
		this.levelInc();
		
		return res;
	}
	
	
	
	/**
	 * Class declare footer
	 */
	string OpClassDeclareFooter(OpClassDeclare op_code){
		
		string res = "";
		
		/* Static variables */
		for (int i=0; i<op_code.class_variables.count(); i++){
			OpAssignDeclare variable = op_code.class_variables.item(i);
			if (variable.flags != null and variable.flags.p_static == true){
				this.beginOperation();
				string s = this.current_namespace ~ "." ~ op_code.class_name ~ "." ~ variable.name ~ " = " ~
					this.translateRun(variable.value) ~ ";";
				this.endOperation();
				res ~= this.s(s);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Class init functions
	 */
	string OpClassInit(Vector<OpAssignDeclare> class_variables, Vector<string> class_implements,
	string class_extends = ""){
		
		string s = "";
		string res = "";
		bool has_serializable = false;
		bool has_cloneable = false;
		bool has_variables = class_variables != null and class_variables.count() > 0;
		bool has_implements = class_implements != null and class_implements.count() > 0;
		
		if (has_variables){
			for (int i=0; i<class_variables.count(); i++){
				OpAssignDeclare variable = class_variables.item(i);
				if (variable.isFlag("serializable")){
					has_serializable = true;
				}
				if (variable.isFlag("cloneable")){
					has_cloneable = true;
				}
			}
		}
		
		
		if (this.current_module_name != 'BayrellRtl' and this.current_class_name != 'CoreObject'){
			
			/* Init function */
			if (has_variables or has_implements){
				res ~= this.s("_init(){");
				this.levelInc();
				
				/* super init */
				if (class_extends != ""){
					res ~= this.s("super._init();");
				}
				
				/* Output variables */
				if (class_variables != null){
					for (int i=0; i<class_variables.count(); i++){
						OpAssignDeclare variable = class_variables.item(i);
						if (variable.flags != null and variable.flags.p_static == false){
							this.beginOperation();
							s = "this." ~ variable.name ~ " = " ~ this.translateRun(variable.value) ~ ";";
							this.endOperation();
							res ~= this.s(s);
						}
					}
				}
				
				/* Implements */
				if (class_implements != null and class_implements.count() > 0){
					res ~= this.s("if (this.__implements__ == undefined){this.__implements__ = [];}");
					for (int i=0; i<class_implements.count(); i++){
						string name = class_implements.item(i);
						this.beginOperation();
						s = "this.__implements__.push(" ~ this.getName(name) ~ ");";
						this.endOperation();
						res ~= this.s(s);
					}
				}
				
				this.levelDec();
				res ~= this.s("}");
			}
			
			/* If has cloneable variables */
			if (has_cloneable){
				res ~= this.s("assign(obj){");
				this.levelInc();
				res ~= this.s("if (obj instanceof " ~ this.getName(this.current_class_name) ~ "){");
				this.levelInc();
				for (int i=0; i<class_variables.count(); i++){
					OpAssignDeclare variable = class_variables.item(i);
					if (variable.isFlag("cloneable")){
						res ~= this.s("this." ~ variable.name ~ " = " ~
							this.getName("rtl") ~ "._clone(" ~
							"obj." ~ variable.name ~ ");"
						);
					}
				}
				this.levelDec();
				res ~= this.s("}");
				res ~= this.s("super.assign(obj);");
				this.levelDec();
				res ~= this.s("}");
			}
			
			/* If has serializable variables */
			if (has_serializable){
				
				/* assignValue function */
				res ~= this.s("assignValue(variable_name, value){");
				this.levelInc();
				for (int i=0; i<class_variables.count(); i++){
					OpAssignDeclare variable = class_variables.item(i);
					if (variable.isFlag("serializable")){
						string take_value_s = "if (variable_name == " ~ this.convertString(variable.name) ~ ") " ~ 
							"this." ~ variable.name ~ " = value;";
						if (i == 0) res ~= this.s(take_value_s);
						else res ~= this.s("else " ~ take_value_s);
					}
				}
				res ~= this.s("else super.assignValue(variable_name, value);");
				this.levelDec();
				res ~= this.s("}");
				
				
				/* takeValue function */
				res ~= this.s("takeValue(variable_name, default_value){");
				this.levelInc();
				res ~= this.s("if (default_value == undefined) default_value = null;");
				for (int i=0; i<class_variables.count(); i++){
					OpAssignDeclare variable = class_variables.item(i);
					if (variable.isFlag("serializable")){
						string take_value_s = "if (variable_name == " ~ this.convertString(variable.name) ~ ") " ~ 
							"return this." ~ variable.name ~ ";";
						if (i == 0) res ~= this.s(take_value_s);
						else res ~= this.s("else " ~ take_value_s);
					}
				}
				res ~= this.s("return super.takeValue(variable_name, default_value);");
				this.levelDec();
				res ~= this.s("}");		


				/* getVariablesNames function */
				res ~= this.s("getVariablesNames(names){");
				this.levelInc();
				for (int i=0; i<class_variables.count(); i++){
					OpAssignDeclare variable = class_variables.item(i);
					if (variable.isFlag("serializable"))
						res ~= this.s("names.push(" ~ this.convertString(variable.name) ~ ");");
				}
				this.levelDec();
				res ~= this.s("}");
			}
			
		}
		
		return res;
	}
	
	
	
	/**
	 * Class declare
	 */
	string OpClassDeclare(OpClassDeclare op_code){
		string res = "";
		string s = "";
		
		/* Set current class name */
		this.current_class_name = op_code.class_name;
		this.modules.set(this.current_class_name, this.current_namespace ~ "." ~ this.current_class_name);
		
		/* Skip if declare class */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Header */
		res ~= this.OpClassDeclareHeader(op_code);
		res ~= this.OpClassInit(op_code.class_variables, op_code.class_implements, op_code.class_extends);
		
		/* Class functions */
		for (int i=0; i<op_code.childs.count(); i++){
			BaseOpCode op_code2 = op_code.childs.item(i);
			if (op_code2 instanceof OpFunctionArrowDeclare){
				res ~= this.s(this.OpFunctionArrowDeclare(op_code2));
			}
			else if (op_code2 instanceof OpFunctionDeclare){
				res ~= this.s(this.OpFunctionDeclare(op_code2));
			}
			else if (op_code2 instanceof OpPreprocessorSwitch){
				res ~= this.s(this.OpPreprocessorSwitch(op_code2));
			}
			else if (op_code2 instanceof OpComment){
				res ~= this.s(this.OpComment(op_code2));
			}
		}
		
		/* Footer class */
		this.levelDec();
		res ~= this.s("}");
		
		/* Footer */
		res ~= this.OpClassDeclareFooter(op_code);
		
		
		return res;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpInterfaceDeclare(OpInterfaceDeclare op_code){
		return this.OpClassDeclare(op_code);
	}
	
	
	
	/** =========================== Preprocessor ========================== */
	
	bool calcPreprocessorCondition(OpPreprocessorCase op_case){
		if (op_case.condition instanceof OpIdentifier){
			if (op_case.condition.value == "JAVASCRIPT" or op_case.condition.value == "ES6"){
				return true;
			}
		}
		return false;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpPreprocessorSwitch(OpPreprocessorSwitch op_code){
		
		if (op_code.childs == null)
			return "";
		
		string res = "";
		for (int i=0; i<op_code.childs.count(); i++){
			OpPreprocessorCase op_case = op_code.childs.item(i);
			if (this.calcPreprocessorCondition(op_case)){
				res ~= this.s(op_case.value);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Translate to language
	 * @param BaseOpCode op_code - Abstract syntax tree
	 * @returns string - The result
	 */
	string translate(BaseOpCode op_code){
		this.resetTranslator();
		string s = '"use strict;"' ~ this.crlf;
		s ~= this.translateRun(op_code);
		return s;
	}
	
}