/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.BaseObject;
use BayLang.Caret;
use BayLang.CoreToken;
use BayLang.TokenReader;
use BayLang.Exceptions.ParserError;
use BayLang.Exceptions.ParserExpected;
use BayLang.LangES6.ParserES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpInc;
use BayLang.OpCodes.OpMath;
use BayLang.OpCodes.OpMethod;
use BayLang.OpCodes.OpNegative;
use BayLang.OpCodes.OpPipe;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpTernary;


class ParserES6Expression extends BaseObject
{
	ParserES6 parser = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(ParserES6 parser)
	{
		parent();
		this.parser = parser;
	}
	
	
	/**
	 * Read function
	 */
	BaseOpCode readFunction(TokenReader reader)
	{
		/* Save caret */
		Caret save_caret = reader.caret();
		
		/* Read expression */
		if (reader.nextToken() == "(")
		{
			reader.matchToken("(");
			BaseOpCode op_code = this.readExpression(reader);
			reader.matchToken(")");
			return op_code;
		}
		
		/* Try to read function */
		OpCall op_code = this.parser.parser_function.readCallFunction(reader);
		if (op_code) return op_code;
		
		/* Restore reader */
		reader.init(save_caret);
		
		/* Read op_code */
		return this.parser.parser_base.readItem(reader);
	}
	
	
	/**
	 * Read negative
	 */
	BaseOpCode readNegative(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		if (reader.nextToken() == "-")
		{
			reader.readToken();
			BaseOpCode op_code = this.readFunction(reader);
			return new OpMath
			{
				"value1": op_code,
				"math": "!",
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			}
		}
		return this.readFunction(reader);
	}
	
	
	/**
	 * Read bit not
	 */
	BaseOpCode readBitNot(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		
		Collection operations = ["~", "!"];
		if (operations.indexOf(reader.nextToken()) >= 0)
		{
			string op = reader.readToken();
			if (op == "!") op = "not";
			else if (op == "~") op = "bitnot";
			BaseOpCode op_code = this.readNegative(reader);
			return new OpMath
			{
				"value1": op_code,
				"math": op,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			}
		}
		return this.readNegative(reader);
	}
	
	
	/**
	 * Read bit shift
	 */
	BaseOpCode readBitShift(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["<<", ">>"];
		
		/* Read operators */
		BaseOpCode op_code = this.readBitNot(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readBitNot(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read bit and
	 */
	BaseOpCode readBitAnd(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["&"];
		
		/* Read operators */
		BaseOpCode op_code = this.readBitShift(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readBitShift(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read bit or
	 */
	BaseOpCode readBitOr(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["|", "xor"];
		
		/* Read operators */
		BaseOpCode op_code = this.readBitAnd(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readBitAnd(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read factor
	 */
	BaseOpCode readFactor(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["*", "/", "%", "div", "mod"];
		
		/* Read operators */
		BaseOpCode op_code = this.readBitOr(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readBitOr(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read arithmetic
	 */
	BaseOpCode readArithmetic(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["+", "-"];
		
		/* Read operators */
		BaseOpCode op_code = this.readFactor(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readFactor(reader);
			if (
				value instanceof OpCall and math == "+" and
				value.args.count() == 1 and
				value.obj instanceof OpIdentifier and
				value.obj.value == "String"
			)
			{
				math = "~";
				value = value.args.get(0);
			}
			else if (value instanceof OpString and math == "+")
			{
				math = "~";
			}
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read concat
	 */
	BaseOpCode readConcat(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["~"];
		
		/* Read operators */
		BaseOpCode op_code = this.readArithmetic(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readArithmetic(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read compare
	 */
	BaseOpCode readCompare(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		BaseOpCode op_code = this.readConcat(reader);
		Collection operations1 = ["===", "!==", "==", "!=", ">=", "<=", ">", "<"];
		Collection operations2 = ["is", "implements", "instanceof"];
		
		/* Read operators */
		if (operations1.indexOf(reader.nextToken()) >= 0)
		{
			string math = reader.readToken();
			BaseOpCode value = this.readConcat(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		else if (operations2.indexOf(reader.nextToken()) >= 0)
		{
			string math = reader.readToken();
			BaseOpCode value = this.parser.parser_base.readTypeIdentifier(reader, false);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		return op_code;
	}
	
	
	/**
	 * Read and
	 */
	BaseOpCode readAnd(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["and", "&&"];
		
		/* Read operators */
		BaseOpCode op_code = this.readCompare(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readCompare(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read or
	 */
	BaseOpCode readOr(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection operations = ["or", "||"];
		
		/* Read operators */
		BaseOpCode op_code = this.readAnd(reader);
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string math = reader.readToken();
			BaseOpCode value = this.readAnd(reader);
			op_code = new OpMath
			{
				"value1": op_code,
				"value2": value,
				"math": math,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return op_code;
	}
	
	
	/**
	 * Read element
	 */
	BaseOpCode readElement(TokenReader reader)
	{
		/* Try to read function */
		/*
		if (this.parser.parser_function.tryReadFunction(reader, false))
		{
			return this.parser.parser_function.readDeclareFunction(reader, false);
		}
		*/
		return this.readOr(reader);
	}
	
	
	/**
	 * Read ternary operation
	 */
	BaseOpCode readTernary(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		
		/* Detect ternary operation */
		BaseOpCode op_code = this.readElement(reader);
		if (reader.nextToken() != "?") return op_code;
		
		/* Read expression */
		BaseOpCode if_true = this.readElement(reader);
		BaseOpCode if_false = null;
		if (reader.nextToken() == ":")
		{
			if_false = this.readElement(reader);
		}
		
		return new OpTernary
		{
			"condition": op_code,
			"if_true": if_true,
			"if_false": if_false,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read expression
	 */
	BaseOpCode readExpression(TokenReader reader)
	{
		return this.readTernary(reader);
	}
}