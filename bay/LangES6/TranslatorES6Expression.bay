/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.BaseStruct;
use Runtime.re;
use BayLang.SaveOpCode;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpClassOf;
use BayLang.OpCodes.OpClassRef;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpCurry;
use BayLang.OpCodes.OpCurryArg;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpDict;
use BayLang.OpCodes.OpDictPair;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpInc;
use BayLang.OpCodes.OpMath;
use BayLang.OpCodes.OpMethod;
use BayLang.OpCodes.OpNegative;
use BayLang.OpCodes.OpNew;
use BayLang.OpCodes.OpNumber;
use BayLang.OpCodes.OpPipe;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpTernary;
use BayLang.OpCodes.OpTypeConvert;
use BayLang.OpCodes.OpTypeIdentifier;


struct TranslatorES6Expression extends BaseStruct
{
	
	/**
	 * Returns string
	 */
	pure string toString(string s)
	{
		s = re::replace('\\\\', '\\\\', s);
		s = re::replace('"', '\\\"', s);
		s = re::replace('\n', '\\n', s);
		s = re::replace('\r', '\\r', s);
		s = re::replace('\t', '\\t', s);
		return "\"" ~ s ~ "\"";
	}
	
	
	
	/**
	 * To pattern
	 */
	pure string toPattern(TranslatorES6 t, OpTypeIdentifier pattern)
	{
		Collection names = static::findModuleNames(t, pattern.entity_name.names);
		string e = rs::join(".", names);
		Collection a = (pattern.template != null) ? 
			pattern.template.map
			(
				string (OpTypeIdentifier pattern) use (t) => static::toPattern(t, pattern)
			) : null
		;
		string b = (a != null) ? ",\"t\":[" ~ rs::join(",",a) ~ "]" : "";
		return "{\"e\":" ~ static::toString(e) ~ b ~"}";
	}
	
	
	
	/**
	 * Returns string
	 */
	pure string rtlToStr(TranslatorES6 t, string s)
	{
		if (t.use_module_name)
		{
			return "use(\"Runtime.rtl\").toStr("~s~")";
		}
		string module_name = static::findModuleName(t, "rtl");
		return module_name ~ ".toStr("~s~")";
	}
	
	
	
	/**
	 * Find module name
	 */
	pure string findModuleName(TranslatorES6 t, string module_name)
	{
		if (module_name == "Collection") return "Runtime.Collection";
		else if (module_name == "Dict") return "Runtime.Dict";
		else if (module_name == "Map") return "Runtime.Map";
		else if (module_name == "Vector") return "Runtime.Vector";
		else if (module_name == "rs") return "Runtime.rs";
		else if (module_name == "rtl") return "Runtime.rtl";
		else if (module_name == "ArrayInterface") return "";
		else if (t.modules.has(module_name)) return t.modules.item(module_name);
		return module_name;
	}
	
	
	
	/**
	 * Returns module name
	 */
	pure list<TranslatorES6, Collection> findModuleNames(TranslatorES6 t, Collection<string> names)
	{
		if (names.count() > 0)
		{
			string module_name = names.first();
			module_name = static::findModuleName(t, module_name);
			if (module_name != "") names = names.setIm(0, module_name);
		}
		return names;
	}
	
	
	
	/**
	 * Use module name
	 */
	pure string useModuleName(TranslatorES6 t, string module_name)
	{
		module_name = static::findModuleName(t, module_name);
		if (t.use_module_name) return "use(" ~ static::toString(module_name) ~ ")";
		return module_name;
	}
	
	
	
	/**
	 * OpTypeIdentifier
	 */
	pure list<TranslatorES6, string> OpTypeIdentifier(TranslatorES6 t, OpTypeIdentifier op_code)
	{
		Collection<string> names = static::findModuleNames(t, op_code.entity_name.names);
		string s = rs::join(".", names);
		return [t, s];
	}
	
	
	
	/**
	 * OpIdentifier
	 */
	pure list<TranslatorES6, string> OpIdentifier(TranslatorES6 t, OpIdentifier op_code)
	{
		if (op_code.value == "@")
		{
			if (t.enable_context == false) return [t, static::useModuleName(t, "rtl") ~ ".getContext()"];
			else return [t, "ctx"];
		}
		if (op_code.value == "_")
		{
			if (t.enable_context == false) return [t, static::useModuleName(t, "rtl") ~ ".getContext().translate"];
			else return [t, "ctx.translate"];
		}
		if (op_code.value == "log") return [t, "console.log"];
		
		if (t.modules.has(op_code.value) or op_code.kind == OpIdentifier::KIND_SYS_TYPE)
		{
			string module_name = op_code.value;
			string new_module_name = static::useModuleName(t, module_name);
			return [t, new_module_name];
		}
		
		string content = op_code.value;
		return [t, content];
	}
	
	
	
	/**
	 * OpNumber
	 */
	pure list<TranslatorES6, string> OpNumber(TranslatorES6 t, OpNumber op_code)
	{
		string content = op_code.value;
		/*if (op_code.negative)
		{
			content = "-" ~ content;
			t <= opcode_level <= 15;
		}*/
		return [t, content];
	}
	
	
	/**
	 * OpNegative
	 */
	pure list<TranslatorES6, string> OpNegative(TranslatorES6 t, OpNumber op_code)
	{
		list res = static::Expression(t, op_code.value); t = res[0];
		string content = res[1];
		content = "-" ~ content;
		t <= opcode_level <= 15;
		return [t, content];
	}
	
	
	/**
	 * OpString
	 */
	pure list<TranslatorES6, string> OpString(TranslatorES6 t, OpString op_code)
	{
		return [t, static::toString(op_code.value)];
	}
	
	
	
	/**
	 * OpCollection
	 */
	pure list<TranslatorES6, string> OpCollection(TranslatorES6 t, OpCollection op_code)
	{
		string content = "";
		Collection<string> values = op_code.values.map
		(
			string (BaseOpCode op_code) use (t)
			{
				list res = static::Expression(t, op_code); t = res[0]; string s = res[1];
				return s;
			}
		);
		values = values.filter( bool (string s) => s != "" );
		string module_name = static::useModuleName(t, "Vector");
		content = module_name ~ ".from([" ~ rs::join(",", values) ~ "])";
		return [t, content];
	}
	
	
	
	/**
	 * OpDict
	 */
	pure list<TranslatorES6, string> OpDict(TranslatorES6 t, OpDict op_code)
	{
		string content = "";
		Collection<string> values = op_code.values.map
		(
			string (OpDictPair pair, string key) use (t)
			{
				if (pair.condition != null and t.preprocessor_flags[pair.condition.value] != true) return "";
				list res = static::Expression(t, pair.value); t = res[0]; string s = res[1];
				return static::toString(pair.key) ~ ":" ~ s;
			}
		);
		values = values.filter( bool (string s) => s != "" );
		string module_name = static::useModuleName(t, "Map");
		content = module_name ~ ".from({" ~ rs::join(",", values) ~ "})";
		return [t, content];
	}
	
	
	
	/**
	 * Dynamic
	 */
	pure list<TranslatorES6, string> Dynamic(TranslatorES6 t, BaseOpCode op_code, bool is_call = false)
	{
		if (op_code instanceof OpIdentifier)
		{
			return static::OpIdentifier(t, op_code);
		}
		else if (op_code instanceof OpAttr)
		{
			Vector<BaseOpCode> attrs = new Vector();
			OpAttr op_code_item = op_code;
			BaseOpCode op_code_first = op_code;
			string first_item = "";
			string prev_kind = "";
			string s = "";
			bool first_item_complex = false;
			
			while (op_code_first instanceof OpAttr)
			{
				attrs.push(op_code_first);
				op_code_item = op_code_first;
				op_code_first = op_code_first.obj;
			}
			
			attrs = attrs.reverse();
			
			if (op_code_first instanceof OpCall)
			{
				prev_kind = "var";
				list res = static::OpCall(t, op_code_first); t = res[0]; s = res[1];
				first_item_complex = true;
			}
			else if (op_code_first instanceof OpNew)
			{
				prev_kind = "var";
				list res = static::OpNew(t, op_code_first); t = res[0]; s = "(" ~ res[1] ~ ")";
				first_item_complex = true;
			}
			else if (op_code_first instanceof OpCollection)
			{
				prev_kind = "var";
				list res = static::OpCollection(t, op_code_first); t = res[0]; s = res[1];
				first_item_complex = true;
			}
			else if (op_code_first instanceof OpDict)
			{
				prev_kind = "var";
				list res = static::OpDict(t, op_code_first); t = res[0]; s = res[1];
				first_item_complex = true;
			}
			else if (op_code_first instanceof OpIdentifier)
			{
				if (op_code_first.kind == OpIdentifier::KIND_CLASSREF)
				{
					if (op_code_first.value == "static")
					{
						if (not t.is_static_function)
						{
							if (not t.current_class.is_component)
							{
								s = "this.constructor";
							}
							else
							{
								s = "this.$options";
							}
						}
						else
						{
							s = "this";
						}
						prev_kind = "static";
					}
					else if (op_code_first.value == "parent")
					{
						s = static::useModuleName(t, t.current_class_extends_name);
						prev_kind = "parent";
					}
					else if (op_code_first.value == "self")
					{
						prev_kind = "static";
						s = t.current_class_full_name;
					}
					else if (op_code_first.value == "this")
					{
						prev_kind = "var";
						s = "this";
					}
				}
				else if (op_code_first.kind == OpIdentifier::KIND_PIPE)
				{
					prev_kind = "var";
					s = t.pipe_var_name ~ ".val";
				}
				else
				{
					list res = static::OpIdentifier(t, op_code_first); t = res[0]; s = res[1];
					prev_kind = "var";
					if (t.modules.has(op_code_first.value) or op_code_first.kind == OpIdentifier::KIND_SYS_TYPE)
					{
						prev_kind = "static";
					}
				}
			}
			
			first_item = s;
			if (first_item_complex and t.is_pipe)
			{
				list res = t::addSaveOpCode
				(
					t,
					{
						"var_content": first_item,
					}
				);
				t = res[0];
				first_item = res[1];
				s = first_item;
			}
			
			int attrs_sz = attrs.count();
			for (int i=0; i<attrs_sz; i++)
			{
				OpAttr attr = attrs.item(i);
				
				if (attr.kind == OpAttr::KIND_ATTR)
				{
					s ~= "." ~ attr.value.value;
					
					/* Pipe */
					if (t.is_pipe and not is_call)
					{
						if (i == attrs_sz - 1)
						{
							s ~= ".bind(" ~ first_item ~ ")";
						}
						else
						{
							first_item = s;
						}
					}
				}
				else if (attr.kind == OpAttr::KIND_STATIC)
				{
					if (prev_kind == "var")
					{
						s ~= ".constructor." ~ attr.value.value;
						first_item ~= ".constructor";
					}
					else if (prev_kind == "parent")
					{
						if (t.current_function.isStatic()) s ~= "." ~ attr.value.value ~ ".bind(this)";
						else s ~= ".prototype." ~ attr.value.value ~ ".bind(this)";
					}
					else s ~= "." ~ attr.value.value;
					
					/* Pipe */
					if (t.is_pipe and prev_kind != "parent" and not is_call)
					{
						if (i == attrs_sz - 1)
						{
							s ~= ".bind(" ~ first_item ~ ")";
						}
						else
						{
							first_item = s;
						}
					}
					prev_kind = "static";
				}
				else if (attr.kind == OpAttr::KIND_DYNAMIC)
				{
					list res = static::Expression(t, attr.value);
					t = res[0];
					/* s ~= "[" ~ res[1] ~ "]"; */
					s = "Runtime.rtl.attr(ctx, " ~ s ~ ", " ~ res[1] ~ ")";
				}
				else if (attr.kind == OpAttr::KIND_DYNAMIC_ATTRS)
				{
					Vector<BaseOpCode> items = new Vector();
					if (attr.attrs != null)
					{
						for (int j=0; j<attr.attrs.count(); j++)
						{
							list res = static::Expression(t, attr.attrs[j]);
							t = res[0];
							items.push(res[1]);
						}
					}
					s = "Runtime.rtl.attr(ctx, " ~ s ~ ", [" ~ rs::join(", ", items) ~ "])";
				}
			}
			
			return [t, s];
		}
		else if (op_code instanceof OpCurry)
		{
			list res = static::OpCurry(t, op_code); t = res[0]; string content = res[1];
			list res = t::addSaveOpCode
			(
				t,
				{
					"var_content": content,
				}
			);
			t = res[0];
			string var_name = res[1];
			return [t, var_name];
		}
		else if (op_code instanceof OpCall)
		{
			return static::OpCall(t, op_code);
		}
		return [t, ""];
	}
	
	
	
	/**
	 * OpInc
	 */
	pure list<TranslatorES6, string> OpInc(TranslatorES6 t, OpInc op_code)
	{
		string content = "";
		list res = static::Expression(t, op_code.value); t = res[0]; string s = res[1];
		
		if (op_code.kind == OpInc::KIND_PRE_INC) content = "++" ~ s;
		else if (op_code.kind == OpInc::KIND_PRE_DEC) content = "--" ~ s;
		else if (op_code.kind == OpInc::KIND_POST_INC) content = s ~ "++";
		else if (op_code.kind == OpInc::KIND_POST_DEC) content = s ~ "--";
		
		return [t, content];
	}
	
	
	
	/**
	 * OpMath
	 */
	pure list<TranslatorES6, string> OpMath(TranslatorES6 t, OpMath op_code)
	{
		list res = static::Expression(t, op_code.value1); t = res[0];
		int opcode_level1 = res[0].opcode_level;
		string s1 = res[1];
		
		string op = ""; string op_math = op_code.math;
		int opcode_level = 0;
		if (op_code.math == "!") { opcode_level = 16; op = "!"; }
		if (op_code.math == ">>") { opcode_level = 12; op = ">>"; }
		if (op_code.math == "<<") { opcode_level = 12; op = "<<"; }
		if (op_code.math == "&") { opcode_level = 9; op = "&"; }
		if (op_code.math == "xor") { opcode_level = 8; op = "^"; }
		if (op_code.math == "|") { opcode_level = 7; op = "|"; }
		if (op_code.math == "*") { opcode_level = 14; op = "*"; }
		if (op_code.math == "/") { opcode_level = 14; op = "/"; }
		if (op_code.math == "%") { opcode_level = 14; op = "%"; }
		if (op_code.math == "div") { opcode_level = 14; op = "div"; }
		if (op_code.math == "mod") { opcode_level = 14; op = "mod"; }
		if (op_code.math == "+") { opcode_level = 13; op = "+"; }
		if (op_code.math == "-") { opcode_level = 13; op = "-"; }
		if (op_code.math == "~") { opcode_level = 13; op = "+"; }
		if (op_code.math == "!") { opcode_level = 13; op = "!"; }
		if (op_code.math == "===") { opcode_level = 10; op = "==="; }
		if (op_code.math == "!==") { opcode_level = 10; op = "!=="; }
		if (op_code.math == "==") { opcode_level = 10; op = "=="; }
		if (op_code.math == "!=") { opcode_level = 10; op = "!="; }
		if (op_code.math == ">=") { opcode_level = 10; op = ">="; }
		if (op_code.math == "<=") { opcode_level = 10; op = "<="; }
		if (op_code.math == ">") { opcode_level = 10; op = ">"; }
		if (op_code.math == "<") { opcode_level = 10; op = "<"; }
		if (op_code.math == "is") { opcode_level = 10; op = "instanceof"; }
		if (op_code.math == "instanceof") { opcode_level = 10; op = "instanceof"; }
		if (op_code.math == "implements") { opcode_level = 10; op = "implements"; }
		if (op_code.math == "not") { opcode_level = 16; op = "!"; }
		if (op_code.math == "and") { opcode_level = 6; op = "&&"; }
		if (op_code.math == "&&") { opcode_level = 6; op = "&&"; }
		if (op_code.math == "or") { opcode_level = 5; op = "||"; }
		if (op_code.math == "||") { opcode_level = 5; op = "||"; }
		
		string content = "";
		if (op_code.math == "!" or op_code.math == "not")
		{
			content = op ~ t.o(s1, opcode_level1, opcode_level);
		}
		else
		{
			list res = static::Expression(t, op_code.value2); t = res[0];
			int opcode_level2 = res[0].opcode_level;
			string s2 = res[1];
			string op1 = t.o(s1, opcode_level1, opcode_level);
			string op2 = t.o(s2, opcode_level2, opcode_level);
			
			if (op_math == "~")
			{
				content = op1 ~ " " ~ op ~ " " ~ static::rtlToStr(t, op2);
			}
			else if (op_math == "implements")
			{
				string rtl_name = static::findModuleName(t, "rtl");
				content = rtl_name ~ ".is_implements(" ~ op1 ~ ", " ~ op2 ~ ")";
			}
			else
			{
				content = op1 ~ " " ~ op ~ " " ~ op2;
			}
		}
		
		t <= opcode_level <= opcode_level;
		return [t, content];
	}
	
	
	
	/**
	 * OpMethod
	 */
	pure list<TranslatorES6, string> OpMethod(TranslatorES6 t, OpMethod op_code)
	{
		string content = "";
		string val1 = "";
		string val2 = op_code.value2;
		string prev_kind = "";
		
		if (op_code.value1.kind == OpIdentifier::KIND_CLASSREF)
		{
			if (op_code.value1.value == "static")
			{
				val1 = "this" ~ (not t.is_static_function ? ".constructor" : "");
				prev_kind = "static";
			}
			else if (op_code.value1.value == "parent")
			{
				val1 = static::useModuleName(t, t.current_class_extends_name);
				prev_kind = "parent";
			}
			else if (op_code.value1.value == "self")
			{
				prev_kind = "static";
				val1 = t.current_class_full_name;
			}
			else if (op_code.value1.value == "this")
			{
				prev_kind = "var";
				val1 = "this";
			}
		}
		else
		{
			list res = static::OpIdentifier(t, op_code.value1); t = res[0]; val1 = res[1];
			if (op_code.kind == OpMethod::KIND_STATIC)
			{
				val1 ~= ".constructor";
			}
		}
		
		content = val1 ~ "." ~ val2 ~ ".bind(" ~ val1 ~ ")";
		
		t <= opcode_level <= 0;
		return [t, content];
	}
	
	
	
	/**
	 * OpNew
	 */
	pure list<TranslatorES6, string> OpNew(TranslatorES6 t, OpInc op_code)
	{
		string content = "new ";
		list res = static::OpTypeIdentifier(t, op_code.value); t = res[0]; content ~= res[1];
		bool flag = false;
		
		content ~= "(";
		if (t.current_function == null or t.current_function.is_context)
		{
			content ~= "ctx";
			flag = true;
		}
		for (int i=0; i<op_code.args.count(); i++)
		{
			BaseOpCode item = op_code.args.item(i);
			list res = t.expression::Expression(t, item); t = res[0]; string s = res[1];
			content ~= (flag ? ", " : "") ~ s;
			flag = true;
		}
		content ~= ")";
		
		return [t, content];
	}
	
	
	
	/**
	 * OpCurry
	 */
	pure list<TranslatorES6, string> OpCurry(TranslatorES6 t, OpCurry op_code)
	{
		string content = "";
		string s = "";
		
		Collection<OpCurryArg> args = op_code.args
			.filter( bool (BaseOpCode arg) => arg instanceof OpCurryArg )
			.sort(
				int (OpCurryArg arg1, OpCurryArg arg2) =>
					(arg1.pos > arg2.pos) ? 1 : ( (arg1.pos < arg2.pos) ? -1 : 0 )
			)
		;
		
		int args_sz = args.count();
		for (int i=0; i<args_sz; i++)
		{
			OpCurryArg arg = args.item(i);
			if (args_sz - 1 == i)
			{
				content ~= "(ctx, __varg" ~ arg.pos ~ ") => ";
			}
			else
			{
				content ~= "(__ctx" ~ arg.pos ~ ", __varg" ~ arg.pos ~ ") => ";
			}
		}
		
		bool flag = false;
		list res = t.expression::Dynamic(t, op_code.obj, true); t = res[0]; content ~= res[1];
		if (s == "parent")
		{
			content = static::useModuleName(t, t.current_class_extends_name);
			if (t.current_function.name != "constructor")
			{
				if (t.current_function.isStatic()) content ~= "." ~ t.current_function.name;
				else content ~= ".prototype." ~ t.current_function.name;
			}
			content ~= ".call(this, ctx"; flag = true;
		}
		else { content ~= "(ctx"; flag = true; }
		
		for (int i=0; i<op_code.args.count(); i++)
		{
			s = "";
			BaseOpCode item = op_code.args.item(i);
			if (item instanceof OpCurryArg)
			{
				s ~= "__varg" ~ item.pos;
			}
			else
			{
				list res = static::Expression(t, item); t = res[0]; s = res[1];
			}
			content ~= (flag ? ", " : "") ~ s;
			flag = true;
		}
		content ~= ")";
		
		return [t, content];
	}
	
	
	
	/**
	 * OpCall
	 */
	pure list<TranslatorES6, string> OpCall(
		TranslatorES6 t, OpCall op_code
	)
	{
		string s = "";
		bool flag = false;
		list res = t.expression::Dynamic(t, op_code.obj, true); t = res[0]; s = res[1];
		if (s == "parent")
		{
			s = static::useModuleName(t, t.current_class_extends_name);
			if (t.current_function.name != "constructor") 
			{
				if (not t.current_class.is_component)
				{
					if (t.current_function.isStatic()) s ~= "." ~ t.current_function.name;
					else s ~= ".prototype." ~ t.current_function.name;
				}
				else
				{
					if (t.current_function.isStatic()) s ~= "." ~ t.current_function.name;
					else s ~= ".methods." ~ t.current_function.name;
				}
			}
			s ~= ".call(this"; flag = true;
		}
		else s ~= "(";
		
		string content = s;
		
		if (t.enable_context)
		{
			if (op_code.obj instanceof OpIdentifier and op_code.obj.value == "_")
			{
				content ~= (flag ? ", " : "") ~ "ctx";
				flag = true;
			}
			else if ((t.current_function == null or t.current_function.is_context) and op_code.is_context)
			{
				content ~= (flag ? ", " : "") ~ "ctx";
				flag = true;
			}
		}
		/*
		if (op_code.is_html)
		{
			content ~= (flag ? ", " : "") ~
				"component, render_params, render_content";
			flag = true;
		}
		*/
		for (int i=0; i<op_code.args.count(); i++)
		{
			BaseOpCode item = op_code.args.item(i);
			list res = t.expression::Expression(t, item); t = res[0]; string s = res[1];
			content ~= (flag ? ", " : "") ~ s;
			flag = true;
		}
		content ~= ")";
		
		if (
			t.current_function != null and
			t.current_function.isFlag("async") and
			op_code.is_await and t.isAsyncAwait()
		)
		{
			content = "await " ~ content;
		}
		
		return [t, content];
	}
	
	
	
	/**
	 * OpClassOf
	 */
	pure list<TranslatorES6, string> OpClassOf(TranslatorES6 t, OpClassOf op_code)
	{
		Collection<string> names = static::findModuleNames(t, op_code.entity_name.names);
		string s = rs::join(".", names);
		return [t, static::toString(s)];
	}
	
	
	
	/**
	 * OpTernary
	 */
	pure list<TranslatorES6, string> OpTernary(TranslatorES6 t, OpTernary op_code)
	{
		string content = "";
		
		t <= opcode_level <= 100;
		list res = t.expression::Expression(t, op_code.condition); t = res[0]; string condition = res[1];
		list res = t.expression::Expression(t, op_code.if_true); t = res[0]; string if_true = res[1];
		list res = t.expression::Expression(t, op_code.if_false); t = res[0]; string if_false = res[1];
		
		content ~= "(" ~ condition ~ ") ? (" ~ if_true ~ ") : (" ~ if_false ~ ")";
		t <= opcode_level <= 0;
		
		/* OpTernary */
		return [t, content];
	}
	
	
	
	/**
	 * OpPipe
	 */
	pure list<TranslatorES6, string> OpPipe(TranslatorES6 t, OpPipe op_code, bool is_expression = true)
	{
		string content = "";
		string var_name = "";
		string value = "";
		
		/* use Runtime.Monad */
		var monad_name = "Runtime.Monad";
		if (t.use_module_name)
		{
			list res = t::addSaveOpCode
			(
				t,
				{
					"var_content": static::useModuleName(t, "Runtime.Monad"),
				}
			);
			t = res[0];
			monad_name = res[1];
		}
		
		list res = t::incSaveOpCode(t);
		t = res[0]; var_name = res[1];
		t <= pipe_var_name <= var_name;
		
		Vector<OpPipe> items = new Vector();
		BaseOpCode op_code_item = op_code;
		while (op_code_item instanceof OpPipe)
		{
			items.push(op_code_item);
			op_code_item = op_code_item.obj;
		}
		items = items.reverse();
		
		/* First item */
		list res = t.expression::Expression(t, op_code_item); t = res[0]; value = res[1];
		list res = t::addSaveOpCode
		(
			t,
			{
				"content": 
					t.s("var " ~ var_name ~ " = new " ~ monad_name~ "(ctx, " ~ value ~ ");")
				,
			}
		);
		t = res[0];
		
		/* Output items */
		for (int i=0; i<items.count(); i++)
		{
			string s1 = "";
			string s2 = "";
			OpPipe op_item = items.item(i);
			
			if (op_item.kind == OpPipe::KIND_ATTR)
			{
				list res = static::Expression(t, op_item.value); t = res[0]; value = res[1];
				s1 = var_name ~ ".attr(ctx, " ~ value ~ ")";
			}
			else if (op_item.kind == OpPipe::KIND_METHOD)
			{
				string value = op_item.value.obj.value.value;
				
				string args = "";
				bool flag = false;
				for (int j=0; j<op_item.value.args.count(); j++)
				{
					BaseOpCode item = op_item.value.args.item(j);
					list res = t.expression::Expression(t, item); t = res[0]; string s = res[1];
					args ~= (flag ? ", " : "") ~ s;
					flag = true;
				}
				
				if (
					not op_item.is_async or
					not t.enable_async_await or
					not t.current_function.isFlag("async"))
				{
					s1 = var_name ~ ".callMethod(ctx, \"" ~ value ~ "\", [" ~ args ~ "])";
				}
				else
				{
					s1 = "await " ~ var_name ~ ".callMethodAsync(ctx, \"" ~ value ~ "\", [" ~ args ~ "])";
				}
			}
			else if (op_item.kind == OpPipe::KIND_CALL)
			{
				t <= is_pipe <= true;
				
				list res = static::Dynamic(t, op_item.value); t = res[0]; value = res[1];
				
				if (
					not op_item.is_async or
					not t.enable_async_await or
					not t.current_function.isFlag("async"))
				{
					if (op_item.is_monad)
					{
						s1 = var_name ~ ".monad(ctx, " ~ value ~ ")";
					}
					else
					{
						s1 = var_name ~ ".call(ctx, " ~ value ~ ")";
					}
				}
				else
				{
					if (op_item.is_monad)
					{
						s1 = "await " ~ var_name ~ ".monadAsync(ctx, " ~ value ~ ")";
					}
					else
					{
						s1 = "await " ~ var_name ~ ".callAsync(ctx, " ~ value ~ ")";
					}
				}
				
				t <= is_pipe <= false;
			}
			
			if (s1 != "")
			{
				list res = t::addSaveOpCode
				(
					t,
					{
						"content": 
							t.s(var_name ~ " = " ~ s1 ~ ";")
						,
					}
				);
				t = res[0];
			}
			
			if (s2 != "")
			{
				list res = t::addSaveOpCode
				(
					t,
					{
						"content": t.s(s2),
					}
				);
				t = res[0];
			}
		}
		
		return [t, var_name ~ ".value(ctx)"];
	}
	
	
	
	/**
	 * OpTypeConvert
	 */
	pure list<TranslatorES6, string> OpTypeConvert(TranslatorES6 t, OpTypeConvert op_code)
	{
		string content = "";
		list res = static::Expression(t, op_code.value); t = res[0]; string value = res[1];
		content = static::useModuleName(t, "rtl") ~ 
			".to(" ~ value ~ ", " ~ static::toPattern(t, op_code.pattern) ~ ")"
		;
		return [t, content];
	}
	
	
	
	/**
	 * OpDeclareFunction
	 */
	pure list<TranslatorES6, string> OpDeclareFunction
		(TranslatorES6 t, OpDeclareFunction op_code, bool is_arrow = true)
	{
		string content = "";
		string is_async = "";
		if (op_code.isFlag("async") and t.isAsyncAwait()) is_async = "async ";
		
		/* Set function name */
		OpDeclareFunction save_f = t.current_function;
		t <= current_function <= op_code;
		
		list res = t.operator::OpDeclareFunctionArgs(t, op_code); string args = res[1];
		if (is_arrow)
		{
			content ~= is_async ~ "(" ~ args ~ ") =>";
		}
		else
		{
			content ~= is_async ~ "function (" ~ args ~ ")";
		}
		list res = t.operator::OpDeclareFunctionBody(t, op_code);
		content ~= res[1];
		
		/* Restore function */
		t <= current_function <= save_f;
		
		/* OpTernary */
		return [t, content];
	}
	
	
	
	/**
	 * Expression
	 */
	pure list<TranslatorES6, string> Expression(TranslatorES6 t, BaseOpCode op_code)
	{
		string content = "";
		bool save_is_pipe = t.is_pipe;
		t <= opcode_level <= 100;
		t <= is_pipe <= false;
		
		if (op_code instanceof OpIdentifier)
		{
			list res = static::OpIdentifier(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpTypeIdentifier)
		{
			list res = static::OpTypeIdentifier(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpNegative)
		{
			list res = static::OpNegative(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpNumber)
		{
			list res = static::OpNumber(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpString)
		{
			list res = static::OpString(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpCollection)
		{
			list res = static::OpCollection(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpDict)
		{
			list res = static::OpDict(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpInc)
		{
			t <= opcode_level <= 16;
			list res = static::OpInc(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpMath)
		{
			list res = static::OpMath(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpMethod)
		{
			list res = static::OpMethod(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpNew)
		{
			list res = static::OpNew(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpAttr)
		{
			list res = static::Dynamic(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpCall)
		{
			list res = static::OpCall(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpClassOf)
		{
			list res = static::OpClassOf(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpCurry)
		{
			list res = static::OpCurry(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpPipe)
		{
			list res = static::OpPipe(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpTernary)
		{
			list res = static::OpTernary(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpTypeConvert)
		{
			list res = static::OpTypeConvert(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpDeclareFunction)
		{
			list res = static::OpDeclareFunction(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpHtmlItems)
		{
			t <= debug_component <= [];
			t <= is_html <= true;
			list res = t.html::OpHtmlExpression(t, op_code); t = res[0]; content = res[1];
			t <= is_html <= false;
		}
		else if (op_code instanceof OpPreprocessorIfDef)
		{
			list res = t.operator::OpPreprocessorIfDef(t, op_code, OpPreprocessorIfDef::KIND_EXPRESSION);
			t = res[0]; content = res[1];
		}
		
		t <= is_pipe <= save_is_pipe;
		return [t, content];
	}
	
}