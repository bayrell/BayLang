/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.BaseStruct;
use BayLang.SaveOpCode;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAssignStruct;
use BayLang.OpCodes.OpAssignValue;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpBreak;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpContinue;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpDelete;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpIfElse;
use BayLang.OpCodes.OpInc;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpMath;
use BayLang.OpCodes.OpPipe;
use BayLang.OpCodes.OpPreprocessorIfCode;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpPreprocessorSwitch;
use BayLang.OpCodes.OpReturn;
use BayLang.OpCodes.OpSafe;
use BayLang.OpCodes.OpThrow;
use BayLang.OpCodes.OpTryCatch;
use BayLang.OpCodes.OpTryCatchItem;
use BayLang.OpCodes.OpWhile;


struct TranslatorES6Operator extends BaseStruct
{
	/**
	 * Returns true if op_code contains await
	 */
	pure memorize bool isAwait(BaseOpCode op_code)
	{
		if (op_code == null) return false;
		if (op_code instanceof OpAssign)
		{
			if (op_code.kind == OpAssign::KIND_ASSIGN or op_code.kind == OpAssign::KIND_DECLARE)
			{
				for (int i=0; i<op_code.values.count(); i++)
				{
					OpAssignValue item = op_code.values.item(i);
					bool flag = static::isAwait(item.expression);
					if (flag) return true;
				}
			}
			else if (op_code.kind == OpAssign::KIND_STRUCT)
			{
				bool flag = static::isAwait(op_code.expression);
				if (flag) return true;
			}
		}
		else if (op_code instanceof OpAssignStruct)
		{
			bool flag = static::isAwait(op_code.expression);
			if (flag) return true;
		}
		else if (op_code instanceof OpAttr)
		{
			BaseOpCode op_code_next = op_code;
			while (op_code_next instanceof OpAttr)
			{
				op_code_next = op_code_next.obj;
			}
			return static::isAwait(op_code_next);
		}
		else if (op_code instanceof OpCall)
		{
			return op_code.is_await;
		}
		else if (op_code instanceof OpPipe)
		{
			if (op_code.is_async) return true;
			return static::isAwait(op_code.value);
		}
		else if (op_code instanceof OpFor)
		{
			return static::isAwait(op_code.expr2) or static::isAwait(op_code.value);
		}
		else if (op_code instanceof OpIf)
		{
			bool flag = false;
			flag = static::isAwait(op_code.condition); if (flag) return true;
			flag = static::isAwait(op_code.if_true); if (flag) return true;
			flag = static::isAwait(op_code.if_false); if (flag) return true;
			for (int i=0; i<op_code.if_else.count(); i++)
			{
				OpIfElse if_else = op_code.if_else.item(i);
				flag = static::isAwait(if_else.condition); if (flag) return true;
				flag = static::isAwait(if_else.if_true); if (flag) return true;
			}
		}
		else if (op_code instanceof OpItems)
		{
			for (int i=0; i<op_code.items.count(); i++)
			{
				BaseOpCode item = op_code.items.item(i);
				bool flag = static::isAwait(item);
				if (flag) return true;
			}
		}
		else if (op_code instanceof OpMath)
		{
			if (op_code.math == "!" or op_code.math == "not")
			{
				return static::isAwait(op_code.value1);
			}
			else
			{
				return static::isAwait(op_code.value1) or static::isAwait(op_code.value2);
			}
		}
		else if (op_code instanceof OpReturn)
		{
			bool flag = static::isAwait(op_code.expression);
			if (flag) return true;
		}
		else if (op_code instanceof OpTryCatch)
		{
			return static::isAwait(op_code.op_try);
		}
		else if (op_code instanceof OpWhile)
		{
			return static::isAwait(op_code.condition) or static::isAwait(op_code.value);
		}
		return false;
	}
	
	
	/**
	 * OpAssign
	 */
	pure list<TranslatorES6, string> OpAssignStruct(TranslatorES6 t, OpAssignStruct op_code, int pos = 0)
	{
		string content = "";
		string var_name = op_code.var_name;
		list res = t.expression::Expression(t, op_code.expression); t = res[0]; string expr = res[1];
		
		Collection names = op_code.names.map
		(
			string (var item) use (t)
			{
				if (item instanceof BaseOpCode)
				{
					list res = t.expression::Expression(t, item); t = res[0];
					return res[1];
				}
				return t.expression::toString(item);
			}
		);
		
		content = "Runtime.rtl.setAttr(ctx, " ~ var_name ~ ", Runtime.Collection.from([" ~ rs::join(", ", names) ~ "]), " ~ expr ~ ")";
		return [t, content];
	}
	
	
	/**
	 * OpAssign
	 */
	pure list<TranslatorES6, string> OpAssign(TranslatorES6 t, OpAssign op_code, bool flag_indent = true)
	{
		string content = "";
		
		if (op_code.kind == OpAssign::KIND_ASSIGN or op_code.kind == OpAssign::KIND_DECLARE)
		{
			for (int i=0; i<op_code.values.count(); i++)
			{
				OpAssignValue item = op_code.values.item(i);
				
				string s = "";
				string item_expression = "";
				string op = item.op; if (op == "") op = "=";
				
				if (item.expression != null)
				{
					list res = t.expression::Expression(t, item.expression); t = res[0];
					if (op == "~=") item_expression = t.expression::rtlToStr(t, res[1]);
					else item_expression = res[1];
				}
				
				if (item.op_code instanceof OpAttr)
				{
					Vector<string> items = new Vector();
					Vector<string> items2 = new Vector();
					
					BaseOpCode op_code_next = item.op_code;
					while (op_code_next instanceof OpAttr)
					{
						items.push(op_code_next);
						op_code_next = op_code_next.obj;
					}
					
					items = items.reverse();
					list res = t.expression::OpIdentifier(t, op_code_next);
					t = res[0]; string obj_s = res[1];
					
					for (int j=0; j<items.count(); j++)
					{
						OpAttr item_attr = items[j];
						
						if (item_attr.kind == OpAttr::KIND_ATTR)
						{
							obj_s ~= "." ~ item_attr.value.value;
							items2.push( t.expression::toString(item_attr.value.value) );
						}
						else if (item_attr.kind == OpAttr::KIND_DYNAMIC)
						{
							list res = t.expression::Expression(t, item_attr.value); t = res[0];
							obj_s ~= "[" ~ res[1] ~ "]";
							items2.push(res[1]);
						}
						else if (item_attr.kind == OpAttr::KIND_DYNAMIC_ATTRS)
						{
							if (item_attr.attrs != null)
							{
								for (int j=item_attr.attrs.count() - 1; j>=0; j--)
								{
									list res = t.expression::Expression(t, item_attr.attrs[j]); t = res[0];
									obj_s ~= "[" ~ res[1] ~ "]";
									items2.push(res[1]);
								}
							}
						}
					}
					
					if (op == "~=" or op == "+=" or op == "-=")
					{
						
						string op2 = "+";
						if (op == "~=" or op == "+=") op2 = "+";
						else if (op == "-=") op2 = "-";
						
						item_expression =
							"Runtime.rtl.attr(ctx, " ~ obj_s ~ ", [" ~
							rs::join(", ", items2) ~ "]) " ~ op2 ~ " " ~
							item_expression
						;
					}
					
					s = obj_s ~ " = " ~ item_expression;
				}
				else
				{
					if (item.op_code != null and item.op_code.value == "@" and t.enable_context == false)
					{
						s = t.expression::useModuleName(t, "rtl") ~ ".setContext(" ~ item_expression ~ ")";
					}
					else
					{
						if (op_code.kind == OpAssign::KIND_DECLARE)
						{
							if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait()) s = item.var_name;
							else if (t.is_html) s = "let " ~ item.var_name;
							else s = "var " ~ item.var_name;
						}
						else
						{
							list res = t.expression::OpIdentifier(t, item.op_code);
							t = res[0]; s = res[1];
						}
						
						if (item_expression != "")
						{
							if (op == "~=") s ~= " += " ~ item_expression;
							else s ~= " " ~ op ~ " " ~ item_expression;
						}
					}
				}
				
				if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait())
				{
					if (item.expression == null) s = "";
					else if (op_code.kind == OpAssign::KIND_DECLARE) s = s ~ ";";
				}
				else
				{
					s = s ~ ";";
				}
				
				if (s != "")
				{
					content ~= flag_indent ? t.s(s) : s;
				}
				
				if (item.var_name != "" and t.save_vars.indexOf(item.var_name) == -1)
				{
					t <= save_vars <= t.save_vars.pushIm(item.var_name);
				}
			}
		}
		else if (op_code.kind == OpAssign::KIND_STRUCT)
		{
			string s = op_code.var_name ~ " = ";
			list res = static::OpAssignStruct(t, op_code, 0); t = res[0];
			content = t.s(s ~ res[1] ~ ";");
		}
		
		return [t, content];
	}
	
	
	/**
	 * OpDelete
	 */
	pure list<TranslatorES6, string> OpDelete(TranslatorES6 t, OpDelete op_code)
	{
		string content = "";
		return [t, content];
	}
	
	
	/**
	 * OpFor
	 */
	pure list<TranslatorES6, string> OpFor(TranslatorES6 t, OpFor op_code)
	{
		if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait())
		{
			if (static::isAwait(op_code))
			{
				return t.async_await::OpFor(t, op_code);
			}
		}
		
		string content = "";
		string s1 = "";
		string s2 = "";
		string s3 = "";
		
		if (op_code.expr1 instanceof OpAssign)
		{
			list res = static::OpAssign(t, op_code.expr1, false);
			t = res[0]; s1 = res[1];
		}
		else
		{
			list res = t.expression::Expression(t, op_code.expr1); 
			t = res[0]; s1 = res[1];
		}
		
		list res = t.expression::Expression(t, op_code.expr2); t = res[0]; s2 = res[1];
		list res = t.expression::Expression(t, op_code.expr3); t = res[0]; s3 = res[1];
		
		content = t.s("for (" ~ s1 ~ " " ~ s2 ~ "; " ~ s3 ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		list res = static::Operators(t, op_code.value); t = res[0]; content ~= res[1];
		t = t.levelDec();
		content ~= t.s("}");
		
		return [t, content];
	}
	
	
	/**
	 * OpIf
	 */
	pure list<TranslatorES6, string> OpIf(TranslatorES6 t, OpIf op_code)
	{
		if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait())
		{
			if (static::isAwait(op_code))
			{
				return t.async_await::OpIf(t, op_code);
			}
		}
		
		string content = "";
		list res = t.expression::Expression(t, op_code.condition);
		t = res[0]; string s1 = res[1];
		
		content = t.s("if ("~s1~")");
		content ~= t.s("{");
		t = t.levelInc();
		list res = static::Operators(t, op_code.if_true); t = res[0]; content ~= res[1];
		t = t.levelDec();
		content ~= t.s("}");
		
		for (int i=0; i<op_code.if_else.count(); i++)
		{
			OpIfElse if_else = op_code.if_else.item(i);
			list res = t.expression::Expression(t, if_else.condition); 
			t = res[0]; string s2 = res[1];
			content ~= t.s("else if ("~s2~")");
			content ~= t.s("{");
			t = t.levelInc();
			list res = static::Operators(t, if_else.if_true); t = res[0]; content ~= res[1];
			t = t.levelDec();
			content ~= t.s("}");
		}
		
		if (op_code.if_false != null)
		{
			content ~= t.s("else");
			content ~= t.s("{");
			t = t.levelInc();
			list res = static::Operators(t, op_code.if_false); 
			t = res[0]; content ~= res[1];
			t = t.levelDec();
			content ~= t.s("}");
		}
		
		return [t, content];
	}
	
	
	/**
	 * OpReturn
	 */
	pure list<TranslatorES6, string> OpReturn(TranslatorES6 t, OpReturn op_code)
	{
		if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait())
		{
			return t.async_await::OpReturn(t, op_code);
		}
		
		string content = "";
		string s1 = "";
		if (op_code.expression)
		{
			list res = t.expression::Expression(t, op_code.expression); t = res[0]; s1 = res[1];
		}
		
		if (t.current_function.flags != null and t.current_function.flags.isFlag("memorize"))
		{
			string content = t.s("var __memorize_value = " ~ s1 ~ ";");
			content ~= t.s(t.expression::useModuleName(t, "Runtime.rtl") ~ "._memorizeSave(\"" ~ 
					t.current_class_full_name ~ "." ~ t.current_function.name ~
					"\", arguments, __memorize_value);");
			content ~= t.s("return __memorize_value;");
			return [t, content];
		}
		
		if (t.current_function.isFlag("async") and t.isAsyncAwait())
		{
			content ~= t.s("return Promise.resolve(" ~ s1 ~ ");");
		}
		else
		{
			content ~= t.s("return " ~ s1 ~ ";");
		}
		return [t, content];
	}
	
	
	/**
	 * OpThrow
	 */
	pure list<TranslatorES6, string> OpThrow(TranslatorES6 t, OpThrow op_code)
	{
		list res = t.expression::Expression(t, op_code.expression); t = res[0];
		string content = t.s("throw " ~ res[1]);
		return [t, content];
	}
	
	
	/**
	 * OpTryCatch
	 */
	pure list<TranslatorES6, string> OpTryCatch(TranslatorES6 t, OpTryCatch op_code)
	{
		if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait())
		{
			if (static::isAwait(op_code))
			{
				return t.async_await::OpTryCatch(t, op_code);
			}
		}
		
		string content = "";
		
		content ~= t.s("try");
		content ~= t.s("{");
		t = t.levelInc();
		list res = static::Operators(t, op_code.op_try); t = res[0]; content ~= res[1];
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("catch (_ex)");
		content ~= t.s("{");
		t = t.levelInc();
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			string s = ""; string pattern = "";
			OpTryCatchItem item = op_code.items.item(i);
			list res = t.expression::OpTypeIdentifier(t, item.pattern); t = res[0]; pattern ~= res[1];
			
			if (pattern != "var") s = "if (_ex instanceof " ~ pattern ~ ")";
			else s = "if (true)";
			
			s ~= t.s("{");
			t = t.levelInc();
			
			s ~= (s != "") ? t.s("var " ~ item.name ~ " = _ex;") : "var " ~ item.name ~ " = _ex;";
			list res = t.operator::Operators(t, item.value); t = res[0]; s ~= t.s(res[1]);
			
			t = t.levelDec();
			s ~= t.s("}");
			
			if (i != 0) s = "else " ~ s;
			content ~= t.s(s);
		}
		
		content ~= t.s("else");
		content ~= t.s("{");
		t = t.levelInc();
		content ~= t.s("throw _ex;");
		t = t.levelDec();
		content ~= t.s("}");
		t = t.levelDec();
		content ~= t.s("}");
		
		return [t, content];
	}
	
	
	/**
	 * OpWhile
	 */
	pure list<TranslatorES6, string> OpWhile(TranslatorES6 t, OpWhile op_code)
	{
		if (t.current_function.isFlag("async") and t.isEmulateAsyncAwait())
		{
			if (static::isAwait(op_code))
			{
				return t.async_await::OpWhile(t, op_code);
			}
		}
		
		string content = "";
		list res = t.expression::Expression(t, op_code.condition); t = res[0]; string s1 = res[1];
		
		content ~= t.s("while ("~s1~")");
		content ~= t.s("{");
		t = t.levelInc();
		list res = static::Operators(t, op_code.value); t = res[0]; content ~= res[1];
		t = t.levelDec();
		content ~= t.s("}");
		
		return [t, content];
	}
	
	
	/**
	 * OpPreprocessorIfCode
	 */
	pure list<TranslatorES6, string> OpPreprocessorIfCode(TranslatorES6 t, OpPreprocessorIfCode op_code)
	{
		string content = "";
		if (t.preprocessor_flags[op_code.condition.value] == true)
		{
			content = rs::trim(op_code.content);
		}
		return [t, t.s(content)];
	}
	
	
	/**
	 * OpPreprocessorIfDef
	 */
	pure list<TranslatorES6, string> OpPreprocessorIfDef
	(
		TranslatorES6 t, OpPreprocessorIfDef op_code, string kind
	)
	{
		if (not t.preprocessor_flags[op_code.condition.value] == true) return [t, ""];
		
		if (kind == OpPreprocessorIfDef::KIND_OPERATOR)
		{
			return static::Operators(t, op_code.items);
		}
		else if (kind == OpPreprocessorIfDef::KIND_EXPRESSION)
		{
			return t.expression::Expression(t, op_code.items);
		}
		
		string content = "";
		for (int i=0; i<op_code.items.count(); i++)
		{
			BaseOpCode item = op_code.items.item(i);
			if (item instanceof OpComment)
			{
				list res = t.operator::OpComment(t, item);
				t = res[0]; content ~= res[1];
			}
			else if (item instanceof OpDeclareFunction)
			{
				list res = t.program::OpDeclareFunction(t, item);
				t = res[0]; content ~= res[1];
			}
		}
		return [t, content];
	}
	
	
	/**
	 * OpComment
	 */
	pure list<TranslatorES6, string> OpComment(TranslatorES6 t, OpComment op_code)
	{
		string content = t.s("/*" ~ op_code.value ~ "*/");
		return [t, content];
	}
	
	
	/**
	 * OpComments
	 */
	pure list<TranslatorES6, string> OpComments(TranslatorES6 t, Collection<OpComment> comments)
	{
		string content = "";
		for (int i=0; i<comments.count(); i++)
		{
			list res = static::OpComment(t, comments.item(i));
			content ~= res[1];
		}
		return [t, content];
	}
	
	
	/**
	 * OpComments
	 */
	pure list<TranslatorES6, string> AddComments
	(
		TranslatorES6 t, Collection<OpComment> comments, string content
	)
	{
		if (comments and comments.count() > 0)
		{
			list res = static::OpComments(t, comments);
			string s = res[1];
			if (s != "")
			{
				content = s ~ content;
			}
		}
		return [t, content];
	}
	
	
	/**
	 * Operator
	 */
	pure list<TranslatorES6, string> Operator(TranslatorES6 t, BaseOpCode op_code)
	{
		string content = "";
		
		/* Save op codes */
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		
		if (op_code instanceof OpAssign)
		{
			list res = static::OpAssign(t, op_code); t = res[0];
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content = save ~ content;
			content ~= res[1];
			
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			return [t, content];
		}
		else if (op_code instanceof OpAssignStruct)
		{
			list res = static::OpAssignStruct(t, op_code); t = res[0]; string s1 = res[1];
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content = save;
			content ~= t.s(op_code.var_name ~ " = " ~ s1 ~ ";");
			
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			return [t, content];
		}
		else if (op_code instanceof OpBreak)
		{
			content = t.s("break;");
		}
		else if (op_code instanceof OpCall)
		{
			list res = t.expression::OpCall(t, op_code); t = res[0];
			if (res[1] != "") content = t.s(res[1] ~ ";");
		}
		else if (op_code instanceof OpContinue)
		{
			content = t.s("continue;");
		}
		else if (op_code instanceof OpDelete)
		{
			list res = static::OpDelete(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpFor)
		{
			list res = static::OpFor(t, op_code); t = res[0]; content = res[1];
			t <= save_op_code_inc <= save_op_code_inc;
		}
		else if (op_code instanceof OpIf)
		{
			list res = static::OpIf(t, op_code); t = res[0]; content = res[1];
			t <= save_op_code_inc <= save_op_code_inc;
		}
		else if (op_code instanceof OpPipe)
		{
			list res = t.expression::OpPipe(t, op_code, false); t = res[0]; content = t.s(res[1] ~ ";");
		}
		else if (op_code instanceof OpReturn)
		{
			list res = static::OpReturn(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpThrow)
		{
			list res = static::OpThrow(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpTryCatch)
		{
			list res = static::OpTryCatch(t, op_code); t = res[0]; content = res[1];
			t <= save_op_code_inc <= save_op_code_inc;
		}
		else if (op_code instanceof OpWhile)
		{
			list res = static::OpWhile(t, op_code); t = res[0]; content = res[1];
			t <= save_op_code_inc <= save_op_code_inc;
		}
		else if (op_code instanceof OpInc)
		{
			list res = t.expression::OpInc(t, op_code); t = res[0]; content = t.s(res[1] ~ ";");
		}
		else if (op_code instanceof OpPreprocessorIfCode)
		{
			list res = static::OpPreprocessorIfCode(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpPreprocessorIfDef)
		{
			list res = static::OpPreprocessorIfDef(t, op_code, OpPreprocessorIfDef::KIND_OPERATOR);
			t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpPreprocessorSwitch)
		{
			for (int i=0; i<op_code.items.count(); i++)
			{
				list res = static::OpPreprocessorIfCode(t, op_code.items.item(i)); string s = res[1];
				if (s == "") continue;
				content ~= s;
			}
		}
		else if (op_code instanceof OpComment)
		{
			list res = static::OpComment(t, op_code); t = res[0]; content = res[1];
		}
		else if (op_code instanceof OpSafe)
		{
			list res = static::Operators(t, op_code.items); t = res[0]; content = res[1];
		}
		
		/* Output save op code */
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content = save ~ content;
		
		/* Restore save op codes */
		t <= save_op_codes <= save_op_codes;
		/*t <= save_op_code_inc <= save_op_code_inc;*/
		
		return [t, content];
	}
	
	
	/**
	 * Operators
	 */
	pure list<TranslatorES6, string> Operators(TranslatorES6 t, BaseOpCode op_code)
	{
		string content = "";
		
		if (op_code instanceof OpItems)
		{
			for (int i=0; i<op_code.items.count(); i++)
			{
				BaseOpCode item = op_code.items.item(i);
				list res = static::Operator(t, item); t = res[0];
				content ~= res[1];
			}
		}
		else if (op_code instanceof OpHtmlItems)
		{
			string save_html_var_name = t.html_var_name;
			bool save_is_html = t.is_html;
			
			t <= debug_component <= [];
			t <= is_html <= true;
			list res = t.html::OpHtmlItems(t, op_code, save_html_var_name, false);
			t = res[0]; content = res[1];
			t <= is_html <= save_is_html;
		}
		else
		{
			list res = static::Operator(t, op_code); t = res[0];
			content ~= res[1];
		}
		
		return [t, content];
	}
	
	
	/**
	 * OpDeclareFunction Arguments
	 */
	pure list<TranslatorES6, string> OpDeclareFunctionArgs(TranslatorES6 t, OpDeclareFunction f)
	{
		string content = "";
		if (f.args != null)
		{
			bool flag = false;
			if (f.is_context) { content ~= "ctx"; flag = true; }
			/*
			if (f.is_html)
			{
				flag = true;
				content ~= (flag ? ", " : "") ~
					"component, render_params, render_content";
			}
			*/
			for (int i=0; i<f.args.count(i); i++)
			{
				OpDeclareFunctionArg arg = f.args.item(i);
				string name = arg.name;
				content ~= (flag ? ", " : "") ~ name;
				flag = true;
			}
		}
		return [t, content];
	}
	
	
	/**
	 * OpDeclareFunction Body
	 */
	pure list<TranslatorES6, string> OpDeclareFunctionBody(TranslatorES6 t, OpDeclareFunction f)
	{
		TranslatorES6 save_t = t;
		t <= is_pipe <= false;
		t <= is_html <= false;
		
		if (f.isFlag("async") and t.isEmulateAsyncAwait())
		{
			return t.async_await::OpDeclareFunctionBody(t, f);
		}
		
		/* Save op codes */
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		
		string content = "";
		t = t.levelInc();
		
		if (f.args)
		{
			for (int i=0; i<f.args.count(); i++)
			{
				OpDeclareFunctionArg arg = f.args.item(i);
				if (arg.expression == null) continue;
				list res = t.expression::Expression(t, arg.expression); t = res[0]; string s = res[1];
				s = "if (" ~ arg.name ~ " == undefined) " ~ arg.name ~ " = " ~ s ~ ";";
				content ~= t.s(s);
			}
		}
		
		if (f.items)
		{
			list res = t.operator::Operators(t, f.items); t = res[0];
			content ~= res[1];
		}
		else if (f.expression)
		{
			list res = t.expression::Expression(t, f.expression); t = res[0];
			string expr = res[1];
			string s = "";
			if (f.flags != null and f.flags.isFlag("memorize"))
			{
				s = t.s("var __memorize_value = " ~ expr ~ ";");
				s ~= t.s(t.expression::useModuleName(t, "Runtime.rtl") ~ "._memorizeSave(\"" ~ 
						t.current_class_full_name ~ "." ~ f.name ~
						"\", arguments, __memorize_value);");
				s ~= t.s("return __memorize_value;");
			}
			else
			{
				s = t.s("return " ~ expr ~ ";");
			}
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			content ~= s;
		}
		
		if (f.flags != null and f.flags.isFlag("memorize"))
		{
			string s = "";
			s ~= t.s("var __memorize_value = " ~ t.expression::useModuleName(t, "Runtime.rtl") ~
				"._memorizeValue(\"" ~
				t.current_class_full_name ~ "." ~ f.name ~
				"\", arguments);");
			s ~= t.s("if (__memorize_value != " ~ t.expression::useModuleName(t, "Runtime.rtl") ~
				"._memorize_not_found) return __memorize_value;");
			content = s ~ content;
		}
		t = t.levelDec();
		content = t.s("{") ~ content;
		content ~= t.s("}");
		
		/* Restore save op codes */
		t <= save_op_codes <= save_op_codes;
		t <= save_op_code_inc <= save_op_code_inc;
		
		return [save_t, content];		
	}
}