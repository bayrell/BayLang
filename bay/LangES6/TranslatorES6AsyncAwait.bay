/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangES6;

use Runtime.BaseStruct;
use BayLang.SaveOpCode;
use BayLang.LangES6.AsyncAwait;
use BayLang.LangES6.TranslatorES6;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAssignValue;
use BayLang.OpCodes.OpBreak;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpContinue;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpIfElse;
use BayLang.OpCodes.OpPipe;
use BayLang.OpCodes.OpReturn;
use BayLang.OpCodes.OpThrow;
use BayLang.OpCodes.OpTryCatch;
use BayLang.OpCodes.OpTryCatchItem;
use BayLang.OpCodes.OpWhile;


struct TranslatorES6AsyncAwait extends BaseStruct
{
	/*Collection<AsyncAwait> async_stack = null;*/
	Collection<AsyncAwait> async_stack = new Collection<AsyncAwait>();
	Collection<int> pos = [0];
	string async_t = "__async_t";
	string async_var = "__async_var";
	
	
	
	/**
	 * Returns current pos
	 */
	pure string currentPos(TranslatorES6 t)
	{
		return t.expression::toString(rs::join(".", t.async_await.pos));
	}
	
	
	
	/**
	 * Returns current pos
	 */
	pure list<TranslatorES6, string> nextPos(TranslatorES6 t)
	{
		Collection<int> pos = t.async_await.pos;
		t <= async_await <= pos <= pos.setIm(pos.count() - 1, pos.last() + 1);
		string res = t.expression::toString(rs::join(".", t.async_await.pos));
		return [t, res];
	}
	
	
	
	/**
	 * Returns push pos
	 */
	pure list<TranslatorES6, string> pushPos(TranslatorES6 t)
	{
		Collection<int> pos = t.async_await.pos;
		t <= async_await <= pos <= pos.setIm(pos.count() - 1, pos.last() + 1).pushIm(0);
		string res = t.expression::toString(rs::join(".", t.async_await.pos));
		return [t, res];
	}
	
	
	
	/**
	 * Returns inc pos
	 */
	pure list<TranslatorES6, string> levelIncPos(TranslatorES6 t)
	{
		Collection<int> pos = t.async_await.pos;
		t <= async_await <= pos <= pos.setIm(pos.count() - 1, pos.last()).pushIm(0);
		string res = t.expression::toString(rs::join(".", t.async_await.pos));
		return [t, res];
	}
	
	
	
	/**
	 * Returns pop pos
	 */
	pure list<TranslatorES6, string> popPos(TranslatorES6 t)
	{
		Collection<int> pos = t.async_await.pos.removeLastIm();
		t <= async_await <= pos <= pos.setIm(pos.count() - 1, pos.last() + 1);
		string res = t.expression::toString(rs::join(".", t.async_await.pos));
		return [t, res];
	}
	
	
	
	/**
	 * OpCall
	 */
	pure list<TranslatorES6, string> OpCall(TranslatorES6 t, OpCall op_code, bool is_expression = true)
	{
		string s = "";
		bool flag = false;
		
		if (s == "")
		{
			list res = t.expression::Dynamic(t, op_code.obj); t = res[0]; s = res[1];
			if (s == "parent")
			{
				s = t.expression::useModuleName(t, t.current_class_extends_name);
				if (t.current_function.name != "constructor") 
				{
					if (t.current_function.isStatic()) s ~= "." ~ t.current_function.name;
					else s ~= ".prototype." ~ t.current_function.name;
				}
				s ~= ".call(this"; flag = true;
			}
			else s ~= "(";
		}
		
		string content = s;
		if (t.current_function.is_context and op_code.is_context)
		{
			content ~= "ctx";
			flag = true;
		}
		for (int i=0; i<op_code.args.count(); i++)
		{
			BaseOpCode item = op_code.args.item(i);
			list res = t.expression::Expression(t, item); t = res[0]; string s = res[1];
			content ~= (flag ? ", " : "") ~ s;
			flag = true;
		}
		content ~= ")";
		

		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		list res = static::nextPos(t); t = res[0]; string next_pos = res[1];
		string async_t = t.async_await.async_t;
		content = t.s
		(
			"return " ~ async_t ~
			".jump(ctx, " ~ next_pos ~ ")" ~
			".call(ctx, " ~ content ~ "," ~ t.expression::toString(var_name) ~ ");"
		);
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ next_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		
		if (is_expression) return [t, async_t ~ ".getVar(ctx, " ~ t.expression::toString(var_name) ~ ")"];
		return [t, ""];
	}
	
	
	
	/**
	 * OpPipe
	 */
	pure list<TranslatorES6, string> OpPipe(TranslatorES6 t, OpPipe op_code, bool is_expression = true)
	{
		string content = "";
		string var_name = "";
		bool flag = false;
		
		list res = t.expression::Expression(t, op_code.obj); t = res[0]; var_name = res[1];
		if (op_code.kind == OpPipe::KIND_METHOD)
		{
			content = var_name ~ ".constructor." ~ op_code.method_name.value;
		}
		else
		{
			list res = t.expression::OpTypeIdentifier(t, op_code.class_name); t = res[0];
			content = res[1] ~ "." ~ op_code.method_name.value;
		}
		
		bool flag = false;
		content ~= "(";
		if (t.current_function.is_context and op_code.is_context)
		{
			content ~= "ctx";
			flag = true;
		}
		content ~= (flag ? ", " : "") ~ var_name; flag = true;
		for (int i=0; i<op_code.args.count(); i++)
		{
			BaseOpCode item = op_code.args.item(i);
			list res = t.expression::Expression(t, item); t = res[0]; string s1 = res[1];
			content ~= (flag ? ", " : "") ~ s1;
			flag = true;
		}
		content ~= ")";
		
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		list res = static::nextPos(t); t = res[0]; string next_pos = res[1];
		string async_t = t.async_await.async_t;
		content = t.s
		(
			"return " ~ async_t ~
			".jump(ctx, " ~ next_pos ~ ")" ~
			".call(ctx, " ~ content ~ "," ~ t.expression::toString(var_name) ~ ");"
		);
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ next_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		
		if (is_expression) return [t, async_t ~ ".getVar(ctx, " ~ t.expression::toString(var_name) ~ ")"];
		return [t, ""];
	}
	
	
	
	/**
	 * OpFor
	 */
	pure list<TranslatorES6, string> OpFor(TranslatorES6 t, OpFor op_code)
	{
		TranslatorES6 save_t = null;
		string async_t = t.async_await.async_t;
		string async_var = t.async_await.async_var;
		string content = "";
		
		list res = static::pushPos(t); t = res[0]; string start_pos = res[1];
		list res = static::popPos(t); save_t = res[0]; string end_pos = res[1];
		t <= async_await <= async_stack <= t.async_await.async_stack.pushIm
		(
			new AsyncAwait{ "start_pos": start_pos, "end_pos": end_pos }
		);
		
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Start Loop */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		/* Loop Assign */
		if (op_code.expr1 instanceof OpAssign)
		{
			list res = t::saveOpCodeCall(t, rtl::method(t.operator.getClassName(), "OpAssign"), [op_code.expr1]);
			t = res[0]; string save = res[1]; string value = res[2];
			if (save != "") content ~= save;
			content ~= value;
		}
		else
		{
			list res = t::saveOpCodeCall(t, rtl::method(t.expression.getClassName(), "Expression"), [op_code.expr1]);
			t = res[0]; string save = res[1]; string value = res[2];
			if (save != "") content ~= save;
			content ~= value;
		}
		
		/* Loop Expression */
		list res = static::nextPos(t); t = res[0]; string loop_expression = res[1];
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ loop_expression ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Loop Expression */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ loop_expression ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		/* Call condition expression */
		list res = t::saveOpCodeCall(t, rtl::method(t.expression.getClassName(), "Expression"), [op_code.expr2]);
		t = res[0]; string save = res[1]; string value = res[2];
		if (save != "") content ~= save;
		
		/* Loop condition */
		content ~= t.s("var " ~ async_var ~ " = " ~ value ~ ";");
		list res = static::nextPos(t); t = res[0]; string start_loop = res[1];
		content ~= t.s("if (" ~ async_var ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_loop ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ end_pos ~ ");");		
		
		/* Start Loop */
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Loop */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_loop ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		list res = t.expression::Expression(t, op_code.expr3); t = res[0]; content ~= t.s(res[1] ~ ";");
		list res = t.operator::Operators(t, op_code.value); t = res[0]; content ~= res[1];
		
		/* End Loop */
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ loop_expression ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* End Loop */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ end_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		t <= async_await <= async_stack <= t.async_await.async_stack.removeLastIm();
		t <= async_await <= pos <= save_t.async_await.pos;
		
		return [t, content];
	}
	
	
	
	/**
	 * OpIfBlock
	 */
	pure list<TranslatorES6, string> OpIfBlock
	(
		TranslatorES6 t, BaseOpCode condition, BaseOpCode op_code, string end_pos
	)
	{
		string content = "";
		string async_t = t.async_await.async_t;
		string async_var = t.async_await.async_var;
		
		/* Call condition expression */
		list res = t::saveOpCodeCall(t, rtl::method(t.expression.getClassName(), "Expression"), [condition]);
		t = res[0]; string save = res[1]; string value = res[2];
		if (save != "") content ~= save;
		
		list res = static::nextPos(t); t = res[0]; string start_if = res[1];
		list res = static::nextPos(t); t = res[0]; string next_if = res[1];
		
		/* If condition */
		content ~= t.s("var " ~ async_var ~ " = " ~ value ~ ";");
		content ~= t.s("if (" ~ async_var ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_if ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ next_if ~ ");");
		
		/* Start Loop */
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* If true */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_if ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		list res = t.operator::Operators(t, op_code); t = res[0]; content ~= res[1];
		
		/* End if */
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ end_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Next If */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ next_if ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		return [t, content];
	}
	
	
	
	/**
	 * OpIf
	 */
	pure list<TranslatorES6, string> OpIf(TranslatorES6 t, OpIf op_code)
	{
		TranslatorES6 save_t = null;
		string async_t = t.async_await.async_t;
		string async_var = t.async_await.async_var;
		string content = "";
		string if_true_pos = "", if_false_pos = "";
		
		list res = static::pushPos(t); t = res[0]; string start_pos = res[1];
		list res = static::popPos(t); save_t = res[0]; string end_pos = res[1];
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Start if */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		/* If true */
		list res = static::OpIfBlock(t, op_code.condition, op_code.if_true, end_pos);
		t = res[0]; content ~= res[1];
		
		/* If else */
		for (int i=0; i<op_code.if_else.count(); i++)
		{
			OpIfElse if_else = op_code.if_else.item(i);
			list res = static::OpIfBlock(t, if_else.condition, if_else.if_true, end_pos);
			t = res[0]; content ~= res[1];			
		}
		
		/* Else */
		if (op_code.if_false)
		{
			content ~= t.s("/* If false */");
			list res = t.operator::Operators(t, op_code.if_false); t = res[0]; content ~= res[1];
		}
		
		/* End if */
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ end_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* End if */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ end_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		t <= async_await <= pos <= save_t.async_await.pos;
		
		return [t, content];
	}
	
	
	
	/**
	 * OpReturn
	 */
	pure list<TranslatorES6, string> OpReturn(TranslatorES6 t, OpReturn op_code)
	{
		string content = "";
		string s1 = "";
		if (op_code.expression)
		{
			list res = t.expression::Expression(t, op_code.expression); t = res[0]; s1 = res[1];
		}
		else
		{
			s1 = "null";
		}
		
		string async_t = t.async_await.async_t;
		content = t.s("return " ~ async_t ~ ".ret(ctx, " ~ s1 ~ ");");
		return [t, content];
	}
	
	
	
	/**
	 * OpTryCatch
	 */
	pure list<TranslatorES6, string> OpTryCatch(TranslatorES6 t, OpTryCatch op_code)
	{
		TranslatorES6 save_t = null;
		string content = "";
		string async_t = t.async_await.async_t;
		string async_var = t.async_await.async_var;
		
		list res = static::nextPos(t); t = res[0]; string start_pos = res[1];
		list res = static::nextPos(t); save_t = res[0]; string end_pos = res[1];
		t <= async_await <= async_stack <=
			t.async_await.async_stack.pushIm
			(
				new AsyncAwait{ "start_pos": start_pos, "end_pos": end_pos }
			)
		;
		
		/* Start Try Catch */
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Start Try */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		list res = static::levelIncPos(t); t = res[0]; string start_catch = res[1];
		content ~= t.s(async_t ~ " = " ~ async_t ~ ".catch_push(ctx, " ~ start_catch ~ ");");
		
		list res = t.operator::Operators(t, op_code.op_try); t = res[0]; content ~= res[1];
		
		/* Start Catch */
		content ~= t.s("return " ~ async_t ~ ".catch_pop(ctx).jump(ctx, " ~ end_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Start Catch */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_catch ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		content ~= t.s("var _ex = " ~ async_t ~ ".getErr(ctx);");
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			string s = ""; string pattern = "";
			OpTryCatchItem item = op_code.items.item(i);
			list res = t.expression::OpTypeIdentifier(t, item.pattern); t = res[0]; pattern ~= res[1];
			
			if (pattern != "var") s = "if (_ex instanceof " ~ pattern ~ ")";
			else s = "if (true)";
			
			s ~= t.s("{");
			t = t.levelInc();
			
			s ~= (s != "") ? t.s("var " ~ item.name ~ " = _ex;") : "var " ~ item.name ~ " = _ex;";
			list res = t.operator::Operators(t, item.value); t = res[0]; s ~= res[1];
			
			t = t.levelDec();
			s ~= t.s("}");
			
			if (i != 0) s = "else " ~ s;
			content ~= t.s(s);
		}
		
		content ~= t.s("else");
		content ~= t.s("{");
		t = t.levelInc();
		content ~= t.s("throw _ex;");
		t = t.levelDec();
		content ~= t.s("}");
		
		/* End Try Catch */
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ end_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* End Catch */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ end_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		
		t <= async_await <= async_stack <= t.async_await.async_stack.removeLastIm();
		t <= async_await <= pos <= save_t.async_await.pos;
		
		return [t, content];
	}
	
	
	
	/**
	 * OpWhile
	 */
	pure list<TranslatorES6, string> OpWhile(TranslatorES6 t, OpWhile op_code)
	{
		TranslatorES6 save_t = null;
		string async_t = t.async_await.async_t;
		string async_var = t.async_await.async_var;
		string content = "";
		
		list res = static::pushPos(t); t = res[0]; string start_pos = res[1];
		list res = static::popPos(t); save_t = res[0]; string end_pos = res[1];
		t <= async_await <= async_stack <=
			t.async_await.async_stack.pushIm
			(
				new AsyncAwait{ "start_pos": start_pos, "end_pos": end_pos }
			)
		;
		
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Start while */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		/* Call condition expression */
		list res = t::saveOpCodeCall(t, rtl::method(t.expression.getClassName(), "Expression"), [op_code.condition]);
		t = res[0]; string save = res[1]; string value = res[2];
		if (save != "") content ~= save;
		
		/* Loop condition */
		content ~= t.s("var " ~ async_var ~ " = " ~ value ~ ";");
		list res = static::nextPos(t); t = res[0]; string start_loop = res[1];
		content ~= t.s("if (" ~ async_var ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_loop ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ end_pos ~ ");");
		
		/* Start Loop */
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* Loop while */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ start_loop ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		list res = t.operator::Operators(t, op_code.value); t = res[0]; content ~= res[1];
		
		/* End Loop */
		content ~= t.s("return " ~ async_t ~ ".jump(ctx, " ~ start_pos ~ ");");
		t = t.levelDec();
		content ~= t.s("}");
		content ~= t.s("/* End while */");
		content ~= t.s("else if (" ~ async_t ~ ".pos(ctx) == " ~ end_pos ~ ")");
		content ~= t.s("{");
		t = t.levelInc();
		
		t <= async_await <= async_stack <= t.async_await.async_stack.removeLastIm();
		t <= async_await <= pos <= save_t.async_await.pos;
		
		return [t, content];
	}
	
	
	
	/**
	 * OpDeclareFunction Body
	 */
	pure list<TranslatorES6, string> OpDeclareFunctionBody(TranslatorES6 t, OpDeclareFunction f)
	{
		TranslatorES6 save_t = t;
		
		/* Save op codes */
		Collection<string> save_vars = t.save_vars;
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		t = t::clearSaveOpCode(t);
		
		string async_t = t.async_await.async_t;
		t = t.levelInc();
		string s1 = t.s("return (" ~ async_t ~ ") =>");
		s1 ~= t.s("{");
		t = t.levelInc();
		s1 ~= t.s("if (" ~ async_t ~ ".pos(ctx) == " ~ static::currentPos(t) ~ ")");
		s1 ~= t.s("{");
		t = t.levelInc();
		
		if (f.items)
		{
			list res = t.operator::Operators(t, f.items); t = res[0];
			s1 ~= res[1];
		}
		else if (f.expression)
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			int save_op_code_inc = t.save_op_code_inc;
			
			list res = t.expression::Expression(t, f.expression); t = res[0];
			string expr = res[1];
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") s1 ~= save;
			
			/* Restore save op codes */
			t <= save_op_codes <= save_op_codes;
			t <= save_op_code_inc <= save_op_code_inc;
			
			s1 ~= t.s("return " ~ async_t ~ ".ret(ctx, " ~ expr ~ ");");
		}
		
		t = t.levelDec();
		s1 ~= t.s("}");
		s1 ~= t.s("return " ~ async_t ~ ".ret_void(ctx);");
		t = t.levelDec();
		s1 ~= t.s("};");
		t = t.levelDec();
		
		/* Content */
		string content = "";
		content = t.s("{");
		t = t.levelInc();
		if (t.save_vars.count() > 0)
		{
			content ~= t.s("var " ~ rs::join(",", t.save_vars) ~ ";");
		}
		content ~= s1;
		t = t.levelDec();
		content ~= t.s("}");
		
		/* Restore save op codes */
		t <= save_vars <= save_vars;
		t <= save_op_codes <= save_op_codes;
		t <= save_op_code_inc <= save_op_code_inc;
		
		return [save_t, content];		
	}
	
}