/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.Compiler;

use Runtime.fs;
use Runtime.re;
use Runtime.BaseObject;
use Runtime.Exceptions.RuntimeException;
use Bayrell.Lang.Compiler.Module;


class SettingsProvider extends BaseObject
{
	string project_path = "";
	string project_json_path = "";
	Dict config = {};
	Dict<Module> modules = {};
	
	
	/**
     * Read settings from file
     */
    async void reload()
    {
		string file_name = this.project_json_path;
        bool is_file = await fs::isFile(file_name);
		if (!is_file)
		{
			throw new RuntimeException("File '" + file_name + "' does not exists");
		}
		
		string file_content = await fs::readFile(file_name);
		this.config = rtl::json_decode(file_content);
		this.project_path = rs::dirname(file_name);
		this.modules = {};
		
		/* Load modules */
		await this.readModules(this.project_path, this.config);
    }
	
	
	/**
	 * Returns modules from config
	 */
	async void readModules(string config_path, Dict config)
	{
		Collection modules_info = config["modules"] |> default Collection [];
		for (int i = 0; i<modules_info.count(); i++)
		{
			Dict module_info = modules_info[i] |> default Dict {};
			string module_src = module_info["src"] |> default string "";
			string module_type = module_info["type"] |> default string "";
			
			if (module_type == "module")
			{
				string module_path = fs::join([ config_path, module_src ]);
				Module module = await this.readModule(module_path);
			}
			else if (module_type == "folder")
			{
				string folder_path = fs::join([ config_path, module_src ]);
				Collection<Module> folder_modules =
					await this.readModulesFromFolder(folder_path)
				;
			}
		}
	}
	
	
	/**
	 * Read module from folder
	 */
	async Module readModule(string module_path)
	{
		string module_json_path = fs::join([ module_path, "module.json" ]);
		bool is_file = await fs::isFile(module_json_path);
		if (!is_file)
			return null;
		
		string module_json_content = await fs::readFile(module_json_path);
		string module_json = rtl::json_decode(module_json_content);
		if (!module_json)
			return null;
		
		string module_name = module_json["name"] |> default string "";
		if (module_name == "")
			return null;
		
		/* Create module */
		Module module = new Module
		{
			"name": module_name,
			"config": module_json,
			"path": module_path,
		};
		
		/* Read submodules */
		await this.readModules(module_path, module_json);
		
		/* Add module */
		if (module and not this.modules.has(module_name))
		{
			this.modules.setValue(module_name, module);
		}
		
		return module;
	}
	
	
	/**
	 * Read modules from folder
	 */
	async void readModulesFromFolder(string folder_path)
	{
		Collection<string> file_names = await fs::listDir(folder_path);
		for (int i=0; i<file_names.count(); i++)
		{
			string file_name = file_names[i];
			string module_path = fs::join([ folder_path, file_name ]);
			await this.readModule(module_path);
		}
	}
	
	
	/**
	 * Find module by module name
	 */
	Module findModuleByFileName(string file_name)
	{
		Module res = null;
		int module_path_sz = -1;
		Collection<string> module_names = this.modules.keys();
		for (int i=0; i<module_names.count(); i++)
		{
			string module_name = module_names[i];
			Module module = this.modules[module_name];
			if (rs::indexOf(file_name, module.path) == 0)
			{
				int sz = rs::strlen(module.path);
				if (module_path_sz < sz)
				{
					module_path_sz = sz;
					res = module;
				}
			}
		}
		
		return res;
	}
	
	
	/**
	 * Resolve source file.
	 * Returns file_name, ext_name and module by file
	 */
	async var resolveSourceFile(string file_name)
	{
		if (not await fs::isFile(file_name))
			return null;
		
		Module module = this.findModuleByFileName(file_name);
		if (!module)
			return null;
		
		string module_path = module.getModulePath();
		string module_src_path = module.getSourcePath();
		if (rs::indexOf(file_name, module_src_path) != 0)
		{
			if (rs::indexOf(file_name, module_path) == 0)
			{
				Dict d = {
					"file": rs::substr(file_name, rs::strlen(module_path)),
					"module": module,
					"success": false,
				};
				return d;
			}
			return null;
		}
		
		string module_file_name = rs::substr(file_name, rs::strlen(module_src_path));
		module_file_name = fs::removeFirstSlash(module_file_name);
		
		string module_ext_name = rs::extname(module_file_name);
		
		Dict d = {
			"file": rs::substr(file_name, rs::strlen(module_path)),
			"file_name": module_file_name,
			"ext_name": module_ext_name,
			"module": module,
			"success": false,
		};
		
		if (module.checkExclude(module_file_name))
		{
			return d;
		}
		
		d <= success <= module.checkAllow(module_file_name);
		
		return d;
	}
}