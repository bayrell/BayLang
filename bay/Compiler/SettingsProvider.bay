/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Compiler;

use Runtime.fs;
use Runtime.io;
use Runtime.re;
use Runtime.lib;
use Runtime.BaseProvider;
use Runtime.Exceptions.RuntimeException;
use BayLang.Compiler.Module;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.LangNode.TranslatorNode;
use BayLang.LangPHP.TranslatorPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.CoreTranslator;
use BayLang.LangUtils;


class SettingsProvider extends BaseProvider
{
	string project_path = "";
	string project_json_path = "";
	Dict config = {};
	Dict<Module> modules = {};
	
	
	/**
	 * Returns modules
	 */
	Collection getModules() => this.modules;
	
	
	/**
	 * Start
	 */
	async void start()
	{
		this.project_json_path = fs::join([ @.base_path, "project.json" ]);
		await this.reload();
	}
	
	
	/**
	 * Check provider
	 */
	async void check()
	{
		string file_name = this.project_json_path;
		bool is_file = await fs::isFile(file_name);
		if (!is_file)
		{
			throw new RuntimeException("File '" + file_name + "' does not exists");
		}
		if (not this.config)
		{
			throw new RuntimeException("File '" + file_name + "' contains error ");
		}
	}
	
	
	/**
	 * Read settings from file
	 */
	async void reload()
	{
		string file_name = this.project_json_path;
		bool is_file = await fs::isFile(file_name);
		if (not is_file)
		{
			return;
		}
		
		string file_content = await fs::readFile(file_name);
		
		this.config = rtl::json_decode(file_content);
		this.project_path = rs::dirname(file_name);
		this.modules = {};
		
		/* Load modules */
		await this.readModules(this.project_path, this.config);
	}
	
	
	/**
	 * Returns modules from config
	 */
	async void readModules(string config_path, Dict config)
	{
		if (not config) return;
		if (not config.has("modules")) return;
		
		Collection modules_info = config["modules"] |> default Collection [];
		for (int i = 0; i<modules_info.count(); i++)
		{
			Dict module_info = modules_info[i] |> default Dict {};
			string module_src = module_info["src"] |> default string "";
			string module_type = module_info["type"] |> default string "";
			
			if (module_type == "module")
			{
				string module_path = fs::join([ config_path, module_src ]);
				Module module = await this.readModule(module_path);
			}
			else if (module_type == "folder")
			{
				string folder_path = fs::join([ config_path, module_src ]);
				Collection<Module> folder_modules =
					await this.readModulesFromFolder(folder_path)
				;
			}
		}
	}
	
	
	/**
	 * Read modules from folder
	 */
	async void readModulesFromFolder(string folder_path)
	{
		Collection<string> file_names = await fs::listDir(folder_path);
		for (int i=0; i<file_names.count(); i++)
		{
			string file_name = file_names[i];
			string module_path = fs::join([ folder_path, file_name ]);
			await this.readModule(module_path);
		}
	}
	
	
	/**
	 * Read module from folder
	 */
	async Module readModule(string module_path)
	{
		string module_json_path = fs::join([ module_path, "module.json" ]);
		bool is_file = await fs::isFile(module_json_path);
		if (!is_file)
			return null;
		
		string module_json_content = await fs::readFile(module_json_path);
		string module_json = rtl::json_decode(module_json_content);
		if (!module_json)
			return null;
		
		string module_name = module_json["name"] |> default string "";
		if (module_name == "")
			return null;
		
		/* Create module */
		Module module = new Module
		{
			"name": module_name,
			"config": module_json,
			"path": module_path,
		};
		
		/* Read submodules */
		await this.readModules(module_path, module_json);
		
		/* Add module */
		if (module and not this.modules.has(module_name))
		{
			this.modules.set(module_name, module);
		}
		
		return module;
	}
	
	
	/**
	 * Find module by file name
	 */
	Module findModuleByFileName(string file_name)
	{
		Module res = null;
		int module_path_sz = -1;
		Collection<string> module_names = this.modules.keys();
		for (int i=0; i<module_names.count(); i++)
		{
			string module_name = module_names[i];
			Module module = this.modules[module_name];
			if (rs::indexOf(file_name, module.path) == 0)
			{
				int sz = rs::strlen(module.path);
				if (module_path_sz < sz)
				{
					module_path_sz = sz;
					res = module;
				}
			}
		}
		return res;
	}
	
	
	/**
	 * Resolve source file.
	 * Find module, file_name by file
	 */
	async var resolveSourceFile(string file_path)
	{
		if (not await fs::isFile(file_path))
			return null;
		
		Module module = this.findModuleByFileName(file_path);
		if (!module)
			return null;
		
		string module_path = module.getModulePath();
		if (rs::indexOf(file_path, module_path) != 0)
		{
			return null;
		}
		
		string module_ext_name = rs::extname(file_path);
		
		Map d = {
			"file_path": file_path,
			"file_name": rs::substr(file_path, rs::strlen(module_path)),
			"module": module,
			"src_file_name": null,
			"ext_name": module_ext_name,
			"success": false,
		};
		
		string module_src_path = module.getSourcePath();
		if (rs::indexOf(file_path, module_src_path) != 0)
		{
			return d;
		}
		
		string src_file_name = rs::substr(file_path, rs::strlen(module_src_path));
		src_file_name = rs::removeFirstSlash(src_file_name);
		d.set("src_file_name", src_file_name);
		
		if (module.checkExclude(src_file_name))
		{
			return d;
		}
		
		d.set("success", module.checkAllow(src_file_name));
		
		return d;
	}
	
	
	/**
	 * Compile file to lang
	 */
	async void compileFile(string file_path, string lang, int log_level = 0)
	{
		Dict file_info = await this.resolveSourceFile(file_path);
		
		if (not file_info["success"])
			return file_info;
		
		if (log_level & 2 == 2)
		{
			io::print(file_path);
		}
		else if (log_level & 1 == 1)
		{
			io::print( file_info["src_file_name"] );
		}
		
		string ext_name = file_info["ext_name"];
		Map container = {
			"op_code": null,
			"success": false,
			"content": "",
			"result": "",
			"lang": "",
		};
		
		/* Set content */
		string content = await fs::readFile(file_path);
		container.set("content", content);
		
		if (ext_name == "bay")
		{
			ParserBay parser = new ParserBay();
			BaseOpCode op_code = LangUtils::parse(parser, content);
			container.set("op_code", op_code);
		}
		
		fn is_lang = bool (string ext_name, string lang)
		{
			/* ES6 */
			if (ext_name == "es6" and lang == "es6") return true;
			if (ext_name == "js" and lang == "es6") return true;
			
			/* NodeJS */
			if (ext_name == "node" and lang == "nodejs") return true;
			if (ext_name == "nodejs" and lang == "nodejs") return true;
			if (ext_name == "js" and lang == "nodejs") return true;
			
			/* PHP */
			if (ext_name == "php" and lang == "php") return true;
			
			return false;
		}
		
		fn save_file = async void (string file_info, string container)
			use (log_level)
		{
			string src_file_name = file_info["src_file_name"];
			Module module = file_info["module"];
			
			string dest_path = module.resolveDestFile(
				this.project_path,
				src_file_name,
				container.get("lang")
			);
			
			if (dest_path == "") return false;
			
			/* Create directory if does not exists */
			string dir_name = rs::dirname( dest_path );
			if (not await fs::isDir(dir_name))
			{
				await fs::mkdir(dir_name);
			}
			
			/* Save file */
			await fs::saveFile(dest_path, container["result"]);
			
			if (log_level & 2 == 2)
				io::print("=> " ~ dest_path);
			
			return true;
		};
		
		Collection<string> languages = [];
		
		if (lang == "")
		{
			languages = this.config["languages"] |> default Collection [];
		}
		else
		{
			languages = [ lang ];
		}
		
		for (int i=0; i<languages.count(); i++)
		{
			string lang_name = languages[i] |> default string "";
			BaseOpCode op_code = container["op_code"];
			
			container.set("success", false);
			container.set("lang", lang_name);
			container.set("result", "");
			
			if (ext_name == "bay")
			{
				if (op_code)
				{
					CoreTranslator t = LangUtils::createTranslator(lang_name);
					if (t)
					{
						container.set("result", LangUtils::translate(t, op_code));
						container.set("success", true);
					}
				}
			}
			else if ( is_lang(ext_name, lang_name) )
			{
				container.set("result", container.get("content"));
				container.set("success", true);
			}
			
			if (container.get("success"))
			{
				await save_file(file_info, container, lang_name);
			}
		}
		
		if (log_level & 2 == 2)
			io::print("Ok");
		
		return file_info;
	}
	
	
	/**
	 * Compile module to lang
	 */
	async bool compileModule(string module_name, string lang = "")
	{
		if (not this.modules.has(module_name))
		{
			io::print_error("Module " + module_name + " not found");
			return false;
		}
		
		/* Get module */
		Module module = this.modules.get(module_name);
		string module_src_path = module.getSourcePath();
		bool is_success = true;
		
		/* Read files */
		Collection<string> files = await fs::listDirRecursive(module_src_path);
		for (int i=0; i<files.count(); i++)
		{
			string file_name = files[i];
			string file_path = fs::join([ module_src_path, file_name ]);
			
			if (module.checkExclude(file_name))
				continue;
			
			if ( not await fs::isFile(file_path) )
				continue;
			
			try
			{
				await this.compileFile(file_path, lang, 1);
			}
			catch (ParserUnknownError e)
			{
				io::print_error(e.toString());
				is_success = false;
			}
			catch (var e)
			{
				io::print_error(e);
				is_success = false;
			}
		}
		
		if (is_success)
		{
			await this.updateModule(module_name);
		}
		
		return is_success;
	}
	
	
	/**
	 * Update module
	 */
	async void updateModule(string module_name)
	{
		Collection languages = this.config["languages"] |> default Collection [];
		if (languages.indexOf("es6") == -1)
		{
			return -1;
		}
		
		if (not this.modules.has(module_name))
		{
			io::print_error("Module " + module_name + " not found");
			return -1;
		}
		
		/* Make assets by module name */
		Collection assets = this.getAssetsByModule(module_name);
		for (int i=0; i<assets.count(); i++)
		{
			await this.makeAsset(assets.get(i));
		}
		
		return 0;
	}
	
	
	/**
	 * Get assets by module name
	 */
	Collection getAssetsByModule(string module_name)
	{
		Module module = this.modules[module_name];
		
		/* Find assets by module */
		Collection assets = this.config["assets"] |> default Collection [];
		assets = assets.filter(
			bool (Dict asset) use (module)
			{
				if (not asset.has("modules")) return false;
				
				/* Check module in modules names */
				Collection modules = asset["modules"] |> default Collection [];
				if (not module.inModuleList(modules)) return false;
				
				return true;
			}
		);
		
		return assets;
	}
	
	
	/**
	 * Returns modules by group name
	 */
	Collection getGroupModules(string group_name)
	{
		/* Get modules */
		Collection modules = this.modules.transition(
			Module (Module module, string module_name) => module
		);
		
		/* Filter modules by group */
		modules = modules.filter(
			bool (Module module) use (group_name) =>
				module.hasGroup(group_name)
		);
		
		/* Get names */
		modules = modules.map(lib::attr("name"));
		
		/* Return modules */
		return modules;
	}
	
	
	/**
	 * Sort modules
	 */
	Collection<string> sortRequiredModules(Collection<string> modules)
	{
		Vector result = [];
		
		fn add_module;
		add_module = void (string module_name) use (modules, result, add_module)
		{
			if (modules.indexOf(module_name) == -1) return;
			
			/* Add required modules */
			Module module = this.modules.get(module_name);
			if (module.config.has("require"))
			{
				Collection required_modules = module.config.get("require");
				for (int i=0; i<required_modules.count(); i++)
				{
					add_module(required_modules.get(i));
				}
			}
			
			/* Add module if not exists */
			if (result.indexOf(module_name) == -1)
			{
				result.push(module_name);
			}
		};
		
		for (int i=0; i<modules.count(); i++)
		{
			add_module(modules.get(i));
		}
		
		return result;
	}
	
	
	/**
	 * Returns assets modules
	 */
	Collection<string> getAssetModules(Dict asset)
	{
		Collection modules = asset["modules"] |> default Collection [];
		
		/* Extends modules */
		Vector new_modules = [];
		modules.each(
			void (string module_name) use (new_modules)
			{
				if (rs::substr(module_name, 0, 1) == "@")
				{
					/* Get group modules by name */
					Collection group_modules = this.getGroupModules(module_name);
					
					/* Append group modules */
					new_modules.appendItems(group_modules);
				}
				else
				{
					new_modules.push(module_name);
				}
			}
		);
		modules = new_modules.removeDuplicates();
		
		/* Sort modules by requires */
		modules = this.sortRequiredModules(modules);
		
		return modules;
	}
	
	
	/**
	 * Make assets
	 */
	async void makeAsset(Dict asset)
	{
		Collection modules = this.getAssetModules(asset);
		string asset_path_relative = asset["dest"] |> default string "";
		
		if (asset_path_relative == "")
			return;
		
		string asset_path = fs::join([ this.project_path, asset_path_relative ]);
		string asset_content = "";
		
		for (int i=0; i<modules.count(); i++)
		{
			string module_name = modules[i];
			Module module = this.modules[module_name];
			if (module)
			{
				Dict files = module.config["assets"] |> default Collection [];
				for (int j=0; j<files.count(); j++)
				{
					string file_name = files[j];
					string file_source_path = module.resolveSourceFile(file_name);
					string file_dest_path = module.resolveDestFile(
						this.project_path,
						file_name,
						"es6"
					);
					
					if (file_dest_path == "") continue;
					
					if (await fs::isFile(file_dest_path))
					{
						string content = await fs::readFile(file_dest_path);
						asset_content ~= content ~ "\n";
					}
					else if (
						await fs::isFile(file_source_path) and
						rs::extname(file_source_path) == "js"
					)
					{
						string content = await fs::readFile(file_source_path);
						asset_content ~= content ~ "\n";
					}
				}
			}
		}
		
		/* Create directory if does not exists */
		string dir_name = rs::dirname( asset_path );
		if (not await fs::isDir(dir_name))
		{
			await fs::mkdir(dir_name);
		}
		
		/* Save file */
		await fs::saveFile(asset_path, asset_content);
		
		io::print("Bundle to => " ~ asset_path_relative);
	}
}