/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Compiler.Commands;

use Runtime.fs;
use Runtime.Console.BaseCommand;
use Runtime.Console.CommandsList;
use BayLang.Compiler.Module;
use BayLang.Compiler.Project;
use BayLang.Compiler.Commands.Modules;
use BayLang.Compiler.SettingsProvider;
use BayLang.Exceptions.ParserUnknownError;


class Make extends BaseCommand
{
	/**
	 * Returns name
	 */
	static string getName() => "make";
	
	
	/**
	 * Returns description
	 */
	static string getDescription() => "Make module";
	
	
	/**
	 * Run task
	 */
	async int run()
	{
		string module_name = @.cli_args[2];
		string lang = @.cli_args[3];
		
		if (not module_name)
		{
			Modules::showModules();
			return 0;
		}
		
		/* Read project */
		Project project = await Project::readProject(@.base_path);
		if (not project)
		{
			rtl::error("Project not found");
			return;
		}
		
		/* Get module */
		Module module = project.getModule(module_name);
		if (not module)
		{
			rtl::error("Module not found");
			return;
		}
		
		/* Compile module */
		bool is_success = true;
		string module_src_path = module.getSourceFolderPath();
		Collection<string> files = await fs::listDirRecursive(module_src_path);
		for (int i=0; i<files.count(); i++)
		{
			string file_name = files[i];
			string file_path = fs::join([ module_src_path, file_name ]);
			
			/* Detect is file */
			if (not await fs::isFile(file_path))
			{
				continue;
			}
			
			/* Check if not exclude */
			if (module.checkExclude(file_name))
			{
				continue;
			}
			
			/* Compile */
			try
			{
				string extension = rs::extname(file_name);
				if (extension == "bay")
				{
					rtl::print(file_name);
					await module.compile(file_name, lang);
				}
			}
			catch (ParserUnknownError e)
			{
				rtl::error(e.toString());
				is_success = false;
			}
			catch (var e)
			{
				rtl::error(e);
				is_success = false;
			}
		}
		
		if (not is_success)
		{
			return static::ERROR;
		}
		
		Collection languages = project.getLanguages();
		if (languages.indexOf("es6") != -1)
		{
			Collection<Dict> project_assets = module.getProjectAssets();
			for (int i=0; i<project_assets.count(); i++)
			{
				Dict asset_item = project_assets.get(i);
				await project.buildAsset(asset_item);
				rtl::print("Bundle to => " ~ asset_item.get("dest"));
			}
		}
		
		return static::SUCCESS;
	}
}