/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Compiler.Commands;

use Runtime.io;
use Runtime.Console.BaseCommand;
use Runtime.Console.CommandsList;
use BayLang.Compiler.Module;
use BayLang.Compiler.SettingsProvider;


class MakeAll extends BaseCommand
{
	/**
	 * Returns name
	 */
	static string getName() => "make_all";
	
	
	/**
	 * Returns description
	 */
	static string getDescription() => "Make all modules";
	
	
	/**
	 * Run task
	 */
	static async int run()
	{
		bool result = true;
		string lang = @.cli_args[2];
		
		/* Get modules */
		SettingsProvider settings = @.provider(classof SettingsProvider);
		Dict<Module> modules = settings.getModules();
		
		/* Compile modules */
		Collection<string> modules_names = modules.keys().sort();
		for (int i=0; i<modules_names.count(); i++)
		{
			string module_name = modules_names[i];
			io::print(io::color("yellow", "Compile " ~ module_name));
			result = result & await settings.compileModule(module_name, lang);
		}
		
		/* Result */
		if (not result)
		{
			return static::FAIL;
		}
		return static::SUCCESS;
	}
}