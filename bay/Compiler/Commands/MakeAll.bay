/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Compiler.Commands;

use Runtime.io;
use Runtime.Console.BaseCommand;
use Runtime.Console.CommandsList;
use BayLang.Compiler.Module;
use BayLang.Compiler.Project;
use BayLang.Compiler.Commands.Make;


class MakeAll extends BaseCommand
{
	/**
	 * Returns name
	 */
	static string getName() => "make_all";
	
	
	/**
	 * Returns description
	 */
	static string getDescription() => "Make all modules";
	
	
	/**
	 * Run task
	 */
	static async int run()
	{
		/* Read project */
		Project project = await Project::readProject(@.base_path);
		if (not project)
		{
			rtl::error("Project not found");
			return static::ERROR;
		}
		
		Make make = new Make();
		Dict<Module> modules = project.getModules();
		Collection<string> keys = rtl::list(modules.keys());
		for (int i=0; i<keys.count(); i++)
		{
			string module_name = keys.get(i);
			Module module = modules.get(module_name);
			rtl::print(rtl::color("yellow", "Compile " ~ module.name));
			await make.compile(project, module);
		}
		
		return static::SUCCESS;
	}
}