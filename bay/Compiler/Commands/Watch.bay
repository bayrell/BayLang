/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Compiler.Commands;

use Runtime.io;
use Runtime.Console.BaseCommand;
use Runtime.Console.CommandsList;
use BayLang.Compiler.Module;
use BayLang.Compiler.Project;
use BayLang.Compiler.Commands.Make;
use BayLang.Exceptions.ParserUnknownError;


class Watch extends BaseCommand
{
	/**
	 * Returns name
	 */
	static string getName() => "watch";
	
	
	/**
	 * Returns description
	 */
	static string getDescription() => "Watch changes";
	
	
	/**
	 * On change file
	 */
	async void onChangeFile(string changed_file_path)
	{
		/* Read project */
		Project project = await Project::readProject(@.base_path);
		if (not project)
		{
			rtl::error("Project not found");
			return;
		}
		
		Make make = new Make();
		Module module = project.findModuleByFileName(changed_file_path);
		if (module)
		{
			try
			{
				string file_path = module.getRelativeSourcePath(changed_file_path);
				bool result = await module.compile(file_path);
				if (result)
				{
					rtl::print(changed_file_path);
					Collection languages = project.getLanguages();
					for (int i=0; i<languages.count(); i++)
					{
						string lang = languages.get(i);
						string dest_file_path = module.resolveDestFilePath(file_path, lang);
						rtl::print("=> " ~ dest_file_path);
					}
					await make.buildAsset(project, module);
				}
			}
			catch (ParserUnknownError e)
			{
				rtl::print(changed_file_path);
				rtl::error(e.toString());
			}
		}
	}
	
	
	/**
	 * Run task
	 */
	async int run()
	{
		#ifcode NODEJS then
		
		let watch_dir = () =>
		{
			let chokidar = require("chokidar");
			return new Promise(() => {
				console.log("Start watch");
				chokidar
					.watch(rtl.getContext().base_path)
					.on('change', (path, stat) => {
						setTimeout(()=>{ this.onChangeFile(path); }, 500);
					})
				;
				
			});
		};
		
		await watch_dir();
		
		#endif
		
		return static::SUCCESS;
	}
}