/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Compiler;

use Runtime.fs;
use Runtime.re;
use Runtime.lib;
use Runtime.BaseObject;
use Runtime.Serialize.SerializeInterface;
use Runtime.Serialize.Serializer;
use BayLang.Compiler.Project;
use BayLang.LangBay.ParserBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.LangNode.TranslatorNode;
use BayLang.LangPHP.TranslatorPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.CoreTranslator;
use BayLang.LangUtils;


class Module extends BaseObject implements SerializeInterface
{
	Project project = null;
	bool is_exists = false;
	string path = "";
	string src_path = "";
	Dict<string> dest_path = {};
	string name = "";
	Dict submodules = null;
	Vector<string> allow = null;
	Vector<string> assets = null;
	Vector<Map> required_modules = null;
	Vector<Map> routes = null;
	Vector<string> groups = null;
	Vector<string> exclude = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(Project project)
	{
		parent();
		this.project = project;
	}
	
	
	/**
	 * Read module
	 */
	async void read(string module_path)
	{
		this.is_exists = false;
		this.path = module_path;
		if (not(await fs::isFolder(this.path))) return;
		
		/* Module json file */
		string module_json_path = this.path ~ "/" ~ "module.json";
		if (not(await fs::isFile(module_json_path))) return;
		
		/* Read file */
		string content = await fs::readFile(module_json_path);
		Dict module_info = rtl::jsonDecode(content);
		
		if (not module_info) return;
		if (not module_info.has("name")) return;
		
		this.is_exists = true;
		this.name = module_info.get("name");
		this.dest_path = module_info.get("dest");
		this.src_path = module_info.get("src");
		this.allow = module_info.get("allow");
		this.assets = module_info.get("assets");
		this.groups = module_info.get("groups");
		this.required_modules = module_info.get("require");
		this.submodules = module_info.get("modules");
		this.exclude = module_info.get("exclude");
	}
	
	
	/**
	 * Process project cache
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "is_exists", data);
		serializer.process(this, "assets", data);
		serializer.process(this, "groups", data);
		serializer.process(this, "name", data);
		serializer.process(this, "path", data);
		serializer.process(this, "routes", data);
		serializer.process(this, "dest_path", data);
		serializer.process(this, "src_path", data);
		serializer.process(this, "required_modules", data);
		serializer.process(this, "submodules", data);
	}
	
	
	/**
	 * Returns true if module is exists
	 */
	void exists() => this.is_exists;
	
	
	/**
	 * Returns module path
	 */
	string getPath() => this.path;
	
	
	/**
	 * Returns module name
	 */
	string getName() => this.name;
	
	
	/**
	 * Returns source folder path
	 */
	string getSourceFolderPath() =>
		this.src_path ? fs::join([ this.getPath(), this.src_path ]) : null
	;
	
	
	/**
	 * Returns dest folder path
	 */
	string getDestFolderPath(string lang)
	{
		if (not this.dest_path.has(lang)) return "";
		return fs::join([ this.getPath(), this.dest_path.get(lang) ]);
	}
	
	
	/**
	 * Returns relative source path
	 */
	string getRelativeSourcePath(string file_path)
	{
		string source_path = this.getSourceFolderPath();
		if (not source_path) return null;
		int source_path_sz = rs::strlen(source_path);
		if (rs::substr(file_path, 0, source_path_sz) != source_path) return null;
		return rs::addFirstSlash(rs::substr(file_path, source_path_sz));
	}
	
	
	/**
	 * Returns true if module contains file
	 */
	bool checkFile(string file_full_path) => rs::indexOf(file_full_path, this.path) == 0;
	
	
	/**
	 * Check allow list
	 */
	bool checkAllow(string file_name)
	{
		if (not this.allow) return false;
		
		bool success = false;
		for (int i=0; i<this.allow.count(); i++)
		{
			string file_match = this.allow.get(i);
			if (file_match == "") continue;
			
			bool res = re::match(file_match, file_name);
			
			/* Ignore */
			if (rs::charAt(file_match, 0) == "!")
			{
				if (res)
				{
					success = false;
				}
			}
			
			/* Allow */
			else
			{
				if (res)
				{
					success = true;
				}
			}
			
		}
		
		return success;
	}
	
	
	/**
	 * Check exclude
	 */
	bool checkExclude(string relative_src_file_path)
	{
		if (not this.exclude) return false;
		for (int i=0; i<this.exclude.count(); i++)
		{
			string file_match = this.exclude.get(i);
			if (file_match == "") continue;
			
			file_match = re::replace("\\/", "\\/", file_match);
			bool res = re::match(file_match, relative_src_file_path);
			if (res)
			{
				return true;
			}
		}
		return false;
	}
	
	
	/**
	 * Returns class name file path
	 */
	string resolveClassName(string class_name)
	{
		/* Check if class name start with module name */
		int module_name_sz = rs::strlen(this.getName());
		if (rs::substr(class_name, 0, module_name_sz) != this.getName())
		{
			return "";
		}
		
		/* Remove module name from class name */
		class_name = rs::substr(class_name, module_name_sz);
		
		/* Return path to class name */
		string path = this.getSourceFolderPath();
		Vector<string> arr = rs::split(".", class_name);
		arr.prepend(path);
		return fs::join(arr) ~ ".bay";
	}
	
	
	/**
	 * Resolve source path
	 */
	string resolveSourceFilePath(string relative_src_file_path) =>
		fs::join([ this.getSourceFolderPath(), relative_src_file_path ])
	;
	
	
	/**
	 * Resolve dest path
	 */
	string resolveDestFilePath(string relative_src_file_path, string lang)
	{
		string dest_folder_path = this.getDestFolderPath(lang);
		if (dest_folder_path == "") return "";
		
		/* Get dest file path */
		string dest_file_path = fs::join([ dest_folder_path, relative_src_file_path ]);
		
		/* Resolve extension */
		if (lang == "php")
		{
			dest_file_path = re::replace("\\.bay$", ".php", dest_file_path);
			dest_file_path = re::replace("\\.ui$", ".php", dest_file_path);
		}
		else if (lang == "es6")
		{
			dest_file_path = re::replace("\\.bay$", ".js", dest_file_path);
			dest_file_path = re::replace("\\.ui$", ".js", dest_file_path);
		}
		else if (lang == "nodejs")
		{
			dest_file_path = re::replace("\\.bay$", ".js", dest_file_path);
			dest_file_path = re::replace("\\.ui$", ".js", dest_file_path);
		}
		
		return dest_file_path;
	}
	
	
	/**
	 * Returns true if module has group
	 */
	bool hasGroup(string group_name)
	{
		if (rs::substr(group_name, 0, 1) != "@") return false;
		group_name = rs::substr(group_name, 1);
		if (this.groups == null) return false;
		if (this.groups.indexOf(group_name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Returns true if this module contains in module list include groups
	 */
	bool inModuleList(Collection<string> module_names)
	{
		for (int i=0; i<module_names.count(); i++)
		{
			string module_name = module_names.get(i);
			if (this.name == module_name) return true;
			if (this.hasGroup(module_name)) return true;
		}
		return false;
	}
	
	
	/**
	 * Compile file
	 */
	async bool compile(string relative_src_file_path, string lang = "")
	{
		/* Get src file path */
		string src_file_path = this.resolveSourceFilePath(relative_src_file_path);
		if (src_file_path == "") return false;
		if (not this.checkFile(src_file_path)) return false;
		
		/* Read file */
		if (not(await fs::isFile(src_file_path))) return false;
		string file_content = await fs::readFile(src_file_path);
		
		/* Parse file */
		ParserBay parser = new ParserBay();
		parser.setContent(file_content);
		BaseOpCode file_op_code = parser.parse();
		if (not file_op_code) return false;
		
		/* Translate project languages */
		this.translateLanguages(relative_src_file_path, file_op_code, lang);
		
		return true;
	}
	
	
	/**
	 * Translate file
	 */
	async void translateLanguages(
		string relative_src_file_path, BaseOpCode op_code, string dest_lang = ""
	)
	{
		/* Translate to destination language */
		if (dest_lang != "")
		{
			await this.translate(relative_src_file_path, op_code, dest_lang);
		}
		
		/* Translate project languages */
		else
		{
			Collection languages = this.project.getLanguages();
			for (int i=0; i<languages.count(); i++)
			{
				string lang = languages.get(i);
				if (lang == "bay") continue;
				await this.translate(relative_src_file_path, op_code, lang);
			}
		}
	}
	
	
	/**
	 * Translate file
	 */
	async bool translate(string relative_src_file_path, BaseOpCode op_code, string lang)
	{
		/* Get dest file path */
		string dest_file_path = this.resolveDestFilePath(relative_src_file_path, lang);
		if (dest_file_path == "") return false;
		
		/* Create translator */
		CoreTranslator translator = LangUtils::createTranslator(lang);
		if (not translator) return false;
		
		/* Translate */
		string dest_file_content = translator.translate(op_code);
		
		/* Create dest folder if not exists */
		string dest_dir_name = rs::dirname(dest_file_path);
		if (not await fs::isFolder(dest_dir_name))
		{
			await fs::mkdir(dest_dir_name);
		}
		
		/* Save file */
		await fs::saveFile(dest_file_path, dest_file_content);
		
		return true;
	}
	
	
	/**
	 * Returns projects assets
	 */
	Collection<Dict> getProjectAssets()
	{
		Collection<Dict> project_assets = this.project.getAssets();
		project_assets = project_assets.filter(
			bool (Dict asset)
			{
				if (not asset.has("modules")) return false;
				
				/* Check module in modules names */
				Collection modules = asset.get("modules");
				if (not modules) return false;
				if (not (rtl::isCollection(modules))) return false;
				if (not this.inModuleList(modules)) return false;
				
				return true;
			}
		);
		return project_assets;
	}
	
	
	/**
	 * Update assets
	 */
	async void updateAssets()
	{
		Collection languages = this.project.getLanguages();
		if (languages.indexOf("es6") == -1) return;
		
		/* Builds assets with current module */
		Collection<Dict> project_assets = this.getProjectAssets();
		for (int i=0; i<project_assets.count(); i++)
		{
			await this.project.buildAsset(project_assets.get(i));
		}
	}
}