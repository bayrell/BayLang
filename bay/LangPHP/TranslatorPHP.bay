/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangPHP;

use Runtime.re;
use Runtime.rs;
use BayrellLang.CommonTranslator;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpAnd;
use BayrellLang.OpCodes.OpAssign;
use BayrellLang.OpCodes.OpAssignDeclare;
use BayrellLang.OpCodes.OpBitAnd;
use BayrellLang.OpCodes.OpBitNot;
use BayrellLang.OpCodes.OpBitOr;
use BayrellLang.OpCodes.OpBitXor;
use BayrellLang.OpCodes.OpBreak;
use BayrellLang.OpCodes.OpCall;
use BayrellLang.OpCodes.OpCallAwait;
use BayrellLang.OpCodes.OpChilds;
use BayrellLang.OpCodes.OpClassDeclare;
use BayrellLang.OpCodes.OpClassName;
use BayrellLang.OpCodes.OpClone;
use BayrellLang.OpCodes.OpComment;
use BayrellLang.OpCodes.OpCompare;
use BayrellLang.OpCodes.OpConcat;
use BayrellLang.OpCodes.OpContinue;
use BayrellLang.OpCodes.OpDelete;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpFor;
use BayrellLang.OpCodes.OpFunctionArrowDeclare;
use BayrellLang.OpCodes.OpFunctionDeclare;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpIf;
use BayrellLang.OpCodes.OpIfElse;
use BayrellLang.OpCodes.OpInterfaceDeclare;
use BayrellLang.OpCodes.OpMod;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpNamespace;
use BayrellLang.OpCodes.OpNew;
use BayrellLang.OpCodes.OpNope;
use BayrellLang.OpCodes.OpNot;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpOr;
use BayrellLang.OpCodes.OpPostDec;
use BayrellLang.OpCodes.OpPostInc;
use BayrellLang.OpCodes.OpPow;
use BayrellLang.OpCodes.OpPreDec;
use BayrellLang.OpCodes.OpPreInc;
use BayrellLang.OpCodes.OpPreprocessorCase;
use BayrellLang.OpCodes.OpPreprocessorSwitch;
use BayrellLang.OpCodes.OpReturn;
use BayrellLang.OpCodes.OpShiftLeft;
use BayrellLang.OpCodes.OpShiftRight;
use BayrellLang.OpCodes.OpStatic;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpStringItem;
use BayrellLang.OpCodes.OpStructDeclare;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpTemplateIdentifier;
use BayrellLang.OpCodes.OpTernary;
use BayrellLang.OpCodes.OpThrow;
use BayrellLang.OpCodes.OpTryCatch;
use BayrellLang.OpCodes.OpTryCatchChilds;
use BayrellLang.OpCodes.OpUse;
use BayrellLang.OpCodes.OpWhile;


export class TranslatorPHP extends CommonTranslator {
	
	
	Map<string, string> modules = null;
	string current_namespace = "";
	string current_class_name = "";
	Vector<string> current_function_name = null;
	bool current_function_is_static = false;
	string current_module_name = "";
	bool is_static = false;
	bool is_interface = false;
	bool is_struct = false;
	bool struct_read_only = false;
	
	
	/**
	 * Returns full class name
	 * @return string
	 */
	string getCurrentClassName()
	{
		return this.current_namespace ~ "." ~ this.current_class_name;
	}
	
	
	
	/**
	 * Get name
	 */
	string getName(string name){
		if (name == 'parent'){
			return "parent";
		}
		else if (name == 'self'){
			return "static";
		}
		else if (this.modules.has(name)){
			return name;
		}
		else if (this.is_static){
			return name;
		}
		else if (
			name == 'null' or
			name == 'false' or name == 'true'
		){
			return name;
		}
		return "$" ~ name;
	}
	
	
	
	/**
	 * Get module name
	 * @param string name
	 * @return string
	 */
	string getModuleName(string name){
		if (this.modules.has(name)){
			return this.modules.item(name);
		}
		return name;
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor (ContextInterface context = null){
		parent(context);
		this.modules = new Map<string, string>();
	}
	
	
	
	/**
	 * Escape string
	 */
	string escapeString(string s){
		s = re::replace('\\\\', '\\\\', s);
		s = re::replace('"', '\\\"', s);
		s = re::replace('\\$', '\\$', s);
		s = re::replace('\n', '\\n', s);
		s = re::replace('\r', '\\r', s);
		s = re::replace('\t', '\\t', s);
		return s;
	}
	
	
	
	/**
	 * Escape string
	 */
	string convertString(string s){
		return '"' ~ this.escapeString(s) ~ '"';
	}
	
	
	
	/**
	 * Comment
	 */
	string OpComment(OpComment op_code){
		return "/*" ~ op_code.value ~ "*/"; 
	}
	
	
	/** =========================== Identifier ============================ */
	
	
	/**
	 * HexNumber
	 */
	string OpHexNumber(OpHexNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * Identifier
	 */
	string OpIdentifier(OpIdentifier op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.getName(op_code.value);
	}
	
	
	
	/**
	 * Number
	 */
	string OpNumber(OpNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * String
	 */
	string OpString(OpString op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.convertString(op_code.value);
	}
	
	
	
	/**
	 * Array
	 */
	string OpStringItem(OpStringItem op_code){
		return "mb_substr(" ~ this.translateRun(op_code.value1) ~ 
			", " ~ this.s(this.translateRun(op_code.value2)) ~ ", 1)";
	}
	
	
	
	/** ======================== Dynamic or static ======================== */
	
	
	
	/**
	 * Dynamic load
	 */
	string OpDynamic(OpDynamic op_code){
		string res = this.o(this.translateRun(op_code.value), this.max_opcode_level) ~ '->' ~ op_code.name;
		this.current_opcode_level = this.max_opcode_level;
		return res;
	}
	
	
	
	/**
	 * Static load
	 */
	string OpStatic(OpStatic op_code){
		return this.translateRun(op_code.value) ~ '::' ~ op_code.name;
	}
	
	
	
	/**
	 * Template Identifier
	 */
	string OpTemplateIdentifier(OpTemplateIdentifier op_code){
		return this.translateRun(op_code.t);
	}
	
	
	
	
	/** ============================ Operations ============================ */
	
	
	
	/**
	 * ADD
	 */
	string OpAdd(OpAdd op_code){
		return this.op(op_code, '+', 13);
	}
	
	
	
	/**
	 * AND
	 */
	string OpAnd(OpAnd op_code){ 
		return this.op(op_code, '&&', 6);
	}
	
	
	
	/**
	 * Bit AND
	 */
	string OpBitAnd(OpBitAnd op_code){
		return this.op(op_code, '&', 9);
	}
	
	
	
	/**
	 * Bit NOT
	 */
	string OpBitNot(OpBitNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit OR
	 */
	string OpBitOr(OpBitOr op_code){
		return this.op(op_code, '|', 7);
	}
	
	
	
	/**
	 * Bit XOR
	 */
	string OpBitXor(OpBitXor op_code){
		return this.op(op_code, '^', 8);
	}
	
	
	
	/**
	 * Concat strings
	 */
	string OpConcat(OpConcat op_code){
	
		string res = "";
		if ( (op_code.value1 instanceof OpConcat) or (op_code.value1 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value1)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ "::toString(" ~
				this.s(this.translateRun(op_code.value1)) ~
				")"
			;
		}
		
		res ~= this.s(' . ');
		if ( (op_code.value2 instanceof OpConcat) or (op_code.value2 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value2)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ "::toString(" ~
				this.s(this.translateRun(op_code.value2)) ~
				")"
			;
		}
		
		this.current_opcode_level = 13;
		return res;
	}
	
	
	
	/**
	 * Divide
	 */
	string OpDiv(OpDiv op_code){
		return this.op(op_code, '/', 14);
	}
	
	
	
	/**
	 * Module
	 */
	string OpMod(OpMod op_code){
		return this.op(op_code, '%', 14);
	}
	
	
	
	/**
	 * Multiply
	 */
	string OpMult(OpMult op_code){
		return this.op(op_code, '*', 14);
	}
	
	
	
	/**
	 * New
	 */
	string OpNew(OpNew op_code){
		
		string s = "";
		
		/* Function name */
		s ~= "new " ~ this.translateRun(op_code.value);
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch ~ this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = 19;
		
		return s;
	}
	
	
	
	/**
	 * Not
	 */
	string OpNot(OpNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Or
	 */
	string OpOr(OpOr op_code){
		return this.op(op_code, '||', 5);
	}
	
	
	
	/**
	 * Post decrement
	 */
	string OpPostDec(OpPostDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '--';
		this.current_opcode_level = 17;
		if (not this.is_operation) res ~= ";";
		return res;
	}
	
	
	
	/**
	 * Post increment
	 */
	string OpPostInc(OpPostInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '++';
		this.current_opcode_level = 17;
		if (not this.is_operation) res ~= ";";
		return res;
	}
	
	
	
	/**
	 * Pow
	 */
	string OpPow(OpPow op_code){
		return this.op(op_code, '**', 15);
	}
	
	
	
	/**
	 * Pre decrement
	 */
	string OpPreDec(OpPreDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '--' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		if (not this.is_operation) res ~= ";";
		return res;
	}
	
	
	
	/**
	 * Pre increment
	 */
	string OpPreInc(OpPreInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '++' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		if (not this.is_operation) res ~= ";";
		return res;
	}
	
	
	
	/**
	 * Bit shift left
	 */
	string OpShiftLeft(OpShiftLeft op_code){
		return this.op(op_code, '<<', 12);
	}
	
	
	
	/**
	 * Bit shift right
	 */
	string OpShiftRight(OpShiftRight op_code){
		return this.op(op_code, '>>', 12);
	}
	
	
	
	/**
	 * Sub
	 */
	string OpSub(OpSub op_code){
		return this.op(op_code, '-', 13);
	}
	
	
	
	
	/**
	 * Operator call function
	 */
	string OpCall(OpCall op_code){ 
		
		string s = "";
		this.pushOneLine(true);
		
		/* Function name */
		bool f = true;
		if (op_code.value instanceof OpIdentifier){
			if (op_code.value.value == 'parent'){
				if (this.current_function_name.get(0) == "constructor"){
					s ~= "parent::__construct";
				}
				else if (this.current_function_name.get(0) == "destructor"){
					s ~= "parent::__destruct";
				}
				else{
					s ~= "parent::" ~ this.current_function_name.get(0);
				}
				f = false;
			}
		}
		if (f){
			bool old_is_operation = this.is_operation;
			this.is_operation = true;
			s ~= this.translateRun(op_code.value);
			this.is_operation = old_is_operation;
		}
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch + this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		
		/* semicolon */
		this.popOneLine();
		if (not this.is_operation){
			s ~= ";";
		}
		
		this.current_opcode_level = this.max_opcode_level;
		return s;
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpCompare(OpCompare op_code){
		this.current_opcode_level = 10;
		string condition = op_code.condition;
		if (condition == 'implements'){
			condition = 'instanceof';
		}
		return this.op(op_code, condition, 10);
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpTernary(OpTernary op_code){		
		string semicolon = this.is_operation ? "" : ";";
		string res = 
			'(' ~ this.translateRun(op_code.condition) ~ ') ? ' ~
			'(' ~ this.s(this.translateRun(op_code.if_true)) ~ ') : ' ~
			'(' ~ this.s(this.translateRun(op_code.if_false)) ~ ')'
		;
		this.current_opcode_level = 4;
		return res;
	}
	
	
	
	/** ========================== Vector and Map ========================= */
	
	
	/**
	 * Vector
	 */
	string OpVector(OpVector op_code){
		string res = "";
		
		res ~= "(new " ~ this.getName("Vector") ~ "())";
		for (var i=0; i<op_code.values.count(); i++){
			BaseOpCode item = op_code.values.item(i);
			this.current_opcode_level = this.max_opcode_level;
			res ~= this.s("->push(" ~ this.translateRun(item) ~ ")");
		}
		this.current_opcode_level = this.max_opcode_level;
		
		return res;
	}
	
	
	
	/**
	 * Map
	 */
	string OpMap(OpMap op_code){
		string res = "";
		
		Vector<string> keys = op_code.values.keys();
		
		res ~= "(new " ~ this.getName("Map") ~ "())";
		for (var i=0; i<keys.count(); i++){
			string key = keys.item(i);
			BaseOpCode item = op_code.values.item(key);
			this.current_opcode_level = this.max_opcode_level;
			res ~= this.s("->set(" ~ rs::json_encode(key) ~ ", " ~ this.translateRun(item) ~ ")");
		}
		this.current_opcode_level = this.max_opcode_level;
		
		return res;
	}
	
	
	
	/**
	 * Method
	 */
	string OpMethod(OpMethod op_code){
		
		if (op_code.value instanceof OpDynamic){
			string name = op_code.value.name;
			string obj = this.translateRun(op_code.value.value);
			return "new \\Runtime\\Callback("~obj~", "~this.convertString(name)~")";
		}
		else if (op_code.value instanceof OpStatic){
			string name = op_code.value.name;
			string obj = this.translateRun(op_code.value.value);
			return "new \\Runtime\\Callback("~obj~"::class, "~this.convertString(name)~")";
		}
		
		return this.translateRun(op_code.value);
	}
	
	
	
	/**
	 * Class name
	 */
	string OpClassName(OpClassName op_code){
		return this.convertString(this.modules.get(op_code.value, ""));
	}
	
	
	
	/** ============================ Operators ============================ */
	
	
	/**
	 * Assign
	 */
	string OpAssign(OpAssign op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.ident);
		this.popOneLine();
		
		if (op_code.op_name == "=") res ~= " = ";
		else if (op_code.op_name == "~=") res ~= " .= ";
		else if (op_code.op_name == "+=") res ~= " += ";
		else if (op_code.op_name == "-=") res ~= " -= ";
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Assign declare
	 */
	string OpAssignDeclare(OpAssignDeclare op_code, bool output_value = true){
		
		string res = "";
		bool old_is_operation = this.beginOperation();
		
		string ch_var = "$";
		if (op_code.isFlag("const")) ch_var = "";
		
		string var_prefix = "";
		if (this.struct_read_only and this.is_struct and 
			op_code.isFlag("public") and not op_code.isFlag("static"))
		{
			var_prefix = "__";
		}
		
		if (op_code.value == null or (not output_value and not op_code.isFlag('static') and not op_code.isFlag('const'))){
			this.pushOneLine(true);
			res = ch_var ~ var_prefix ~ op_code.name;
			this.popOneLine();
		}
		else{
			/* one line */
			this.pushOneLine(true);
			res = ch_var ~ var_prefix ~ op_code.name ~ ' = ';
			this.popOneLine();
			
			/* result */
			this.current_opcode_level = 0;
			this.levelInc();
			res ~= this.s(this.translateRun(op_code.value));
			this.levelDec();
		}
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Break
	 */
	string OpBreak(OpBreak op_code){
		return "break;"; 
	}
	
	
	
	/**
	 * Clone
	 */
	string OpClone(OpClone op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* result */
		string s = "rtl::_clone(";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= this.s(")");
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return s;
	}
	
	
	
	/**
	 * Continue
	 */
	string OpContinue(OpContinue op_code){
		return "continue;"; 
	}
	
	
	
	/**
	 * Delete
	 */
	string OpDelete(OpDelete op_code){
		return "";
	}
	
	
	
	/**
	 * For
	 */
	string OpFor(OpFor op_code){
		string s = "";
		
		/* Header */
		bool old_is_operation = this.beginOperation();
		s ~= "for (" ~ 
			this.translateRun(op_code.loop_init) ~ "; " ~
			this.translateRun(op_code.loop_condition) ~ "; " ~
			this.translateRun(op_code.loop_inc) ~ "){"
		;
		this.endOperation(old_is_operation);
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	/**
	 * If
	 */
	string OpIf(OpIf op_code){
		string s = "";
		
		/* Condition */
		bool old_is_operation = this.beginOperation();
		s ~= "if (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation(old_is_operation);
		
		/* If true */
		this.levelInc();
		for (int i=0; i<op_code.if_true.count(); i++){
			s ~= this.s(this.translateRun(op_code.if_true.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		
		/* If else */
		for (int i=0; i<op_code.if_else.count(); i++){
			OpIfElse if_else = op_code.if_else.item(i);
			
			bool old_is_operation = this.beginOperation();
			string res = "else if (" ~ this.translateRun(if_else.condition) ~ "){";
			this.endOperation(old_is_operation);
			s ~= this.s(res);
			
			this.levelInc();
			for (int j=0; j<if_else.if_true.count(); j++){
				s ~= this.s(this.translateRun(if_else.if_true.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		/* If false */
		if (op_code.if_false != null){
			s ~= this.s("else {");
			this.levelInc();
			for (int i=0; i<op_code.if_false.count(); i++){
				s ~= this.s(this.translateRun(op_code.if_false.item(i)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		return s;
	}
	
	
	
	/**
	 * Return
	 */
	string OpReturn(OpReturn op_code){
		bool old_is_operation = this.beginOperation();
		
		/* result */
		string s = "return ";
		this.current_opcode_level = 0;
		this.levelInc();
		s ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		s ~= this.s(";");
		this.endOperation(old_is_operation);
		return s;
	}
	
	
	
	/**
	 * Throw
	 */
	string OpThrow(OpThrow op_code){
		bool old_is_operation = this.beginOperation();
		
		/* result */
		string s = "throw ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation(old_is_operation);
		return s;
	}
	
	
	
	/**
	 * Try Catch
	 */
	string OpTryCatch(OpTryCatch op_code){
		string s = "";
		
		s ~= "try{";
		this.levelInc();
		for (int i=0; i<op_code.op_try.count(); i++){
			s ~= this.s(this.translateRun(op_code.op_try.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		int try_catch_childs_sz = op_code.childs.count();
		string is_else = "";
		s ~= "catch(\\Exception $_the_exception){";
		for (int i=0; i<try_catch_childs_sz; i++){
			OpTryCatchChilds try_catch = op_code.childs.item(i);
			
			bool old_is_operation = this.beginOperation();
			string tp = this.translateRun(try_catch.op_type);
			string name = this.translateRun(try_catch.op_ident);
			this.endOperation(old_is_operation);
			
			if (tp == '$var') tp = '\\Exception';
			
			/* catch childs */
			this.levelInc();
			s ~= this.s(is_else ~ "if ($_the_exception instanceof " ~ tp ~ "){");
			this.levelInc();
			s ~= this.s(name ~ " = $_the_exception;");
			for (int j=0; j<try_catch.childs.count(); j++){
				s ~= this.s(this.translateRun(try_catch.childs.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
			this.levelDec();
			
			is_else = "else"; 
		}
		if (try_catch_childs_sz > 0){
			this.levelInc();
			s ~= this.s("else { throw $_the_exception; }");
			this.levelDec();
		}
		s ~= this.s("}");
		
		
		return s;
	}
	
	
	
	/**
	 * While
	 */
	string OpWhile(OpWhile op_code){
		string s = "";
		
		/* Condition */
		bool old_is_operation = this.beginOperation();
		s ~= "while (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation(old_is_operation);
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	
	/** ======================== Namespace and use ======================== */
	
	
	/**
	 * Namespace
	 */
	string OpNamespace(OpNamespace op_code){
		this.current_namespace = op_code.value;
		Vetor<string> arr = rs::explode(".", this.current_namespace);
		this.current_module_name = arr.item(0);
		this.modules.clear();
		string res = "namespace " ~ rs::implode("\\", arr) ~ ";";
		if (this.current_module_name != 'Runtime'){
			res ~= this.s("use Runtime\\rtl;");
			res ~= this.s("use Runtime\\Map;");
			res ~= this.s("use Runtime\\Vector;");
			res ~= this.s("use Runtime\\IntrospectionInfo;");
			this.modules.set("rtl", "Runtime.rtl");
			this.modules.set("Map", "Runtime.Map");
			this.modules.set("Vector", "Runtime.Vector");
			this.modules.set("IntrospectionInfo", "Runtime.IntrospectionInfo");
		}
		return res;
	}
	
	
	/**
	 * Use
	 */
	string OpUse(OpUse op_code){
		string lib_name = op_code.value;
		Vector<string> arr = rs::explode(".", lib_name);
		string class_name = arr.getLastItem("");
		if (op_code.alias_name != ""){
			this.modules.set(op_code.alias_name, lib_name);
		}
		else if (class_name != ""){
			this.modules.set(class_name, lib_name);
		}
		string res = rs::implode("\\", arr);
		if (op_code.alias_name != ""){
			return "use " ~ res ~ " as " ~ op_code.alias_name ~ ";";
		}
		return "use " ~ res ~ ";";
	}
	
	
	
	
	/** ============================= Classes ============================= */
	
	
	
	/**
	 * Function arrow declare
	 */
	string OpFunctionArrowDeclare(OpFunctionArrowDeclare op_code){
	
		string res = "";
		string ch = "";
		Vector<string> use_vars = new Vector();
		
		/* Skip if declare function */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Static function */
		if (op_code.isFlag("static")){
			res ~= "static function ";
			if (this.current_function_name.count() == 0){
				this.current_function_is_static = true;
			}
		}
		else{
			res ~= "function ";
			if (this.current_function_name.count() == 0){
				this.current_function_is_static = false;
			}	
			/*
			if (!this.current_function_is_static and this.current_function_name.count() > 0){
				use_vars.push("$this");
			}*/
		}
		
		/* Function Header */
		this.current_function_name.push(op_code.name);
		res ~= op_code.name;
		res ~= "(";
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			this.pushOneLine(true);
			res ~= ch ~ "$" ~ variable.name;
			if (variable.value != null){
				res ~= " = " ~ this.translateRun(variable.value);
			}
			this.popOneLine();
			use_vars.push(variable.name);
			ch = ", ";
		}
		res ~= ")";
		res ~= "{";
		this.setOperation(false);
		this.pushOneLine(false);
		this.levelInc();
		
		res ~= this.s("return ");
		res ~= this.OpFunctionDeclare(op_code.return_function, true, use_vars);
		this.levelDec();
		res ~= this.s("}");
		this.popOneLine();
		this.current_function_name.pop();
		
		return res;
	}
	
	
	
	/**
	 * Function declare
	 */
	string OpFunctionDeclare(OpFunctionDeclare op_code, bool end_semicolon = false, Vector<string> use_vars = null){
		
		string res = "";
		string ch = "";
		string s = "";
		
		/* Skip if declare function */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Static function */
		if (op_code.isFlag("static")){
			res ~= "static function ";
			if (this.current_function_name.count() == 0){
				this.current_function_is_static = true;
			}
		}
		else{
			res ~= "function ";
			if (this.current_function_name.count() == 0){
				this.current_function_is_static = false;
			}
		}
		
		/* Header */
		if (op_code.name == 'constructor'){
			res ~= '__construct';
		}
		else if (op_code.name == 'destructor'){
			res ~= '__destruct';
		}
		else{
			res ~= op_code.name;
		}
		this.current_function_name.push(op_code.name);
		this.pushOneLine(true);
		res ~= "(";
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			res ~= ch ~ "$" ~ variable.name;
			if (variable.value != null){
				res ~= " = " ~ this.translateRun(variable.value);
			}
			ch = ", ";
		}
		res ~= ")";
		
		bool flag_use = false;
		if (this.current_function_name.count() == 2 and !this.current_function_is_static){
			if (use_vars == null){
				Vector<string> use_vars = new Vector();
			}
			/*use_vars.prepend("$this");*/
		}
		if (use_vars != null){
			if (use_vars.count() > 0) flag_use = true;
		}
		if (op_code.use_variables != null){
			if (op_code.use_variables.count() > 0) flag_use = true;
		}		
		
		if (flag_use){
			ch = "";
			res ~= " use (";
			if (use_vars != null){
				for (int i=0; i<use_vars.count(); i++){
					res ~= ch ~ "&$" ~ use_vars.item(i);
					ch = ", ";
				}
			}
			if (op_code.use_variables != null){
				for (int i=0; i<op_code.use_variables.count(); i++){
					res ~= ch ~ "&$" ~ op_code.use_variables.item(i);
					ch = ", ";
				}
			}
			res ~= ")";
		}
		this.popOneLine();
		
		if (this.is_interface){
			res ~= ";";
		}
		else{
			res ~= "{";
			this.setOperation(false);
			this.pushOneLine(false);
			this.levelInc();
			
			/* Childs */
			if (op_code.childs != null){
				for (int i=0; i<op_code.childs.count(); i++){
					res ~= this.s(this.translateRun(op_code.childs.item(i)));
				}
			}
			
			this.levelDec();
			res ~= this.s("}" ~ (end_semicolon ? ";" : ""));
			this.popOneLine();
		}
		
		
		this.current_function_name.pop();
		
		return res;
	}
	
	
	
	/**
	 * Class declare header
	 */
	string OpClassDeclareHeader(OpClassDeclare op_code){
		string res = "";
		
		bool old_is_operation = this.beginOperation();
		if (this.is_interface){
			res ~= "interface ";
		}
		else{
			res ~= "class ";
		}
		res ~= op_code.class_name;
		if (op_code.class_extends != ""){
			res ~= " extends " ~ this.translateRun(op_code.class_extends);
		}
		/* Implements */
		if (op_code.class_implements != null and op_code.class_implements.count() > 0){
			res ~= " implements ";
			string ch = "";
			for (int i=0; i<op_code.class_implements.count(); i++){
				string name = op_code.class_implements.item(i);
				res ~= ch ~ this.getName(name);
				ch = ", ";
			}
		}
		res ~= "{";
		this.endOperation(old_is_operation);
		this.levelInc();
		
		return res;
	}
	
	
	
	/**
	 * Class declare variables
	 */
	string OpClassDeclareVariables(OpClassDeclare op_code){
		string res = "";
		
		for (int i=0; i<op_code.childs.count(); i++){
			BaseOpCode variable = op_code.childs.item(i);
			if (not (variable instanceof OpAssignDeclare))
				continue;
			
			string s = this.OpClassDeclareVariable(variable);
			if (s != ""){
				res ~= this.s( this.OpClassDeclareVariable(variable) );
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Class declare variable
	 */
	string OpClassDeclareVariable(OpClassDeclare op_code){
		
		if (op_code.flags != null){
			bool old_is_operation = this.beginOperation();
			
			string s = "";
			if (op_code.isFlag("const")){
				s ~= "const ";
			}
			else{
				if (op_code.isFlag("static")){
					s ~= "static ";
				}
				if (op_code.isFlag("protected")){
					s ~= "protected ";
				}
				else if (this.struct_read_only and this.is_struct and 
					op_code.isFlag("public") and not op_code.isFlag("static")){
					s ~= "protected ";
				}
				else {
					s ~= "public ";
				}
			}
			s ~= this.OpAssignDeclare(op_code, false);
			s ~= ";";
			
			this.endOperation(old_is_operation);
			
			return s;
		}
		
		return "";
	}
	
	
	
	/**
	 * Returns declare type
	 * @return string
	 */
	string getTypeValue(BaseOpCode tp){
		string res = "";
		while (tp != null){
			
			if (tp instanceof OpIdentifier){
				if (res != "") res = "." ~ res;
				res = this.getModuleName(tp.value) ~ res;
				tp = null;
			}
			else if (tp instanceof OpDynamic){
				if (res != "") res = "." ~ res;
				res = tp.name ~ res;
				tp = tp.value;			
			}
			else if (tp instanceof OpTemplateIdentifier){
				tp = tp.t;
			}
			else {
				tp = null;
			}
		}
		return res;
	}
	
	
	
	/**
	 * Returns declare type
	 * @return string
	 */
	string getAssignDeclareTypeValue(OpAssignDeclare variable){
		return this.getTypeValue(variable.tp);
	}	
	
	
	
	/**
	 * Returns declare type
	 * @return string
	 */
	string getAssignDeclareTypeTemplate(OpAssignDeclare variable){
		
		if (variable.tp instanceof OpTemplateIdentifier){
			if (variable.tp.childs != null){
				BaseOpCode code = variable.tp.childs.get(0);
				return this.getTypeValue(code);
			}
		}
		
		return "";
	}
	
	
	
	/**
	 * Class init functions
	 */
	string OpClassInit(OpClassDeclare op_code){
		
		Vector<BaseOpCode> childs = op_code.childs;
		Vector<string> class_implements = op_code.class_implements;
		string class_extends = "";
		
		if (op_code.class_extends){
			string name = op_code.class_extends.value;
			if (this.modules.has(name)){
				class_extends = this.modules.item(name);
			}
			else{
				class_extends = name;
			}
		}
		
		string res = "";
		bool has_assignable = false;
		bool has_variables = false;
		bool has_serializable = false;
		bool has_cloneable = false;
		bool has_methods_annotations = false;
		bool has_fields_annotations = false;
		
		res ~= this.s("/* ======================= Class Init Functions ======================= */");
		
		if (not this.is_interface){
			res ~= this.s(
				"public function getClassName(){" ~
					"return " ~ this.convertString(this.current_namespace ~ "." ~ this.current_class_name) ~ 
				";}"
			);
			res ~= this.s(
				"public static function getParentClassName(){" ~
					"return " ~ this.convertString(class_extends) ~ 
				";}"
			);
		}
		
		if (this.is_struct){
			has_serializable = true;
			has_cloneable = true;
		}
		
		for (int i=0; i<childs.count(); i++){
			BaseOpCode variable = childs.item(i);
			if (variable instanceof OpAssignDeclare){
				if (variable.isFlag("serializable")){
					has_serializable = true;
					has_cloneable = true;
				}
				if (variable.isFlag("cloneable")){
					has_cloneable = true;
				}
				if (variable.isFlag("assignable")){
					has_assignable = true;
				}
				if (not variable.isFlag('static') and not variable.isFlag('const')){
					has_variables = true;
				}
				if (variable.hasAnnotations()){
					has_fields_annotations = true;
				}
			}
			if (variable instanceof OpFunctionDeclare){
				if (variable.hasAnnotations()){
					has_fields_annotations = true;
					has_methods_annotations = true;
				}
			}
		}
		
		if (this.current_module_name != 'Runtime' or this.current_class_name != 'CoreObject'){
			
			/* Init function */
			if (has_variables){
				res ~= this.s("protected function _init(){");
				this.levelInc();
				
				/* super init */
				if (class_extends != ""){
					res ~= this.s("parent::_init();");
				}
				
				/* Output variables */
				if (childs != null){
					for (int i=0; i<childs.count(); i++){
						BaseOpCode variable = childs.item(i);
						if (not (variable instanceof OpAssignDeclare))
							continue;
						string var_prefix = "";
						if (this.struct_read_only and this.is_struct and 
							variable.isFlag("public") and not variable.isFlag("static"))
						{
							var_prefix = "__";
						}	
						if (not variable.isFlag('static') and not variable.isFlag('const')){
							this.beginOperation();
							string s = "$this->" ~ var_prefix ~ variable.name ~ " = " ~ 
								this.translateRun(variable.value) ~ ";";
							this.endOperation();
							res ~= this.s(s);
						}
					}
				}
				
				this.levelDec();
				res ~= this.s("}");
			}
			
			/* If has cloneable variables */
			if (has_cloneable or has_assignable){
			
				/*
				res ~= this.s("public function createNewInstance(){");
				this.levelInc();
				res ~= this.s("return new " ~ this.current_class_name ~ "();");
				this.levelDec();
				res ~= this.s("}");
				*/
				
				string s1 = "public";
				/*if (this.struct_read_only) s1 = "protected";*/
				res ~= this.s(s1 ~ " function assignObject($obj){");
				this.levelInc();
				res ~= this.s("if ($obj instanceof " ~ this.getName(this.current_class_name) ~ "){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					string var_prefix = "";
					if (this.struct_read_only and this.is_struct and 
						variable.isFlag("public") and not variable.isFlag("static"))
					{
						var_prefix = "__";
					}	
					bool is_struct = this.is_struct and not variable.isFlag("static") and not variable.isFlag("const");
					if (variable.isFlag("public") and (variable.isFlag("cloneable") or 
						variable.isFlag("serializable") or is_struct))
					{
						res ~= this.s("$this->" ~ var_prefix ~ variable.name ~ " = " ~
							this.getName("rtl") ~ "::_clone(" ~
							"$obj->" ~ var_prefix ~ variable.name ~ ");"
						);
					}
				}
				this.levelDec();
				res ~= this.s("}");
				res ~= this.s("parent::assignObject($obj);");
				this.levelDec();
				res ~= this.s("}");
			}
			
			
			/* If has serializable variables */
			if (has_serializable or has_assignable){
				int class_variables_serializable_count = 0;
				
				/* assignValue function */
				string s1 = "public";
				/*if (this.struct_read_only) s1 = "protected";*/
				res ~= this.s(s1 ~ " function assignValue($variable_name, $value){");
				this.levelInc();
				class_variables_serializable_count = 0;
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					
					string var_prefix = "";
					if (this.struct_read_only and this.is_struct and 
						variable.isFlag("public") and not variable.isFlag("static"))
					{
						var_prefix = "__";
					}
						
					bool is_struct = this.is_struct and not variable.isFlag("static") and not variable.isFlag("const");
					if (variable.isFlag("public") and (variable.isFlag("serializable") or 
						variable.isFlag("assignable") or is_struct))
					{
						string type_value = this.getAssignDeclareTypeValue(variable);
						string type_template = this.getAssignDeclareTypeTemplate(variable);
						string def_val = "null";
						if (variable.value != null){
							def_val = this.translateRun(variable.value);
						}
						
						string s = "if ($variable_name == " ~ this.convertString(variable.name) ~ ") ";
						s ~= "$this->" ~ var_prefix ~ variable.name ~ " = ";
						s ~= "rtl::correct($value, \""~type_value~"\", "~def_val~", \""~type_template~"\");";
						
						if (class_variables_serializable_count == 0) res ~= this.s(s);
						else res ~= this.s("else " ~ s);
						class_variables_serializable_count++;
					}
				}
				if (class_variables_serializable_count == 0){
					res ~= this.s("parent::assignValue($variable_name, $value);");
				}
				else{
					res ~= this.s("else parent::assignValue($variable_name, $value);");
				}
				this.levelDec();
				res ~= this.s("}");
				
				
				/* takeValue function */
				res ~= this.s("public function takeValue($variable_name, $default_value = null){");
				this.levelInc();
				class_variables_serializable_count = 0;
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;

					string var_prefix = "";
					if (this.struct_read_only and this.is_struct and 
						variable.isFlag("public") and not variable.isFlag("static"))
					{
						var_prefix = "__";
					}
					
					bool is_struct = this.is_struct and not variable.isFlag("static") and not variable.isFlag("const");
					if (variable.isFlag("public") and (variable.isFlag("serializable") or 
						variable.isFlag("assignable") or is_struct))
					{
						string take_value_s = "if ($variable_name == " ~ this.convertString(variable.name) ~ ") " ~ 
							"return $this->" ~ var_prefix ~ variable.name ~ ";";
						if (class_variables_serializable_count == 0) res ~= this.s(take_value_s);
						else res ~= this.s("else " ~ take_value_s);
						class_variables_serializable_count++;
					}
				}
				res ~= this.s("return parent::takeValue($variable_name, $default_value);");
				this.levelDec();
				res ~= this.s("}");		
			}
			
			
			if (has_serializable or has_assignable or has_fields_annotations){
				
				/* getFieldsList function */
				res ~= this.s("public static function getFieldsList($names, $flag=0){");
				this.levelInc();
				
				Map<Vector> vars = new Map();
				
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					if (not variable.isFlag("public"))
						continue;
					
					bool is_struct = this.is_struct and not variable.isFlag("static") and 
						not variable.isFlag("const");
					
					bool is_static = variable.isFlag("static");
					bool is_serializable = variable.isFlag("serializable");
					bool is_assignable = variable.isFlag("assignable");
					bool has_annotation = variable.hasAnnotations();
					
					if (is_struct){
						is_serializable = true;
						is_assignable = true;
					}
					if (is_serializable){
						is_assignable = true;
					}
					
					int flag = 0;
					if (is_serializable) flag = flag | 1;
					if (is_assignable) flag = flag | 2;
					if (has_annotation) flag = flag | 4;
					
					if (flag != 0){
						if (not vars.has(flag)) vars.set(flag, new Vector<string>());
						Vector<string> v = vars.item(flag);
						v.push(variable.name);
					}
					
				}
				
				vars.each(
					void (string flag, Vector<string> v) use (res)
					{
						res ~= this.s("if (($flag | "~flag~")=="~flag~"){");
						this.levelInc();
						v.each(
							void (string varname) use (res)
							{
								res ~= this.s("$names->push(" ~ this.convertString(varname) ~ ");");
							}
						);
						this.levelDec();
						res ~= this.s("}");
					}
				);
				
				this.levelDec();
				res ~= this.s("}");
				
				
				/* getFieldInfoByName function */
				res ~= this.s("public static function getFieldInfoByName($field_name){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpAssignDeclare))
						continue;
					bool is_struct = this.is_struct and not variable.isFlag("static") and 
						not variable.isFlag("const");
						
					if (variable.isFlag("public") and variable.hasAnnotations()){
						res ~= this.s("if ($field_name == " ~ this.convertString(variable.name) ~ "){");
						this.levelInc();
						res ~= this.s("return new " ~ this.getName("IntrospectionInfo") ~ "(");
						this.levelInc();
						
						res ~= this.s("(new " ~ this.getName("Map") ~ "())");
						res ~= this.s("->set(\"kind\", \"field\")");
						res ~= this.s("->set(\"class_name\", " ~ 
							this.convertString(this.getCurrentClassName()) ~  ")");
						res ~= this.s("->set(\"name\", " ~ this.convertString(variable.name) ~ ")");
						res ~= this.s("->set(\"annotations\", ");
						this.levelInc();
						res ~= this.s("(new " ~ this.getName("Vector") ~ "())");
						for (int j=0; j<variable.annotations.count(); j++){
							OpAnnotation annotation = variable.annotations.item(j);
							
							this.pushOneLine(true);
							string s_kind = this.translateRun(annotation.kind);
							string s_options = this.translateRun(annotation.options);
							this.popOneLine();
							
							res ~= this.s("->push(new " ~ s_kind ~ "(" ~ s_options ~ "))");
						}
						this.levelDec();
						res ~= this.s(")");
						
						this.levelDec();
						res ~= this.s(");");
						this.levelDec();
						res ~= this.s("}");
					}
					
				}
				res ~= this.s("return null;");
				this.levelDec();
				res ~= this.s("}");
			}	
			
			
			if (has_methods_annotations){
				
				/* getMethodsList function */
				res ~= this.s("public static function getMethodsList($names){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpFunctionDeclare))
						continue;
					if (variable.isFlag("public") and variable.hasAnnotations())
						res ~= this.s("$names->push(" ~ this.convertString(variable.name) ~ ");");
				}
				this.levelDec();
				res ~= this.s("}");
				
				
				/* getMethodInfoByName function */
				res ~= this.s("public static function getMethodInfoByName($method_name){");
				this.levelInc();
				for (int i=0; i<childs.count(); i++){
					BaseOpCode variable = childs.item(i);
					if (not (variable instanceof OpFunctionDeclare))
						continue;
					if (variable.isFlag("public") and variable.hasAnnotations()){
						res ~= this.s("if ($method_name == " ~ this.convertString(variable.name) ~ "){");
						this.levelInc();
						res ~= this.s("return new " ~ this.getName("IntrospectionInfo") ~ "(");
						this.levelInc();
						
						res ~= this.s("(new " ~ this.getName("Map") ~ "())");
						res ~= this.s("->set(\"kind\", \"method\")");
						res ~= this.s("->set(\"class_name\", " ~ 
							this.convertString(this.getCurrentClassName()) ~  ")");
						res ~= this.s("->set(\"name\", " ~ this.convertString(variable.name) ~ ")");
						res ~= this.s("->set(\"annotations\", ");
						this.levelInc();
						res ~= this.s("(new " ~ this.getName("Vector") ~ "())");
						for (int j=0; j<variable.annotations.count(); j++){
							OpAnnotation annotation = variable.annotations.item(j);
							
							this.pushOneLine(true);
							string s_kind = this.translateRun(annotation.kind);
							string s_options = this.translateRun(annotation.options);
							this.popOneLine();
							
							res ~= this.s("->push(new " ~ s_kind ~ "(" ~ s_options ~ "))");
						}
						this.levelDec();
						res ~= this.s(")");
						
						this.levelDec();
						res ~= this.s(");");
						this.levelDec();
						res ~= this.s("}");
					}
				}
				res ~= this.s("return null;");
				this.levelDec();
				res ~= this.s("}");
				
			}
			
			if (this.struct_read_only and this.is_struct){				
				res ~= this.s("public function __get($key){ return $this->takeValue($key); }");
				res ~= this.s("public function __set($key, $value){}");
			}
		}
		
		/* Output classes annotations */
		if (op_code.hasAnnotations()){
			res ~= this.s("public static function getClassInfo(){");
			this.levelInc();
		
			res ~= this.s("return new " ~ this.getName("IntrospectionInfo") ~ "(");
			this.levelInc();
			
			res ~= this.s("(new " ~ this.getName("Map") ~ "())");
			res ~= this.s("->set(\"kind\", \"class\")");
			res ~= this.s("->set(\"class_name\", " ~ this.convertString(this.getCurrentClassName()) ~  ")");
			
			res ~= this.s("->set(\"annotations\", ");
			this.levelInc();
			res ~= this.s("(new " ~ this.getName("Vector") ~ "())");
			for (int j=0; j<op_code.annotations.count(); j++){
				OpAnnotation annotation = op_code.annotations.item(j);
				
				this.pushOneLine(true);
				string s_kind = this.translateRun(annotation.kind);
				string s_options = this.translateRun(annotation.options);
				this.popOneLine();
				
				res ~= this.s("->push(new " ~ s_kind ~ "(" ~ s_options ~ "))");
			}
			this.levelDec();
			res ~= this.s(")");
			
			this.levelDec();
			res ~= this.s(");");
			
			this.levelDec();
			res ~= this.s("}");
		}
		
		return res;
	}
	
	
	
	/**
	 * Class declare
	 */
	string OpClassDeclare(OpClassDeclare op_code){
		string res = "";
		string s = "";
		
		/* Set current class name */
		this.current_class_name = op_code.class_name;
		this.modules.set(this.current_class_name, this.current_namespace ~ "." ~ this.current_class_name);
		/*this.is_interface = false;*/
		
		/* Skip if declare class */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Header */
		res ~= this.OpClassDeclareHeader(op_code);
		
		/* Variables */
		/*res ~= this.OpClassDeclareVariables(op_code);*/
		
		/* Class body */
		for (int i=0; i<op_code.childs.count(); i++){
			BaseOpCode op_code2 = op_code.childs.item(i);
			
			if (op_code2 instanceof OpAssignDeclare){
				string s_assign_variable = this.OpClassDeclareVariable(op_code2);
				if (s_assign_variable){
					res ~= this.s(s_assign_variable);
				}
			}
			else if (op_code2 instanceof OpFunctionArrowDeclare){
				res ~= this.s(this.OpFunctionArrowDeclare(op_code2));
			}
			else if (op_code2 instanceof OpFunctionDeclare){
				res ~= this.s(this.OpFunctionDeclare(op_code2));
			}
			else if (op_code2 instanceof OpPreprocessorSwitch){
				res ~= this.s(this.OpPreprocessorSwitch(op_code2));
			}
			else if (op_code2 instanceof OpComment){
				res ~= this.s(this.OpComment(op_code2));
			}
		}
		
		/* Class Init */
		res ~= this.OpClassInit(op_code);
		
		/* Footer class */
		this.levelDec();
		res ~= this.s("}");
		
		
		return res;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpInterfaceDeclare(OpInterfaceDeclare op_code){
		this.is_interface = true;
		string res = this.OpClassDeclare(op_code);
		this.is_interface = false;
		return res;
	}
	
	
	
	/**
	 * Struct declare
	 */
	string OpStructDeclare(OpStructDeclare op_code){
		this.is_struct = true;
		this.struct_read_only = op_code.is_readonly;
		string res = this.OpClassDeclare(op_code);
		this.is_struct = false;
		return res;
	}
	
	
	/** =========================== Preprocessor ========================== */
	
	bool calcPreprocessorCondition(OpPreprocessorCase op_case){
		if (op_case.condition instanceof OpIdentifier){
			if (op_case.condition.value == "PHP"){
				return true;
			}
		}
		return false;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpPreprocessorSwitch(OpPreprocessorSwitch op_code){
		
		if (op_code.childs == null)
			return "";
		
		string res = "";
		for (int i=0; i<op_code.childs.count(); i++){
			OpPreprocessorCase op_case = op_code.childs.item(i);
			if (this.calcPreprocessorCondition(op_case)){
				res ~= this.s(op_case.value);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Reset translator to default settings
	 */
	void resetTranslator(){
		parent();
		this.current_function_name = new Vector<string>();
	}
	
	
	
	/**
	 * Translate to language
	 * @param BaseOpCode op_code - Abstract syntax tree
	 * @returns string - The result
	 */
	string translate(BaseOpCode op_code){
		this.resetTranslator();
		string s = "<?php" ~ this.crlf;
		s ~= this.translateRun(op_code);
		return s;
	}
	

}