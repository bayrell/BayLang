/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangPHP;

use Runtime.BaseStruct;
use BayLang.CoreTranslator;
use BayLang.SaveOpCode;
use BayLang.LangPHP.TranslatorPHPExpression;
use BayLang.LangPHP.TranslatorPHPHtml;
use BayLang.LangPHP.TranslatorPHPOperator;
use BayLang.LangPHP.TranslatorPHPProgram;
use BayLang.OpCodes.BaseOpCode;


struct TranslatorPHP extends CoreTranslator
{
	/* Work */
	bool is_pipe = false;
	string pipe_var_name = "";
	string html_var_name = "";
	bool is_html = false;
	
	/* Translators */
	TranslatorPHPExpression expression = null;
	TranslatorPHPHtml html = null;
	TranslatorPHPOperator operator = null;
	TranslatorPHPProgram program = null;
	
	/* Flags */
	bool frontend = false;
	bool backend = true;
	bool enable_context = false;
	bool enable_check_types = false;
	bool enable_introspection = true;
	
	
	/**
	 * Reset translator
	 */
	pure TranslatorPHP reset(TranslatorPHP t) =>
		t.copy
		{
			"value": "",
			"current_namespace_name": "",
			"modules": new Dict<string>(),
			"expression": new TranslatorPHPExpression(),
			"html": new TranslatorPHPHtml(),
			"operator": new TranslatorPHPOperator(),
			"program": new TranslatorPHPProgram(),
			"save_vars": new Collection<string>(),
			"save_op_codes": new Collection<SaveOpCode>(),
			"save_op_code_inc": 0,
			"preprocessor_flags": 
			{
				"PHP": true,
				"FRONTEND": t.frontend,
				"BACKEND": t.backend,
				"ENABLE_CONTEXT": t.enable_context,
				"ENABLE_CHECK_TYPES": t.enable_check_types,
			},
		}
	;
	
	
	
	/**
	 * Translate BaseOpCode
	 */
	pure list<TranslatorPHP, string> translate(TranslatorPHP t, BaseOpCode op_code)
	{
		t = static::reset(t);
		return t.program::translateProgram(t, op_code);
	}
	
	
	
	/**
	 * Inc save op code
	 */
	pure CoreTranslator nextSaveOpCode(CoreTranslator t)
	{
		return "$__v" ~ t.save_op_code_inc;
	}
	
	
	
	/**
	 * Output save op code content
	 */
	pure string outputSaveOpCode(CoreTranslator t, int save_op_code_value = 0)
	{
		string content = "";
		for (int i=0; i<t.save_op_codes.count(); i++)
		{
			if (i < save_op_code_value) continue;
			SaveOpCode save = t.save_op_codes.item(i);
			string s = (save.content == "") ? 
				t.s(save.var_name ~ " = " ~ save.var_content ~ ";") :
				save.content
			;
			content ~= s;
		}
		return content;
	}
}