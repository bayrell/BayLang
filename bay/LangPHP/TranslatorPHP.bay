/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangPHP;

use BayrellRtl.Lib.rs;
use BayrellRtl.Types.Map;
use BayrellLang.CommonTranslator;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpAnd;
use BayrellLang.OpCodes.OpArray;
use BayrellLang.OpCodes.OpAssign;
use BayrellLang.OpCodes.OpAssignDeclare;
use BayrellLang.OpCodes.OpBitAnd;
use BayrellLang.OpCodes.OpBitNot;
use BayrellLang.OpCodes.OpBitOr;
use BayrellLang.OpCodes.OpBitXor;
use BayrellLang.OpCodes.OpBreak;
use BayrellLang.OpCodes.OpCall;
use BayrellLang.OpCodes.OpCallAwait;
use BayrellLang.OpCodes.OpChilds;
use BayrellLang.OpCodes.OpClassDeclare;
use BayrellLang.OpCodes.OpClone;
use BayrellLang.OpCodes.OpComment;
use BayrellLang.OpCodes.OpCompare;
use BayrellLang.OpCodes.OpConcat;
use BayrellLang.OpCodes.OpContinue;
use BayrellLang.OpCodes.OpDelete;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpFor;
use BayrellLang.OpCodes.OpFunctionDeclare;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpIf;
use BayrellLang.OpCodes.OpIfElse;
use BayrellLang.OpCodes.OpInterfaceDeclare;
use BayrellLang.OpCodes.OpMod;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpNamespace;
use BayrellLang.OpCodes.OpNew;
use BayrellLang.OpCodes.OpNope;
use BayrellLang.OpCodes.OpNot;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpOr;
use BayrellLang.OpCodes.OpPostDec;
use BayrellLang.OpCodes.OpPostInc;
use BayrellLang.OpCodes.OpPow;
use BayrellLang.OpCodes.OpPreDec;
use BayrellLang.OpCodes.OpPreInc;
use BayrellLang.OpCodes.OpPreprocessorCase;
use BayrellLang.OpCodes.OpPreprocessorSwitch;
use BayrellLang.OpCodes.OpReturn;
use BayrellLang.OpCodes.OpShiftLeft;
use BayrellLang.OpCodes.OpShiftRight;
use BayrellLang.OpCodes.OpStatic;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpTemplateIdentifier;
use BayrellLang.OpCodes.OpTernary;
use BayrellLang.OpCodes.OpThrow;
use BayrellLang.OpCodes.OpTryCatch;
use BayrellLang.OpCodes.OpTryCatchChilds;
use BayrellLang.OpCodes.OpUse;
use BayrellLang.OpCodes.OpWhile;


export class TranslatorPHP extends CommonTranslator {
	
	
	Map<string, string> modules = null;
	string current_namespace = "";
	string current_class_name = "";
	string current_function_name = "";
	string current_module_name = "";
	bool is_static = false;
	bool is_interface = false;
	
	
	/**
	 * Assign all data from other object
	 * @param {BayrellObject} obj
	 */
	void assign(CoreObject obj){
		if (obj instanceof TranslatorES6){
			this.modules = clone obj.modules;
			this.current_namespace = obj.current_namespace;
			this.current_class_name = obj.current_class_name;
			this.current_function_name = obj.current_function_name;
			this.current_module_name = obj.current_module_name;
		}
		parent::assign(obj);
	}
	
	
	
	/**
	 * Get name
	 */
	string getName(string name){
		if (name == 'parent'){
			return "parent";
		}
		else if (name == 'self'){
			return "static";
		}
		else if (this.modules.has(name)){
			return name;
		}
		else if (this.is_static){
			return name;
		}
		else if (
			name == 'null' or
			name == 'false' or name == 'true'
		){
			return name;
		}
		return "$" ~ name;
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor (ContextInterface context = null){
		parent(context);
		this.modules = new Map<string, string>();
	}
	
	
	
	/**
	 * Comment
	 */
	string OpComment(OpComment op_code){
		return "/*" ~ op_code.value ~ "*/"; 
	}
	
	
	/** =========================== Identifier ============================ */
	
	
	/**
	 * HexNumber
	 */
	string OpHexNumber(OpHexNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * Identifier
	 */
	string OpIdentifier(OpIdentifier op_code){
		this.current_opcode_level = this.max_opcode_level;
		return this.getName(op_code.value);
	}
	
	
	
	/**
	 * Number
	 */
	string OpNumber(OpNumber op_code){
		this.current_opcode_level = this.max_opcode_level;
		return op_code.value;
	}
	
	
	
	/**
	 * String
	 */
	string OpString(OpString op_code){
		this.current_opcode_level = this.max_opcode_level;
		return rs::json_encode(op_code.value);
	}
	
	
	
	
	/** ======================== Dynamic or static ======================== */
	
	
	/**
	 * Array
	 */
	string OpArray(OpArray op_code){
		return this.translateRun(op_code.value1) ~ '[' ~ this.s(this.translateRun(op_code.value2)) ~ this.s(']');
	}
	
	
	
	/**
	 * Dynamic load
	 */
	string OpDynamic(OpDynamic op_code){
		string res = this.o(this.translateRun(op_code.value), this.max_opcode_level) ~ '->' ~ op_code.name;
		this.current_opcode_level = this.max_opcode_level;
		return res;
	}
	
	
	
	/**
	 * Static load
	 */
	string OpStatic(OpStatic op_code){
		return this.translateRun(op_code.value) ~ '::' ~ op_code.name;
	}
	
	
	
	/**
	 * Template Identifier
	 */
	string OpTemplateIdentifier(OpTemplateIdentifier op_code){
		return this.translateRun(op_code.t);
	}
	
	
	
	
	/** ============================ Operations ============================ */
	
	
	
	/**
	 * ADD
	 */
	string OpAdd(OpAdd op_code){
		return this.op(op_code, '+', 13);
	}
	
	
	
	/**
	 * AND
	 */
	string OpAnd(OpAnd op_code){ 
		return this.op(op_code, '&&', 6);
	}
	
	
	
	/**
	 * Bit AND
	 */
	string OpBitAnd(OpBitAnd op_code){
		return this.op(op_code, '&', 9);
	}
	
	
	
	/**
	 * Bit NOT
	 */
	string OpBitNot(OpBitNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit OR
	 */
	string OpBitOr(OpBitOr op_code){
		return this.op(op_code, '|', 7);
	}
	
	
	
	/**
	 * Bit XOR
	 */
	string OpBitXor(OpBitXor op_code){
		return this.op(op_code, '^', 8);
	}
	
	
	
	/**
	 * Concat strings
	 */
	string OpConcat(OpConcat op_code){
	
		string res = "";
		if ( (op_code.value1 instanceof OpConcat) or (op_code.value1 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value1)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ "::toString(" ~
				this.s(this.translateRun(op_code.value1)) ~
				")"
			;
		}
		
		res ~= this.s(' . ');
		if ( (op_code.value2 instanceof OpConcat) or (op_code.value2 instanceof OpString) ){
			res ~= this.o(this.s(this.translateRun(op_code.value2)), 13);
		}
		else{
			res ~= 
				this.getName("rtl") ~ "::toString(" ~
				this.s(this.translateRun(op_code.value2)) ~
				")"
			;
		}
		
		this.current_opcode_level = 13;
		return res;
	}
	
	
	
	/**
	 * Divide
	 */
	string OpDiv(OpDiv op_code){
		return this.op(op_code, '/', 14);
	}
	
	
	
	/**
	 * Module
	 */
	string OpMod(OpMod op_code){
		return this.op(op_code, '%', 14);
	}
	
	
	
	/**
	 * Multiply
	 */
	string OpMult(OpMult op_code){
		return this.op(op_code, '*', 14);
	}
	
	
	
	/**
	 * New
	 */
	string OpNew(OpNew op_code){
		
		string s = "";
		
		/* Function name */
		s ~= "new " ~ this.translateRun(op_code.value);
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch ~ this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		this.current_opcode_level = 19;
		
		return s;
	}
	
	
	
	/**
	 * Not
	 */
	string OpNot(OpNot op_code){
		string res = '!' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Or
	 */
	string OpOr(OpOr op_code){
		return this.op(op_code, '||', 5);
	}
	
	
	
	/**
	 * Post decrement
	 */
	string OpPostDec(OpPostDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '--';
		this.current_opcode_level = 17;
		return res;
	}
	
	
	
	/**
	 * Post increment
	 */
	string OpPostInc(OpPostInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = this.o(this.translateRun(op_code.value), 17) ~ '++';
		this.current_opcode_level = 17;
		return res;
	}
	
	
	
	/**
	 * Pow
	 */
	string OpPow(OpPow op_code){
		return this.op(op_code, '**', 15);
	}
	
	
	
	/**
	 * Pre decrement
	 */
	string OpPreDec(OpPreDec op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '--' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Pre increment
	 */
	string OpPreInc(OpPreInc op_code){
		string semicolon = this.is_operation ? "" : ";";
		string res = '++' ~ this.o(this.translateRun(op_code.value), 16);
		this.current_opcode_level = 16;
		return res;
	}
	
	
	
	/**
	 * Bit shift left
	 */
	string OpShiftLeft(OpShiftLeft op_code){
		return this.op(op_code, '<<', 12);
	}
	
	
	
	/**
	 * Bit shift right
	 */
	string OpShiftRight(OpShiftRight op_code){
		return this.op(op_code, '>>', 12);
	}
	
	
	
	/**
	 * Sub
	 */
	string OpSub(OpSub op_code){
		return this.op(op_code, '-', 13);
	}
	
	
	
	
	/**
	 * Operator call function
	 */
	string OpCall(OpCall op_code){ 
		
		string s = "";
		this.pushOneLine(true);
		
		/* Function name */
		bool f = true;
		if (op_code.value instanceof OpIdentifier){
			if (op_code.value.value == 'parent'){
				if (this.current_function_name == "constructor"){
					s ~= "parent::__construct";
				}
				else if (this.current_function_name == "destructor"){
					s ~= "parent::__destruct";
				}
				else{
					s ~= "parent::" ~ this.current_function_name;
				}
				f = false;
			}
		}
		if (f){
			s ~= this.translateRun(op_code.value);
		}
		
		/* Call arguments */
		this.current_opcode_level = this.max_opcode_level;
		bool old_is_operation = this.is_operation;
		this.is_operation = true;
		s ~= "(";
		if (op_code.args != null){
			string ch = "";
			for (int i=0; i<op_code.args.count(); i++){
				BaseOpCode op = op_code.args.item(i);
				s ~= ch + this.s(this.translateRun(op));
				ch = ", ";
			}
		}
		s ~= ")";
		this.is_operation = old_is_operation;
		
		/* semicolon */
		this.popOneLine();
		if (not this.is_operation){
			s ~= ";";
		}
		
		this.current_opcode_level = this.max_opcode_level;
		return s;
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpCompare(OpCompare op_code){
		this.current_opcode_level = 10;
		string condition = op_code.condition;
		if (condition == 'implements'){
			condition = 'instanceof';
		}
		return this.op(op_code, condition, 10);
	}
	
	
	
	/**
	 * Operator call function
	 */
	string OpTernary(OpTernary op_code){		
		string semicolon = this.is_operation ? "" : ";";
		string res = 
			'(' ~ this.translateRun(op_code.condition) ~ ') ? ' ~
			'(' ~ this.s(this.translateRun(op_code.if_true)) ~ ') : ' ~
			'(' ~ this.s(this.translateRun(op_code.if_false)) ~ ')'
		;
		this.current_opcode_level = 4;
		return res;
	}
	
	
	
	
	/** ============================ Operators ============================ */
	
	
	/**
	 * Assign
	 */
	string OpAssign(OpAssign op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* one line */
		this.pushOneLine(true);
		string res = this.translateRun(op_code.ident);
		this.popOneLine();
		
		if (op_code.op_name == "=") res ~= " = ";
		else if (op_code.op_name == "~=") res ~= " .= ";
		else if (op_code.op_name == "+=") res ~= " += ";
		else if (op_code.op_name == "-=") res ~= " -= ";
		
		/* result */
		this.current_opcode_level = 0;
		this.levelInc();
		res ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Assign declare
	 */
	string OpAssignDeclare(OpAssignDeclare op_code){
		
		string res = "";
		bool old_is_operation = this.beginOperation();
		
		string ch_var = "$";
		if (op_code.isFlag("const")) ch_var = "";
		
		if (op_code.value == null){
			this.pushOneLine(true);
			res = ch_var ~ op_code.name;
			this.popOneLine();
		}
		else{
			/* one line */
			this.pushOneLine(true);
			res = ch_var ~ op_code.name ~ ' = ';
			this.popOneLine();
			
			/* result */
			this.current_opcode_level = 0;
			this.levelInc();
			res ~= this.s(this.translateRun(op_code.value));
			this.levelDec();
		}
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return res;
	}
	
	
	
	/**
	 * Break
	 */
	string OpBreak(OpBreak op_code){
		return "break;"; 
	}
	
	
	
	/**
	 * Clone
	 */
	string OpClone(OpClone op_code){
		
		bool old_is_operation = this.beginOperation();
		
		/* result */
		string s = "rtl::_clone(";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= this.s(")");
		
		if (not old_is_operation) res ~= this.s(';');
		this.endOperation(old_is_operation);
		
		return s;
	}
	
	
	
	/**
	 * Continue
	 */
	string OpContinue(OpContinue op_code){
		return "continue;"; 
	}
	
	
	
	/**
	 * Delete
	 */
	string OpDelete(OpDelete op_code){
		return "";
	}
	
	
	
	/**
	 * For
	 */
	string OpFor(OpFor op_code){
		string s = "";
		
		/* Header */
		this.beginOperation();
		s ~= "for (" ~ 
			this.translateRun(op_code.loop_init) ~ "; " ~
			this.translateRun(op_code.loop_condition) ~ "; " ~
			this.translateRun(op_code.loop_inc) ~ "){"
		;
		this.endOperation();
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	/**
	 * If
	 */
	string OpIf(OpIf op_code){
		string s = "";
		
		/* Condition */
		this.beginOperation();
		s ~= "if (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		/* If true */
		this.levelInc();
		for (int i=0; i<op_code.if_true.count(); i++){
			s ~= this.s(this.translateRun(op_code.if_true.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		
		/* If else */
		for (int i=0; i<op_code.if_else.count(); i++){
			OpIfElse if_else = op_code.if_else.item(i);
			
			this.beginOperation();
			string res = "else if (" ~ this.translateRun(if_else.condition) ~ "){";
			this.endOperation();
			s ~= this.s(res);
			
			this.levelInc();
			for (int j=0; j<if_else.if_true.count(); j++){
				s ~= this.s(this.translateRun(if_else.if_true.item(j)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		/* If false */
		if (op_code.if_false != null){
			s ~= this.s("else {");
			this.levelInc();
			for (int i=0; i<op_code.if_false.count(); i++){
				s ~= this.s(this.translateRun(op_code.if_false.item(i)));
			}
			this.levelDec();
			s ~= this.s("}");
		}
		
		
		return s;
	}
	
	
	
	/**
	 * Return
	 */
	string OpReturn(OpReturn op_code){
		this.beginOperation();
		
		/* result */
		string s = "return ";
		this.current_opcode_level = 0;
		this.levelInc();
		s ~= this.s(this.translateRun(op_code.value));
		this.levelDec();
		
		s ~= this.s(";");
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Throw
	 */
	string OpThrow(OpThrow op_code){
		this.beginOperation();
		
		/* result */
		string s = "throw ";
		this.current_opcode_level = 0;
		s ~= this.s(this.translateRun(op_code.value));
		s ~= ";";
		
		this.endOperation();
		return s;
	}
	
	
	
	/**
	 * Try Catch
	 */
	string OpTryCatch(OpTryCatch op_code){
		string s = "";
		
		s ~= "try{";
		this.levelInc();
		for (int i=0; i<op_code.op_try.count(); i++){
			s ~= this.s(this.translateRun(op_code.op_try.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		int try_catch_childs_sz = op_code.childs.count();
		string is_else = "";
		s ~= "catch(Exception $_the_exception){";
		for (int i=0; i<try_catch_childs_sz; i++){
			OpTryCatchChilds try_catch = op_code.childs.item(i);
			
			this.beginOperation();
			string tp = this.translateRun(try_catch.op_type);
			string name = this.translateRun(try_catch.op_ident);
			this.endOperation();
			
			if (tp == '$var') tp = 'Exception';
			
			/* catch childs */			
			if (tp != 'Exception' or try_catch_childs_sz > 1){
				this.levelInc();
				s ~= this.s(is_else ~ "if ($_the_exception instanceof " ~ tp ~ "){");
			}
			this.levelInc();
			s ~= this.s("var " ~ name ~ " = $_the_exception;");
			for (int j=0; j<try_catch.childs.count(); j++){
				s ~= this.s(this.translateRun(try_catch.childs.item(j)));
			}
			this.levelDec();
			if (tp != 'Exception' or try_catch_childs_sz > 1){
				s ~= this.s("}");
				this.levelDec();
			}
			
			is_else = "else"; 
		}
		s ~= this.s("}");
		
		
		return s;
	}
	
	
	
	/**
	 * While
	 */
	string OpWhile(OpWhile op_code){
		string s = "";
		
		/* Condition */
		this.beginOperation();
		s ~= "while (" ~ this.translateRun(op_code.condition) ~ "){";
		this.endOperation();
		
		/* Childs */
		this.levelInc();
		for (int i=0; i<op_code.childs.count(); i++){
			s ~= this.s(this.translateRun(op_code.childs.item(i)));
		}
		this.levelDec();
		s ~= this.s("}");
		
		return s;
	}
	
	
	
	
	/** ======================== Namespace and use ======================== */
	
	
	/**
	 * Namespace
	 */
	string OpNamespace(OpNamespace op_code){
		this.current_namespace = op_code.value;
		Vetor<string> arr = rs::explode(".", this.current_namespace);
		this.current_module_name = arr.item(0);
		this.modules.clear();
		string res = "namespace " ~ rs::implode("\\", arr) ~ ";";
		if (this.current_namespace != 'BayrellRtl'){
			res ~= this.s("use BayrellRtl\\Lib\\rtl;");
		}
		return res;
	}
	
	
	/**
	 * Use
	 */
	string OpUse(OpUse op_code){
		string lib_name = op_code.value;
		Vector<string> arr = rs::explode(".", lib_name);
		string class_name = arr.getLastItem("");
		if (op_code.alias_name != ""){
			this.modules.set(op_code.alias_name, lib_name);
		}
		else if (class_name != ""){
			this.modules.set(class_name, lib_name);
		}
		string res = rs::implode("\\", arr);
		if (op_code.alias_name != ""){
			return "use " ~ res ~ " as " ~ op_code.alias_name ~ ";";
		}
		return "use " ~ res ~ ";";
	}
	
	
	
	
	/** ============================= Classes ============================= */
	
	
	/**
	 * Function declare
	 */
	string OpFunctionDeclare(OpFunctionDeclare op_code){
		string res = "";
		string ch = "";
		string s = "";
		
		/* Skip if declare function */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Static function */
		if (op_code.isFlag("static")){
			res ~= "static function ";
		}
		else{
			res ~= "function ";
		}
		
		/* Header */
		this.beginOperation();
		if (op_code.name == 'constructor'){
			res ~= '__construct';
		}
		else if (op_code.name == 'destructor'){
			res ~= '__destruct';
		}
		else{
			res ~= op_code.name;
		}
		this.current_function_name = op_code.name;
		res ~= "(";
		for (int i=0; i<op_code.args.count(); i++){
			OpAssignDeclare variable = op_code.args.item(i);
			this.pushOneLine(true);
			res ~= ch ~ "$" ~ variable.name;
			if (variable.value != null){
				res ~= " = " ~ this.translateRun(variable.value);
			}
			this.popOneLine();
			ch = ", ";
		}
		res ~= ")";
		
		if (this.is_interface){
			res ~= ";";
			this.endOperation();
		}
		else{
			res ~= "{";
			this.endOperation();
			this.levelInc();
			
			/* Childs */
			if (op_code.childs != null){
				for (int i=0; i<op_code.childs.count(); i++){
					res ~= this.s(this.translateRun(op_code.childs.item(i)));
				}
			}
			this.levelDec();
			res ~= this.s("}");
		}
		return res;
	}
	
	
	
	
	/**
	 * Class declare header
	 */
	string OpClassDeclareHeader(OpClassDeclare op_code){
		string res = "";
		
		this.beginOperation();
		if (this.is_interface){
			res ~= "interface ";
		}
		else{
			res ~= "class ";
		}
		res ~= op_code.class_name;
		if (op_code.class_extends != ""){
			res ~= " extends " ~ this.translateRun(op_code.class_extends);
		}
		/* Implements */
		if (op_code.class_implements != null and op_code.class_implements.count() > 0){
			res ~= " implements ";
			string ch = "";
			for (int i=0; i<op_code.class_implements.count(); i++){
				string name = op_code.class_implements.item(i);
				res ~= ch ~ this.getName(name);
				ch = ", ";
			}
		}
		res ~= "{";
		this.endOperation();
		this.levelInc();
		
		return res;
	}
	
	
	
	/**
	 * Class declare footer
	 */
	string OpClassDeclareVariables(OpClassDeclare op_code){
		string  res = "";
		
		for (int i=0; i<op_code.class_variables.count(); i++){
			OpAssignDeclare variable = op_code.class_variables.item(i);
			if (variable.flags != null){
				this.beginOperation();
				
				string s = "";
				if (variable.isFlag("const")){
					s ~= "const ";
				}
				else{
					if (variable.isFlag("static")){
						s ~= "static ";
					}
					if (variable.isFlag("protected")){
						s ~= "protected ";
					}
					else {
						s ~= "public ";
					}
				}
				s ~= this.OpAssignDeclare(variable);
				s ~= ";";
				
				this.endOperation();
				res ~= this.s(s);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Class declare
	 */
	string OpClassDeclare(OpClassDeclare op_code){
		string res = "";
		string s = "";
		
		/* Set current class name */
		this.current_class_name = op_code.class_name;
		this.modules.set(this.current_class_name, this.current_namespace ~ "." ~ this.current_class_name);
		
		/* Skip if declare class */
		if (op_code.isFlag("declare")){
			return "";
		}
		
		/* Header */
		res ~= this.OpClassDeclareHeader(op_code);
		
		/* Variables */
		res ~= this.OpClassDeclareVariables(op_code);
		
		/* Class functions */
		for (int i=0; i<op_code.childs.count(); i++){
			BaseOpCode op_code2 = op_code.childs.item(i);
			if (op_code2 instanceof OpFunctionDeclare){
				res ~= this.s(this.OpFunctionDeclare(op_code2));
			}
			else if (op_code2 instanceof OpPreprocessorSwitch){
				res ~= this.s(this.OpPreprocessorSwitch(op_code2));
			}
			else if (op_code2 instanceof OpComment){
				res ~= this.s(this.OpComment(op_code2));
			}
		}
		
		
		/* Footer class */
		this.levelDec();
		res ~= this.s("}");
		
		
		return res;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpInterfaceDeclare(OpInterfaceDeclare op_code){
		this.is_interface = true;
		string res = this.OpClassDeclare(op_code);
		this.is_interface = false;
		return res;
	}
	
	
	
	/** =========================== Preprocessor ========================== */
	
	bool calcPreprocessorCondition(OpPreprocessorCase op_case){
		if (op_case.condition instanceof OpIdentifier){
			if (op_case.condition.value == "PHP"){
				return true;
			}
		}
		return false;
	}
	
	
	
	/**
	 * Interface declare
	 */
	string OpPreprocessorSwitch(OpPreprocessorSwitch op_code){
		
		if (op_code.childs == null)
			return "";
		
		string res = "";
		for (int i=0; i<op_code.childs.count(); i++){
			OpPreprocessorCase op_case = op_code.childs.item(i);
			if (this.calcPreprocessorCondition(op_case)){
				res ~= this.s(op_case.value);
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Translate to language
	 * @param BaseOpCode op_code - Abstract syntax tree
	 * @returns string - The result
	 */
	string translate(BaseOpCode op_code){
		this.resetTranslator();
		string s = "<?php" ~ this.crlf;
		s ~= this.translateRun(op_code);
		return s;
	}
	

}