/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangPHP;

use Runtime.re;
use Runtime.lib;
use Runtime.BaseObject;
use BayLang.SaveOpCode;
use BayLang.Exceptions.DeclaredClass;
use BayLang.LangPHP.TranslatorPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAnnotation;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpPreprocessorIfCode;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpPreprocessorSwitch;
use BayLang.OpCodes.OpTypeIdentifier;
use BayLang.OpCodes.OpUse;


class TranslatorPHPProgram extends BaseObject
{
	TranslatorPHP translator = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(TranslatorPHP translator)
	{
		parent();
		this.translator = translator;
	}
	
	
	/**
	 * OpNamespace
	 */
	void OpNamespace(OpNamespace op_code, Collection<string> result)
	{
		this.translator.current_namespace_name = op_code.name;
		result.push("namespace ");
		result.push(this.translator.getModuleName(op_code.name));
		result.push(";");
		result.push(this.translator.newLine());
	}
	
	
	/**
	 * OpUse
	 */
	void OpUse(OpUse op_code, Collection<string> result)
	{
		Collection items = rs::split(".", op_code.name);
		string last_name = items.last();
		result.push("use ");
		result.push(this.translator.getModuleName(op_code.name));
		if (op_code.alias != "" and op_code.alias != last_name)
		{
			result.push(" as ");
			result.push(op_code.alias);
		}
		result.push(";");
	}
	
	
	/**
	 * OpAnnotation
	 */
	void OpAnnotation(OpAnnotation op_code, Collection<string> result)
	{
		result.push("@");
		this.translator.expression.OpTypeIdentifier(op_code.name, result);
		this.translator.expression.OpDict(op_code.params, result);
	}
	
	
	/**
	 * OpAssign
	 */
	void OpAssign(OpAssign op_code, Collection<string> result)
	{
		this.translator.operator.OpAssign(op_code, result);
		result.push(";");
	}
	
	
	/**
	 * OpComment
	 */
	void OpComment(OpComment op_code, Collection<string> result)
	{
		result.push("/*");
		result.push(op_code.value);
		result.push("*/");
	}
	
	
	/**
	 * OpPreprocessorIfCode
	 */
	bool OpPreprocessorIfCode(OpPreprocessorIfCode op_code, Collection<string> result)
	{
		if (op_code.condition instanceof OpIdentifier)
		{
			string name = op_code.condition.value;
			if (this.translator.preprocessor_flags.has(name))
			{
				result.push(op_code.content);
				return true;
			}
		}
		return false;
	}
	
	
	/**
	 * OpPreprocessorIfDef
	 */
	bool OpPreprocessorIfDef(
		OpPreprocessorIfDef op_code, Collection<string> result, string current_block = ""
	)
	{
		if (op_code.condition instanceof OpIdentifier)
		{
			string name = op_code.condition.value;
			if (this.translator.preprocessor_flags.has(name))
			{
				if (current_block == OpPreprocessorIfDef::KIND_PROGRAM)
				{
					this.translate(op_code.content, result, false);
				}
				else if (current_block == OpPreprocessorIfDef::KIND_CLASS_BODY)
				{
					this.translateClassBody(op_code, result, false);
				}
				else if (current_block == OpPreprocessorIfDef::KIND_OPERATOR)
				{
					this.translator.operator.translateItems(op_code.content, result, false);
				}
				return true;
			}
		}
		return false;
	}
	
	
	/**
	 * OpPreprocessorSwitch
	 */
	void OpPreprocessorSwitch(
		OpPreprocessorSwitch op_code, Collection<string> result, string current_block = ""
	)
	{
		bool last_result = false;
		for (int i=0; i<op_code.items.count(); i++)
		{
			BaseOpCode item = op_code.items.get(i);
			if (item instanceof OpPreprocessorIfCode)
			{
				if (this.OpPreprocessorIfCode(item, result))
				{
					last_result = true;
				}
			}
			else if (item instanceof OpPreprocessorIfDef)
			{
				if (this.OpPreprocessorIfDef(item, result, current_block))
				{
					last_result = true;
				}
			}
		}
		return last_result;
	}
	
	
	/**
	 * OpDeclareFunctionArg
	 */
	void OpDeclareFunctionArg(OpDeclareFunctionArg op_code, Collection<string> result)
	{
		result.push("$" ~ op_code.name);
		if (op_code.expression)
		{
			result.push(" = ");
			this.translator.expression.translate(op_code.expression, result);
		}
	}
	
	
	/**
	 * OpDeclareFunctionArgs
	 */
	void OpDeclareFunctionArgs(OpDeclareFunction op_code, Collection<string> result)
	{
		if (op_code.args and op_code.args.count() > 0)
		{
			int args_count = op_code.args.count();
			for (int i=0; i<args_count; i++)
			{
				OpDeclareFunctionArg op_code_item = op_code.args.get(i);
				this.OpDeclareFunctionArg(op_code_item, result);
				if (i < args_count - 1) result.push(", ");
			}
		}
	}
	
	
	/**
	 * OpDeclareFunction
	 */
	void OpDeclareFunction(OpDeclareFunction op_code, Collection<string> result)
	{
		if (not (op_code.pattern instanceof OpTypeIdentifier)) return;
		
		/* Comments */
		if (op_code.comments)
		{
			for (int i=0; i<op_code.comments.count(); i++)
			{
				OpComment op_code_item = op_code.comments.get(i);
				this.OpComment(op_code_item, result);
				result.push(this.translator.newLine());
			}
		}
		
		/* Function flags */
		Collection<string> flags = ["static"];
		flags = flags.filter(
			bool (string flag_name) use (op_code) =>
				op_code.flags ? op_code.flags.isFlag(flag_name) : false
		);
		result.push(rs::join(" ", flags));
		if (flags.count() > 0) result.push(" ");
		
		/* Function name */
		result.push("function " ~ op_code.name);
		
		/* Arguments */
		result.push("(");
		this.OpDeclareFunctionArgs(op_code, result);
		result.push(")");
		
		/* If interface */
		if (this.translator.current_class and
			this.translator.current_class.kind == OpDeclareClass::KIND_INTERFACE
		)
		{
			result.push(";");
			return;
		}
		
		/* If content is empty */
		if (op_code.content == null)
		{
			result.push("{");
			result.push("}");
			return;
		}
		
		/* Expression */
		bool is_expression = not (op_code.content instanceof OpItems);
		if (is_expression)
		{
			bool is_multiline = op_code.content.isMultiLine();
			if (is_multiline)
			{
				result.push(this.translator.newLine());
			}
			result.push("{");
			if (is_multiline)
			{
				this.translator.levelInc();
				result.push(this.translator.newLine());
			}
			else
			{
				result.push(" ");
			}
			result.push("return ");
			this.translator.expression.translate(op_code.content, result);
			result.push(";");
			if (is_multiline)
			{
				this.translator.levelDec();
				result.push(this.translator.newLine());
			}
			else
			{
				result.push(" ");
			}
			result.push("}");
		}
		
		/* Items */
		else
		{
			this.translator.operator.translateItems(op_code.content, result);
		}
	}
	
	
	/**
	 * Translate class item
	 */
	bool translateClassItem(BaseOpCode op_code, Collection<string> result)
	{
		if (op_code instanceof OpAnnotation)
		{
			this.OpAnnotation(op_code, result);
		}
		else if (op_code instanceof OpAssign)
		{
			result.push("var ");
			this.OpAssign(op_code, result);
		}
		else if (op_code instanceof OpComment)
		{
			this.OpComment(op_code, result);
		}
		else if (op_code instanceof OpDeclareFunction)
		{
			this.translator.class_function = op_code;
			this.OpDeclareFunction(op_code, result);
			this.translator.class_function = null;
		}
		else if (op_code instanceof OpPreprocessorIfCode)
		{
			return this.OpPreprocessorIfCode(op_code, result);
		}
		else if (op_code instanceof OpPreprocessorIfDef)
		{
			return this.OpPreprocessorIfDef(
				op_code, result, OpPreprocessorIfDef::KIND_CLASS_BODY
			);
		}
		else if (op_code instanceof OpPreprocessorSwitch)
		{
			return this.OpPreprocessorSwitch(
				op_code, result, OpPreprocessorSwitch::KIND_CLASS_BODY
			);
		}
		else
		{
			return false;
		}
		
		return true;
	}
	
	
	/**
	 * Translate class body
	 */
	void translateClassBody(
		OpDeclareClass op_code,
		Collection<string> result, bool match_brackets = true
		)
	{
		/* Begin bracket */
		if (match_brackets)
		{
			result.push("{");
			this.translator.levelInc();
		}
		
		/* Class body items */
		BaseOpCode prev_op_code = null;
		bool next_new_line = true;
		for (int i=0; i<op_code.content.count(); i++)
		{
			Collection item_result = [];
			BaseOpCode op_code_item = op_code.content.get(i);
			if (next_new_line)
			{
				int lines = 1;
				if (prev_op_code)
				{
					lines = op_code_item.getOffset().get("start") -
						prev_op_code.getOffset().get("end");
				}
				for (int j=0; j<lines; j++) item_result.push(this.translator.newLine());
			}
			next_new_line = this.translateClassItem(op_code_item, item_result);
			if (rs::trim(rs::join("", item_result)) != "") result.appendItems(item_result);
			prev_op_code = op_code_item;
		}
		
		/* Class init */
		if (op_code instanceof OpDeclareClass)
		{
			this.translateClassInit(op_code, result);
		}
		
		/* End bracket */
		if (match_brackets)
		{
			this.translator.levelDec();
			result.push(this.translator.newLine());
			result.push("}");
		}
	}
	
	
	/**
	 * Translate class init
	 */
	void translateClassInit(OpDeclareClass op_code, Collection<string> result)
	{
		if (op_code.kind == OpDeclareClass::KIND_INTERFACE) return;
		
		result.push(this.translator.newLine(op_code.content.count() > 0 ? 3 : 1));
		result.push("/* ========= Class init functions ========= */");
		result.push(this.translator.newLine());
		result.push("static function getClassName(){ " ~
			"return \"" ~ this.translator.current_class_name ~ "\"; }");
		result.push(this.translator.newLine());
		result.push("static function getMethodsList(){ return []; }");
		result.push(this.translator.newLine());
		result.push("static function getMethodInfoByName($field_name){ return null; }");
	}
	
	
	/**
	 * Translate class
	 */
	void translateClass(OpDeclareClass op_code, Collection<string> result)
	{
		if (op_code.is_abstract) return false;
		
		/* Current class */
		this.translator.current_class = op_code;
		
		/* Class kind */
		if (op_code.kind == OpDeclareClass::KIND_CLASS)
		{
			result.push("class ");
		}
		else if (op_code.kind == OpDeclareClass::KIND_INTERFACE)
		{
			result.push("interface ");
		}
		
		/* Class name */
		this.translator.current_class_name = this.translator.current_namespace_name ~ "." ~
			op_code.name;
		this.translator.uses.set(op_code.name, this.translator.current_class_name);
		result.push(op_code.name.entity_name.items.last().value);
		
		/* Template */
		if (op_code.template)
		{
			this.translator.expression.OpTypeTemplate(op_code.template, result);
		}
		
		/* Extends */
		if (op_code.class_extends)
		{
			result.push(" extends ");
			this.translator.expression.OpTypeIdentifier(op_code.class_extends, result);
		}
		
		/* Implements */
		if (op_code.class_implements and op_code.class_implements.count() > 0)
		{
			result.push(" implements ");
			int items_count = op_code.class_implements.count();
			for (int i=0; i<items_count; i++)
			{
				OpTypeIdentifier op_code_item = op_code.class_implements.get(i);
				this.translator.expression.OpTypeIdentifier(op_code_item, result);
				if (i < items_count - 1) result.push(", ");
			}
		}
		
		result.push(this.translator.newLine());
		this.translateClassBody(op_code, result);
		this.translator.current_class = null;
	}
	
	
	/**
	 * Translate item
	 */
	void translateItem(BaseOpCode op_code, Collection<string> result)
	{
		if (op_code instanceof OpDeclareClass)
		{
			this.translateClass(op_code, result);
		}
		else if (op_code instanceof OpNamespace)
		{
			this.OpNamespace(op_code, result);
		}
		else if (op_code instanceof OpUse)
		{
			this.OpUse(op_code, result);
		}
		else if (op_code instanceof OpPreprocessorIfCode)
		{
			return this.OpPreprocessorIfCode(op_code, result);
		}
		else if (op_code instanceof OpPreprocessorIfDef)
		{
			return this.OpPreprocessorIfDef(
				op_code, result, OpPreprocessorIfDef::KIND_PROGRAM
			);
		}
		else if (op_code instanceof OpPreprocessorSwitch)
		{
			return this.OpPreprocessorSwitch(
				op_code, result, OpPreprocessorSwitch::KIND_PROGRAM
			);
		}
		else
		{
			this.translator.last_semicolon = false;
			bool res = this.translator.operator.translateItem(op_code, result);
			this.translator.operator.addSemicolon(op_code, result);
			return res;
		}
		return true;
	}
	
	
	/**
	 * Translate items
	 */
	void translateItems(Collection<BaseOpCode> items, Collection<string> result)
	{
		int op_code_use_count = 0;
		bool prev_op_code_use = false;
		bool last_result = false;
		for (int i=0; i<items.count(); i++)
		{
			BaseOpCode op_code_item = items.get(i);
			if (op_code_item instanceof OpDeclareClass)
			{
				if (op_code_item.is_abstract) continue;
				if (op_code_use_count > 0)
				{
					result.push(this.translator.newLine(op_code_use_count > 1 ? 3 : 2));
				}
				else
				{
					result.push(this.translator.newLine(last_result ? 3 : 2));
				}
			}
			else if (last_result) result.push(this.translator.newLine());
			if (op_code_item instanceof OpUse) op_code_use_count++;
			else op_code_use_count = 0;
			last_result = this.translateItem(items.get(i), result);
		}
	}
	
	
	/**
	 * Translate
	 */
	void translate(BaseOpCode op_code, Collection<string> result, bool use_php = true)
	{
		if (use_php)
		{
			result.push("<?php");
			result.push(this.translator.newLine());
		}
		this.translateItems(op_code.items, result);
	}
}