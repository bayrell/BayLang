/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2023 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangPHP;

use Runtime.lib;
use Runtime.re;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangBay.ParserBayHtml;
use Bayrell.Lang.LangPHP.TranslatorPHP;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAssign;
use Bayrell.Lang.OpCodes.OpCall;
use Bayrell.Lang.OpCodes.OpComment;
use Bayrell.Lang.OpCodes.OpFor;
use Bayrell.Lang.OpCodes.OpHtmlAttribute;
use Bayrell.Lang.OpCodes.OpHtmlContent;
use Bayrell.Lang.OpCodes.OpHtmlItems;
use Bayrell.Lang.OpCodes.OpHtmlTag;
use Bayrell.Lang.OpCodes.OpHtmlValue;
use Bayrell.Lang.OpCodes.OpIf;
use Bayrell.Lang.OpCodes.OpString;
use Bayrell.Lang.OpCodes.OpWhile;


static class TranslatorPHPHtml
{
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::strtoupper(ch1);
		return tag_name != "" and (ch1 == "{" or ch1 == ch2);
	}
	
	
	/**
	 * Is single tag
	 */
	pure string isSingleTag(string tag_name)
	{
		Dict tokens = ["img", "meta", "input", "link", "br"];
		if (tokens.indexOf(tag_name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Translator html component
	 */
	pure list<TranslatorPHP, string> OpHtmlComponent(TranslatorPHP t, OpHtmlTag op_code)
	{
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		string content = "";
		string v_model = "null";
		string tag_name = op_code.tag_name;
		string module_name = "";
		
		if (op_code.op_code_name)
		{
			list res = t.expression::Expression(t, op_code.op_code_name);
			t = res[0]; module_name = res[1];
		}
		else
		{
			module_name = t.expression::toString(t.expression::findModuleName(t, op_code.tag_name));
		}
		
		content ~= t.s("/* Component '" ~ tag_name ~ "' */");
		content ~= t.s(var_name~"_params = [];");
		
		BaseOpCode attr_name = op_code.attrs.findItem( lib::equalAttr("key", "@name") );
		BaseOpCode attr_bind = op_code.attrs.findItem( lib::equalAttr("key", "@bind") );
		BaseOpCode attr_model = op_code.attrs.findItem( lib::equalAttr("key", "@model") );
		BaseOpCode attr_global = op_code.attrs.findItem( lib::equalAttr("key", "@global") );
		
		if (attr_name)
		{
			list res = t.expression::Expression(t, attr_name.value); t = res[0];
			v_model = "\\Runtime\\rs::_concat_attrs($ctx, $model_path, " ~ res[1] ~ ")";
		}
		else if (attr_bind)
		{
			list res = t.expression::Expression(t, attr_bind.value); t = res[0];
			v_model = "\\Runtime\\rs::_concat_attrs($ctx, $model_path, " ~ res[1] ~ ")";
		}
		else if (attr_model)
		{
			list res = t.expression::Expression(t, attr_model.value); t = res[0];
			v_model = "\\Runtime\\rs::_concat_attrs($ctx, $model_path, " ~ res[1] ~ ")";
		}
		else if (attr_global)
		{
			list res = t.expression::Expression(t, attr_global.value); t = res[0];
			v_model = "\\Runtime\\rs::_concat_attrs($ctx, [], " ~ res[1] ~ ")";
		}
		
		for (int i=0; i<op_code.attrs.count(); i++)
		{
			OpHtmlAttribute attr = op_code.attrs.item(i);
			
			if (attr.key == "@bind") continue;
			if (attr.key == "@name") continue;
			if (attr.key == "@model") continue;
			if (attr.key == "@global") continue;
			if (attr.key == "@model_path") continue;
			if (attr.key == "@ref") continue;
			
			if (attr.is_spread)
			{
				content ~= t.s("if($"~attr.value.value~"!=null)"~var_name~"_params = array_merge("~var_name~"_params,$"~attr.value.value~"->_map);");
			}
			else
			{
				list res = static::OpHtmlAttr(t, attr);
				t = res[0]; string attr_value = res[1];
				content ~= t.s(var_name~"_params[" ~ t.expression::toString(attr.key) ~ "] = " ~ attr_value ~ ";");
			}
		}
		
		content ~= t.s(var_name~"_content = [];");
		fn f = rtl::method(static::getClassName(), "OpHtmlItems");
		list res = t::saveOpCodeCall(t, f, [op_code.items, var_name~"_content"]); t = res[0];
		content ~= res[1];
		
		if (op_code.op_code_name)
		{
			content ~= t.s(var_name ~ "_name = \\Runtime\\rtl::find_class(" ~ module_name ~ ");");
			content ~= t.s(var_name ~ " = [" ~ var_name ~
				"_name::render($ctx, $layout," ~ v_model ~
				",\\Runtime\\Dict::from(" ~ var_name ~ "_params)," ~ var_name ~ "_content)];")
			;
		}
		else
		{
			content ~= t.s(var_name ~ "_name = \\Runtime\\rtl::find_class(" ~ module_name ~ ");");
			content ~= t.s(var_name ~ " = [" ~ var_name ~
				"_name::render($ctx, $layout," ~ v_model ~
				",\\Runtime\\Dict::from(" ~ var_name ~ "_params)," ~ var_name ~ "_content)];")
			;
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
	
	/**
	 * Translator html attr
	 */
	pure list<TranslatorPHP, string> OpHtmlAttr(TranslatorPHP t, OpHtmlAttribute attr)
	{
		if (attr.value instanceof OpString)
		{
			return [t, t.expression::toString(attr.value.value)];
		}
		if (attr.value instanceof OpHtmlValue)
		{
			if (attr.value.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, attr.value.value); t = res[0]; 
				return [t, res[1]];
			}
			else if (attr.value.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, attr.value.value); 
				t = res[0]; string value = res[1];
				value = "\\Runtime\\rtl::json_encode($ctx, " ~ value ~ ")";
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, attr.value); t = res[0]; string value = res[1];
		value = t.o(value, res[0].opcode_level, 13);
		
		return [t, value];
	}
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorPHP, string> OpHtmlAttrs(TranslatorPHP t, Collection<OpHtmlAttribute> attrs)
	{
		return [t, "null"];
		
		Vector<string> attr_class = new Vector<string>();
		string attr_s = "";
		string attr_key_value = "";
		bool has_attr_key = false;
		
		Collection<string> res_attrs = attrs.map
		(
			string (OpHtmlAttribute attr) use (t, attr_class, attr_key_value, has_attr_key)
			{
				if (attr.is_spread) return "";
				
				string attr_key = attr.key;
				string attr_value = "";
				
				/*
				if (attr_key == "@class")
				{
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_class.pushValue( "\\Runtime\\rs::_get_css_name($ctx, " ~
						attr_value ~ ")" );
					
					if (not has_attr_key and attr.value instanceof OpString)
					{
						var arr = rs::split(" ", attr.value.value);
						attr_key_value = t.expression::toString(arr[0]);
						has_attr_key = true;
					}
					
					return "";
				}
				*/
				if (attr_key == "class")
				{
					t <= opcode_level <= 1000;
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_class.pushValue(attr_value);
					
					if (not has_attr_key and attr.value instanceof OpString)
					{
						var arr = rs::split(" ", attr.value.value);
						attr_key_value = t.expression::toString(arr[0]);
						has_attr_key = true;
					}
					
					return "";
				}
				else if (attr_key == "@key")
				{
					has_attr_key = true;
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_key_value = attr_value;
					return "";
				}
				
				if (attr_key == "@bind" or attr_key == "@name")
				{
					attr_key = "value";
					list res = t.expression::Expression(t, attr.value); t = res[0];
					attr_value = "\\Runtime\\rtl::attr($ctx, $model, " ~ res[1] ~ ", null)";
				}
				
				string ch = rs::substr(attr_key, 0, 1);
				if (ch == "@") return "";
				
				if (attr_value == "")
				{
					list res = static::OpHtmlAttr(t, attr);
					t = res[0]; attr_value = res[1];
				}
				
				return attr_key ~ "=\"'.\\Runtime\\rs::_escape_attr($ctx, " ~ attr_value ~ ").'\"";
			}
		);
		res_attrs = res_attrs.filter( bool (string s) => s != "" );
		if (attr_class.count() > 0)
		{
			attr_class.pushValue( "\\Runtime\\rs::getCssHash($ctx, static::getClassName())" );
			/*attr_class.pushValue( t.expression::toString("h-" ~
				ParserBayHtml::getCssHash(t.current_class_full_name)) );*/
			res_attrs = res_attrs.pushIm
			(
				"class=" ~ "\"'." ~ rs::join(".\" \".", attr_class) ~ ".'\""
			);
		}
		if (res_attrs.count() > 0)
		{
			attr_s = " " ~ rs::join(" ", res_attrs);
		}
		
		/* Add spreads */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute attr = attrs[i];
			if (not attr.is_spread) continue;
			attr_s ~= " ' . \\Runtime\\rs::_join_attrs($ctx, $" ~ attr.value.value ~ ") . '";
		}
		
		return [t, attr_s];
	}
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorPHP, string> OpHtmlTag(TranslatorPHP t, OpHtmlTag op_code, string var_name)
	{
		string content = "";
		
		if (op_code instanceof OpHtmlContent)
		{
			string item_value = t.expression::toString(op_code.value);
			content ~= t.s("/* Text */");
			content ~= t.s("static::_e(" ~ var_name ~ ", null, null, " ~ item_value ~ ");");
		}
		else if (op_code instanceof OpHtmlValue)
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			list res = t.expression::Expression(t, op_code.value);
			t = res[0]; string item_value = res[1];
			
			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				content ~= t.s("/* Raw */");
				content ~= t.s("static::_e(" ~ var_name ~ ", null, null, " ~
					"new Runtime.RawString(" ~ item_value ~ "));");
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				content ~= t.s("/* Text */");
				item_value = "\\Runtime\\rtl::json_encode(" ~ item_value ~ ")";
				content ~= t.s("static::_e(" ~ var_name ~ ", null, null, " ~ item_value ~ ");");
			}
		}
		else if (op_code instanceof OpHtmlTag)
		{
			string new_var_name = "";
			list res = t::incSaveOpCode(t); t = res[0]; new_var_name = res[1];
			
			bool has_childs = (op_code.items != null) and
				(op_code.items.items != null) and
				(op_code.items.items.count() > 0)
			;
			bool is_component = static::isComponent(op_code.tag_name);
			
			Collection<OpHtmlAttribute> op_code_attrs = op_code.attrs.filter(
				bool (OpHtmlAttribute attr) => attr.key != "@render"
			);
			
			list res = static::OpHtmlAttrs(t, op_code_attrs);
			t = res[0]; string attrs = res[1];
			
			if (op_code.tag_name == "")
			{
			}
			else if (is_component)
			{
				string tag_name = "";
				if (op_code.op_code_name)
				{
					list res = t.expression::Expression(t, op_code.op_code_name);
					t = res[0]; tag_name = res[1];
				}
				else
				{
					tag_name = t.expression::toString(
						t.expression::findModuleName(t, op_code.tag_name)
					);
				}
				if (has_childs)
				{
					list res = static::OpHtmlItemsAsFunction(t, op_code.items);
					t = res[0]; string f = res[1];
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s(new_var_name ~ " = " ~
						"static::_e(" ~ var_name ~ ", " ~ tag_name ~ ", " ~ attrs ~ ", " ~ f ~ ");"
					);
					has_childs = false;
				}
				else
				{
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s(new_var_name ~ " = " ~
						"static::_e(" ~ var_name ~ ", " ~ tag_name ~ ", " ~ attrs ~ ");");
				}
			}
			else
			{
				content ~= t.s("/* Element '" ~ op_code.tag_name ~ "' */");
				string tag_name = t.expression::toString(op_code.tag_name);
				content ~= t.s(new_var_name ~ " = " ~
					"static::_e(" ~ var_name ~ ", " ~ tag_name ~ ", " ~ attrs ~ ");");
			}
			
			if (has_childs)
			{
				list res = static::OpHtmlItems(t, op_code.items, new_var_name, true);
				t = res[0]; content ~= res[1];
			}
		}
		else
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			string item_value = "";
			
			if (op_code instanceof OpCall)
			{
				list res = t.expression::OpCall(t, op_code);
				t = res[0]; item_value ~= res[1];
			}
			else
			{
				list res = t.expression::Expression(t, op_code);
				t = res[0]; item_value = res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			
			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			content ~= t.s("/* Text */");
			content ~= t.s("static::_e(" ~ var_name ~ ", null, null, " ~ item_value ~ ");");
		}
		
		return [t, content];
	}
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorPHP, string> OpHtmlExpression
		(TranslatorPHP t, OpHtmlItems op_code)
	{
		string content = "";
		content ~= t.s("$__v = [];");
		list res = static::OpHtmlItems(t, op_code, "$__v", true);
		t = res[0];
		content ~= res[1];
		content ~= t.s2("");
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"content": content,
			}
		);
		t = res[0];
		
		return [t, "$__v"];
	}
	
	
	/**
	 * Translator html items as function
	 */
	pure list<TranslatorPHP, string> OpHtmlItemsAsFunction
		(TranslatorPHP t, OpHtmlItems op_code)
	{
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		t <= save_op_code_inc <= 0;
		
		string content = "function (){";
		t = t.levelInc();
		
		list res = static::OpHtmlExpression(t, op_code);
		t = res[0];
		
		/* Output save op code */
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= t.s("return " ~ res[1] ~ ";");
		
		t = t.levelDec();
		content ~= t.s("}");
		
		/* Restore save op codes */
		t <= save_op_codes <= save_op_codes;
		t <= save_op_code_inc <= save_op_code_inc;
		
		return [t, content];
	}
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorPHP, string> OpHtmlItems(
		TranslatorPHP t, OpHtmlItems op_code, string var_name = "", bool first_space = false
	)
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		string save_html_var_name = t.html_var_name;
		t <= html_var_name <= var_name;
		
		string content = "";
		bool next_space = true;
		fn add_space = void (int i) use (t, content, next_space, first_space)
		{
			if (i > 0 and next_space) content ~= t.s2("");
			if (i == 0 and first_space) content ~= t.s2("");
			if (not next_space) next_space = true;
		};
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			string item_value = "";
			string op_content = "";
			
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			int save_op_code_inc = t.save_op_code_inc;
			
			if (item instanceof OpAssign)
			{
				list res = t.operator::OpAssign(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpComment)
			{
				add_space(i);
				list res = t.operator::OpComment(t, item);
				t = res[0]; op_content ~= res[1];
				next_space = false;
			}
			else if (item instanceof OpFor)
			{
				add_space(i);
				list res = t.operator::OpFor(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpIf)
			{
				add_space(i);
				list res = t.operator::OpIf(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpWhile)
			{
				add_space(i);
				list res = t.operator::OpWhile(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else
			{
				add_space(i);
				list res = static::OpHtmlTag(t, item, var_name);
				t = res[0]; op_content ~= res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			if (op_content != "") content ~= op_content;
			
			/* Restore save op codes */
			t <= save_op_codes <= save_op_codes;
			t <= save_op_code_inc <= save_op_code_inc;
		}
		
		t <= html_var_name <= save_html_var_name;
		
		return [t, content];
	}
}