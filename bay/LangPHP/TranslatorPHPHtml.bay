/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangPHP;

use Runtime.lib;
use Runtime.re;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangPHP.TranslatorPHP;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpHtmlAttribute;
use Bayrell.Lang.OpCodes.OpHtmlContent;
use Bayrell.Lang.OpCodes.OpHtmlItems;
use Bayrell.Lang.OpCodes.OpHtmlTag;
use Bayrell.Lang.OpCodes.OpHtmlValue;
use Bayrell.Lang.OpCodes.OpString;


static class TranslatorPHPHtml
{
	
	/**
	 * Is component
	 */
	lambda bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::strtoupper(ch1);
		return ch1 == "{" or ch1 == ch2;
	}
	
	
	
	/**
	 * Is single tag
	 */
	lambda string isSingleTag(string tag_name)
	{
		Dict tokens = ["img", "meta", "input", "link", "br"];
		if (tokens.indexOf(tag_name) == -1) return false;
		return true;
	}
	
	
	
	/**
	 * Translator html attr
	 */
	lambda list<TranslatorPHP, string> OpHtmlAttr(TranslatorPHP t, OpHtmlAttribute attr)
	{
		if (attr.value instanceof OpHtmlValue)
		{
			if (attr.value.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, attr.value.value); t = res[0]; 
				return [t, res[1]];
			}
			else if (attr.value.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, attr.value.value); 
				t = res[0]; string value = res[1];
				value = "\\Runtime\\Web\\RenderHelper::json_encode($ctx, " ~ value ~ ")";
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, attr.value); t = res[0]; string value = res[1];
		return [t, value];
	}
	
	
	
	/**
	 * Translator html component
	 */
	lambda list<TranslatorPHP, string> OpHtmlComponent(TranslatorPHP t, OpHtmlTag op_code)
	{
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		string content = "";
		string v_model = "null";
		string tag_name = op_code.tag_name;
		string module_name = "";
		
		if (op_code.op_code_name)
		{
			list res = t.expression::Expression(t, op_code.op_code_name);
			t = res[0]; module_name = res[1];
		}
		else
		{
			module_name = t.expression::toString(t.expression::findModuleName(t, op_code.tag_name));
		}
		
		BaseOpCode model = op_code.attrs.findItem( lib::equalAttr("key", "@model") );
		if (model)
		{
			list res = t.expression::Expression(t, model.value); t = res[0]; 
			v_model = res[1];
		}
		else
		{
			BaseOpCode bind = op_code.attrs.findItem( lib::equalAttr("key", "@bind") );
			if (bind)
			{
				list res = t.expression::Expression(t, bind.value); t = res[0];
				v_model = "$model[" ~ res[1] ~ "]";
			}
		}
		
		content ~= t.s("/* Component '" ~ tag_name ~ "' */");
		content ~= t.s(var_name~"_params = [];");
		for (int i=0; i<op_code.attrs.count(); i++)
		{
			OpHtmlAttribute attr = op_code.attrs.item(i);
			
			if (attr.key == "@bind") continue;
			if (attr.key == "@model") continue;
			list res = static::OpHtmlAttr(t, attr);
			t = res[0]; string attr_value = res[1];

			content ~= t.s(var_name~"_params[" ~ t.expression::toString(attr.key) ~ "] = " ~ attr_value ~ ";");
		}
		
		content ~= t.s(var_name~"_content = \"\";");
		fn f = rtl::method(static::getCurrentClassName(), "OpHtmlItems");
		list res = t::saveOpCodeCall(t, f, [op_code.items, var_name~"_content"]); t = res[0];
		content ~= res[1];
		/*content ~= t.s(var_name~"_content .= " ~ res[2] ~ ";");*/
		
		if (op_code.op_code_name)
		{
			content ~= t.s(var_name ~ "_name = \\Runtime\\rtl::find_class(" ~ module_name ~ ");");
			content ~= t.s(var_name ~ " = " ~ var_name ~ "_name::render($ctx, $layout," ~ v_model ~
				",\\Runtime\\Dict::from(" ~ var_name ~ "_params)," ~ var_name ~ "_content,$control);")
			;
		}
		else
		{
			content ~= t.s(var_name ~ "_name = \\Runtime\\rtl::find_class(" ~ module_name ~ ");");
			content ~= t.s(var_name ~ " = " ~ var_name ~ "_name::render($ctx, $layout," ~ v_model ~
				",\\Runtime\\Dict::from(" ~ var_name ~ "_params)," ~ var_name ~ "_content,$control);")
			;
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
	
	
	/**
	 * Translator html template
	 */
	lambda list<TranslatorPHP, string> OpHtmlTag(TranslatorPHP t, OpHtmlTag op_code)
	{
		if (static::isComponent(op_code.tag_name))
		{
			return static::OpHtmlComponent(t, op_code);
		}
		
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		string attr_s = "";
		Collection<string> attrs = op_code.attrs.map
		(
			string (OpHtmlAttribute attr) use (t, op_code)
			{
				string attr_value = "";
				string key = attr.key;
				if (key == "@class" and attr.value instanceof OpString)
				{
					return "class=" ~
						"\"'.static::getCssName($ctx, " ~ t.expression::toString(attr.value.value) ~ ").'\""
					;
				}
				if (key == "@model" and op_code.tag_name == "input") key = "value";
				if (key == "@bind" and op_code.tag_name == "input")
				{
					list res = t.expression::Expression(t, attr.value); t = res[0];
					attr_value = "$model[" ~ res[1] ~ "]";
					key = "value";
				}
				
				string ch = rs::substr(key, 0, 1);
				if (ch == "@") return "";
				
				if (attr_value == "")
				{
					list res = static::OpHtmlAttr(t, attr);
					t = res[0]; attr_value = res[1];
				}
				
				return key ~ "=\"'.\\Runtime\\Web\\RenderHelper::escapeAttr($ctx, " ~ attr_value ~ ").'\"";
			}
		);
		attrs = attrs.filter( bool (string s) => s != "" );
		if (attrs.count() > 0)
		{
			attr_s = " " ~ rs::join(" ", attrs);
		}
		
		string content = "/* Element '" ~ op_code.tag_name ~ "' */";
		if (static::isSingleTag(op_code.tag_name))
		{
			content ~= t.s(var_name ~ " = '<" ~ op_code.tag_name ~ attr_s ~ " />';");
		}
		else
		{
			content ~= t.s(var_name ~ " = '<" ~ op_code.tag_name ~ attr_s ~ ">';");
			bool flag_value = false;
			if (op_code.tag_name == "textarea")
			{
				BaseOpCode model_attr = op_code.attrs.findItem( lib::equalAttr("key", "@model") );
				if (model_attr != null)
				{
					list res = static::OpHtmlAttr(t, model_attr);
					t = res[0]; string attr_value = res[1];
					if (model_attr instanceof OpHtmlValue)
					{
						content ~= t.s(var_name ~ " .= " ~ attr_value ~ ";");
					}
					else
					{
						content ~= t.s(var_name ~ " .= \\Runtime\\Web\\RenderHelper::escapeHtml($ctx, " ~
							attr_value ~ ");");
					}
					flag_value = true;
				}
			}			
			if (not flag_value)
			{
				fn f = rtl::method(static::getCurrentClassName(), "OpHtmlItems");
				list res = t::saveOpCodeCall(t, f, [op_code.items, var_name]); t = res[0];
				content ~= res[1];
			}
			content ~= t.s(var_name ~ " .= '</" ~ op_code.tag_name ~ ">';");
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
	
	
	/**
	 * Translator html items
	 */
	lambda list<TranslatorPHP, string> OpHtmlItems(TranslatorPHP t, OpHtmlItems op_code, string var_name = "")
	{
		if (op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		string content = "";
		if (var_name == "")
		{
			list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
			content ~= t.s(var_name ~ " = \"\";");
		}
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			string item_value = "";
			
			if (item instanceof OpHtmlContent)
			{
				item_value = t.expression::toString(item.value);
			}
			else if (item instanceof OpHtmlTag)
			{
				list res = static::OpHtmlTag(t, item); t = res[0]; item_value = res[1];
			}
			else if (item instanceof OpHtmlValue)
			{
				if (item.kind == OpHtmlValue::KIND_RAW)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
				}
				else if (item.kind == OpHtmlValue::KIND_HTML)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					item_value = "\\Runtime\\Web\\RenderHelper::toHtml($ctx, " ~ item_value ~ ")";
				}
				else if (item.kind == OpHtmlValue::KIND_JSON)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					item_value = "\\Runtime\\Web\\RenderHelper::json_encode($ctx, " ~ item_value ~ ")";
				}
			}
			else
			{
				list res = t.expression::Expression(t, item); 
				t = res[0]; item_value = res[1];
				item_value = "\\Runtime\\Web\\RenderHelper::escapeHtml($ctx, " ~ item_value ~ ")";
			}
			
			content ~= t.s(var_name ~ " .= " ~ item_value ~ ";");
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, "new \\Runtime\\RawString(" ~ var_name ~ ")"];
	}
	
}