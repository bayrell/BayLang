/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangPHP;

use Runtime.lib;
use Runtime.re;
use BayLang.SaveOpCode;
use BayLang.LangBay.ParserBayHtml;
use BayLang.LangPHP.TranslatorPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpHtmlValue;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpWhile;


static class TranslatorPHPHtml
{
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::upper(ch1);
		return tag_name != "" and (ch1 == "{" or ch1 == ch2) and tag_name != "Teleport";
	}
	
	
	/**
	 * Is single tag
	 */
	pure string isSingleTag(string tag_name)
	{
		Dict tokens = ["img", "meta", "input", "link", "br"];
		if (tokens.indexOf(tag_name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Translator html attr
	 */
	pure list<TranslatorPHP, string> OpHtmlAttr(TranslatorPHP t, OpHtmlAttribute attr)
	{
		BaseOpCode op_code = attr.value;
		
		if (op_code instanceof OpString)
		{
			return [t, t.expression::toString(op_code.value)];
		}
		if (op_code instanceof OpHtmlValue)
		{
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, op_code.value);
				t = res[0]; string value = res[1];
				return [t, value];
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, op_code.value); 
				t = res[0]; string value = res[1];
				value = "\\Runtime\\rtl::json_encode(" ~ value ~ ")";
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, op_code);
		t = res[0]; string value = res[1];
		
		value = t.o(value, res[0].opcode_level, 13);
		
		return [t, value];
	}
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorPHP, string> OpHtmlAttrs(TranslatorPHP t, Collection<OpHtmlAttribute> attrs)
	{
		Vector<string> attr_class = new Vector<string>();
		string attr_s = "null";
		string attr_key_value = "";
		string attr_elem_name = "";
		bool has_attr_key = false;
		
		Vector<string> res_attrs = new Vector();
		
		for (int attrs_i = 0; attrs_i<attrs.count(); attrs_i++)
		{
			OpHtmlAttribute attr = attrs[attrs_i];
			
			if (attr.is_spread) continue;
			
			string attr_key = attr.key;
			string ch = rs::substr(attr_key, 0, 1);
			if (
				ch == "@" and 
				attr_key != "@model" and
				attr_key != "@global"
			)
			{
				continue;
			}
			
			list res = static::OpHtmlAttr(t, attr);
			t = res[0]; string attr_value = res[1];
			
			if (attr_key == "class")
			{
				attr_class.push(attr_value);
				
				if (attr_elem_name == "" and attr.value instanceof OpString)
				{
					var arr = rs::split(" ", attr.value.value);
					attr_elem_name = t.expression::toString(arr[0]);
				}
				
				continue;
			}
			else if (attr_key == "@global")
			{
				attr_key = "model";
				attr_value = "$this->_model(" ~ attr_value ~ ", true)";
			}
			else if (attr_key == "@model")
			{
				attr_key = "model";
				attr_value = "$this->_model(" ~ attr_value ~ ")";
			}
			
			res_attrs.push
			(
				t.expression::toString(attr_key) ~ " => " ~ attr_value,
			);
		}
		
		res_attrs = res_attrs.filter( bool (string s) => s != "" );
		if (attr_class.count() > 0)
		{
			res_attrs.push
			(
				"\"class\" => " ~ "$this->_class_name([" ~ rs::join(", ", attr_class) ~ "])"
			);
		}
		
		if (res_attrs.count() > 0)
		{
			attr_s = "[" ~ rs::join(",", res_attrs) ~ "]";
		}
		else attr_s = "[]";
		
		/* Add spreads */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute attr = attrs[i];
			if (not attr.is_spread) continue;
			attr_s = "$this->_merge_attrs(" ~ attr_s ~ ", $" ~ attr.value.value ~ ")";
		}
		
		return [t, attr_s];
	}
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorPHP, string> OpHtmlTag(TranslatorPHP t, OpHtmlTag op_code, string var_name)
	{
		string content = "";
		
		if (op_code instanceof OpHtmlContent)
		{
			string item_value = t.expression::toString(op_code.value);
			content ~= t.s("/* Text */");
			content ~= t.s("$this->_t(" ~ var_name ~ ", " ~ item_value ~ ");");
		}
		else if (op_code instanceof OpHtmlValue)
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			list res = t.expression::Expression(t, op_code.value);
			t = res[0]; string item_value = res[1];
			
			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			if (op_code.kind == OpHtmlValue::KIND_RAW)
			{
				content ~= t.s("/* Raw */");
				content ~= t.s("$this->_t(" ~ var_name ~ ", " ~
					"new \\Runtime\\RawString(" ~ item_value ~ "));");
			}
			else if (op_code.kind == OpHtmlValue::KIND_JSON)
			{
				content ~= t.s("/* Text */");
				item_value = "\\Runtime\\rtl::json_encode(" ~ item_value ~ ")";
				content ~= t.s("$this->_t(" ~ var_name ~ ", " ~ item_value ~ ");");
			}
		}
		else if (op_code instanceof OpHtmlTag)
		{
			string new_var_name = "";
			list res = t::incSaveOpCode(t); t = res[0]; new_var_name = res[1];
			
			bool has_childs = (op_code.items != null) and
				(op_code.items.items != null) and
				(op_code.items.items.count() > 0)
			;
			bool is_component = static::isComponent(op_code.tag_name);
			
			Collection<OpHtmlAttribute> op_code_attrs = op_code.attrs.filter(
				bool (OpHtmlAttribute attr) => attr.key != "@render"
			);
			
			list res = static::OpHtmlAttrs(t, op_code_attrs);
			t = res[0]; string attrs = res[1];
			
			if (op_code.tag_name == "")
			{
			}
			else if (is_component)
			{
				string tag_name = "";
				if (op_code.op_code_name)
				{
					list res = t.expression::Expression(t, op_code.op_code_name);
					t = res[0]; tag_name = res[1];
				}
				else
				{
					tag_name = t.expression::toString(
						t.expression::findModuleName(t, op_code.tag_name)
					);
				}
				if (has_childs)
				{
					list res = static::OpHtmlItemsAsFunction(t, op_code.items);
					t = res[0]; string f = res[1];
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("$this->_c(" ~ var_name ~ ", " ~ tag_name ~
						", " ~ attrs ~ ", " ~ f ~ ");"
					);
					has_childs = false;
				}
				else
				{
					content ~= t.s("/* Component '" ~ op_code.tag_name ~ "' */");
					content ~= t.s("$this->_c(" ~ var_name ~ ", " ~ tag_name ~
						", " ~ attrs ~ ");"
					);
				}
			}
			else
			{
				string tag_name = t.expression::toString(op_code.tag_name);
				if (has_childs)
				{
					content ~= t.s("/* Element '" ~ op_code.tag_name ~ "' */");
					content ~= t.s(new_var_name ~ " = new \\Runtime\\Vector();")
					
					list res = static::OpHtmlItems(t, op_code.items, new_var_name, true);
					t = res[0]; content ~= res[1];
					
					content ~= t.s2("");
					if (op_code.tag_name == "Teleport")
					{
						content ~= t.s("/* Teleport */");
						content ~= t.s("$this->_teleport(" ~ var_name ~
							", " ~ attrs ~ ", " ~ new_var_name ~ ");");
					}
					else
					{
						content ~= t.s("/* Element '" ~ op_code.tag_name ~ "' */");
						content ~= t.s("$this->_e(" ~ var_name ~ ", " ~ tag_name ~
							", " ~ attrs ~ ", " ~ new_var_name ~ ");"
						);
					}
				}
				else
				{
					if (op_code.tag_name == "Teleport")
					{
						content ~= t.s("/* Teleport */");
						content ~= t.s("$this->_teleport(" ~ var_name ~ ", " ~ attrs ~ ");");
					}
					else
					{
						content ~= t.s("/* Element '" ~ op_code.tag_name ~ "' */");
						content ~= t.s("$this->_e(" ~ var_name ~ ", " ~ tag_name ~
							", " ~ attrs ~ ");"
						);
					}
				}
			}
		}
		else
		{
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			/*int save_op_code_inc = t.save_op_code_inc;*/
			
			string item_value = "";
			
			if (op_code instanceof OpCall)
			{
				list res = t.expression::OpCall(t, op_code);
				t = res[0]; item_value ~= res[1];
				if (not op_code.is_html)
				{
					item_value = "$this->_escape(" ~ item_value ~ ")";
				}
			}
			else
			{
				list res = t.expression::Expression(t, op_code);
				t = res[0]; item_value = res[1];
				item_value = "$this->_escape(" ~ item_value ~ ")";
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			
			/* Restore op codes */
			t <= save_op_codes <= save_op_codes;
			/*t <= save_op_code_inc <= save_op_code_inc;*/
			
			content ~= t.s("/* Text */");
			content ~= t.s("$this->_t(" ~ var_name ~ ", " ~ item_value ~ ");");
		}
		
		return [t, content];
	}
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorPHP, string> OpHtmlExpression
		(TranslatorPHP t, OpHtmlItems op_code, bool detect_multiblock = true)
	{
		string content = "";
		content ~= t.s("$__v = new \\Runtime\\Vector();");
		list res = static::OpHtmlItems(t, op_code, "$__v", true);
		t = res[0];
		content ~= res[1];
		content ~= t.s2("");
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"content": content,
			}
		);
		t = res[0];
		
		if (
			detect_multiblock and
			(
				t.current_function.flags.isFlag("multiblock") or
				t.current_function.name == "render"
			)
		)
		{
			return [t, "$this->_flatten($__v)"];
		}
		
		return [t, "$__v"];
	}
	
	
	/**
	 * Translator html slot
	 */
	pure list<TranslatorPHP, string> OpHtmlSlot
		(TranslatorPHP t, OpHtmlItems op_code)
	{
		string content = "\\Runtime\\Dict::from([";
		t = t.levelInc();
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlSlot item = op_code.items.item(i);
			if (not(item instanceof OpHtmlSlot)) continue;
			
			content ~= t.s(t.expression::toString(item.name) ~ " => ");
			list res = static::OpHtmlItemsAsFunction(t, item.items, item.args, item.vars);
			t = res.get(0); content ~= res.get(1) ~ ",";
		}
		
		t = t.levelDec();
		content ~= t.s("])");
		return [t, content];
	}
	
	
	/**
	 * Translator html items as function
	 */
	pure list<TranslatorPHP, string> OpHtmlItemsAsFunction
	(
		TranslatorPHP t, OpHtmlItems op_code,
		Collection<OpDeclareFunctionArg> args = null,
		Collection<string> vars = null
	)
	{
		/* If slot */
		if (op_code.items.get(0) instanceof OpHtmlSlot)
		{
			return static::OpHtmlSlot(t, op_code);
		}
		
		Collection<SaveOpCode> save_op_codes = t.save_op_codes;
		int save_op_code_inc = t.save_op_code_inc;
		t <= save_op_code_inc <= 0;
		
		/* Use vars */
		string use_vars = "";
		Vector used_vars = [];
		
		/* Html slot */
		string f_args = "";
		if (args != null)
		{
			list res = t.operator::OpDeclareFunctionArgs(t,
				new OpDeclareFunction
				{
					"args": args,
					"is_context": false,
				}
			);
			f_args = res[1];
		}
		
		/* Slot vars */
		if (vars != null)
		{
			for (int i=0; i<vars.count(); i++)
			{
				used_vars.push(vars.get(i).value);
			}
		}
		
		/* Get used vars */
		static::exportUsedVars(used_vars, op_code);
		if (used_vars.count() > 0)
		{
			used_vars = used_vars.map(string (string s) => "&$" ~ s);
			use_vars = " use (" ~ used_vars.join(", ") ~ ") ";
		}
		
		string content = "function (" ~ f_args ~ ")" ~ use_vars ~ "{";
		t = t.levelInc();
		
		list res = static::OpHtmlExpression(t, op_code, false);
		t = res[0];
		
		/* Output save op code */
		string save = t::outputSaveOpCode(t, save_op_codes.count());
		if (save != "") content ~= save;
		content ~= t.s("return " ~ res[1] ~ ";");
		
		t = t.levelDec();
		content ~= t.s("}");
		
		/* Restore save op codes */
		t <= save_op_codes <= save_op_codes;
		t <= save_op_code_inc <= save_op_code_inc;
		
		return [t, content];
	}
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorPHP, string> OpHtmlItems(
		TranslatorPHP t, OpHtmlItems op_code, string var_name = "", bool first_space = false
	)
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		string save_html_var_name = t.html_var_name;
		t <= html_var_name <= var_name;
		
		string content = "";
		bool next_space = true;
		fn add_space = void (int i) use (t, content, next_space, first_space)
		{
			if (i > 0 and next_space) content ~= t.s2("");
			if (i == 0 and first_space) content ~= t.s2("");
			if (not next_space) next_space = true;
		};
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			string item_value = "";
			string op_content = "";
			
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			int save_op_code_inc = t.save_op_code_inc;
			
			if (item instanceof OpAssign)
			{
				list res = t.operator::OpAssign(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpComment)
			{
				add_space(i);
				list res = t.operator::OpComment(t, item);
				t = res[0]; op_content ~= res[1];
				next_space = false;
			}
			else if (item instanceof OpFor)
			{
				add_space(i);
				list res = t.operator::OpFor(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpIf)
			{
				add_space(i);
				list res = t.operator::OpIf(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpWhile)
			{
				add_space(i);
				list res = t.operator::OpWhile(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpHtmlSlot){ continue; }
			else
			{
				add_space(i);
				list res = static::OpHtmlTag(t, item, var_name);
				t = res[0]; op_content ~= res[1];
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			if (op_content != "") content ~= op_content;
			
			/* Restore save op codes */
			t <= save_op_codes <= save_op_codes;
			t <= save_op_code_inc <= save_op_code_inc;
		}
		
		t <= html_var_name <= save_html_var_name;
		
		return [t, content];
	}
	
	
	/**
	 * Export used vars
	 */
	static void exportUsedVars(Vector used_vars, BaseOpCode op_code)
	{
		if (op_code instanceof OpHtmlItems)
		{
			for (int i=0; i<op_code.items.count(); i++)
			{
				static::exportUsedVars(used_vars, op_code.items.get(i));
			}
		}
		else if (op_code instanceof OpCall)
		{
			static::exportUsedVars(used_vars, op_code.obj);
			if (op_code.args != null)
			{
				for (int i=0; i<op_code.args.count(); i++)
				{
					static::exportUsedVars(used_vars, op_code.args.get(i));
				}
			}
		}
		else if (op_code instanceof OpAttr)
		{
			static::exportUsedVars(used_vars, op_code.obj);
		}
		else if (op_code instanceof OpIdentifier)
		{
			if (op_code.kind == OpIdentifier::KIND_VARIABLE)
			{
				used_vars.push(op_code.value);
			}
		}
	}
}