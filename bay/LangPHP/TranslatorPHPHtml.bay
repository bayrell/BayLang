/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangPHP;

use Runtime.lib;
use Runtime.re;
use Bayrell.Lang.SaveOpCode;
use Bayrell.Lang.LangBay.ParserBayHtml;
use Bayrell.Lang.LangPHP.TranslatorPHP;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAssign;
use Bayrell.Lang.OpCodes.OpComment;
use Bayrell.Lang.OpCodes.OpFor;
use Bayrell.Lang.OpCodes.OpHtmlAttribute;
use Bayrell.Lang.OpCodes.OpHtmlContent;
use Bayrell.Lang.OpCodes.OpHtmlItems;
use Bayrell.Lang.OpCodes.OpHtmlTag;
use Bayrell.Lang.OpCodes.OpHtmlValue;
use Bayrell.Lang.OpCodes.OpIf;
use Bayrell.Lang.OpCodes.OpString;
use Bayrell.Lang.OpCodes.OpWhile;


static class TranslatorPHPHtml
{
	
	/**
	 * Is component
	 */
	pure bool isComponent(string tag_name)
	{
		string ch1 = rs::substr(tag_name, 0, 1);
		string ch2 = rs::strtoupper(ch1);
		return tag_name != "" and (ch1 == "{" or ch1 == ch2);
	}
	
	
	
	/**
	 * Is single tag
	 */
	pure string isSingleTag(string tag_name)
	{
		Dict tokens = ["img", "meta", "input", "link", "br"];
		if (tokens.indexOf(tag_name) == -1) return false;
		return true;
	}
	
	
	
	/**
	 * Translator html component
	 */
	pure list<TranslatorPHP, string> OpHtmlComponent(TranslatorPHP t, OpHtmlTag op_code)
	{
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		string content = "";
		string v_model = "null";
		string tag_name = op_code.tag_name;
		string module_name = "";
		
		if (op_code.op_code_name)
		{
			list res = t.expression::Expression(t, op_code.op_code_name);
			t = res[0]; module_name = res[1];
		}
		else
		{
			module_name = t.expression::toString(t.expression::findModuleName(t, op_code.tag_name));
		}
		
		content ~= t.s("/* Component '" ~ tag_name ~ "' */");
		content ~= t.s(var_name~"_params = [];");
		BaseOpCode bind = op_code.attrs.findItem( lib::equalAttr("key", "@bind") );
		if (bind)
		{
			list res = t.expression::Expression(t, bind.value); t = res[0];
			v_model = "\\Runtime\\rtl::attr($ctx, $model, " ~ res[1] ~ ", null)";
			content ~= t.s(var_name~"_params[\"@model_path\"] = static::concatAttr($ctx, $params, \"@model_path\", " ~ res[1] ~ ");");
		}
		
		BaseOpCode bind = op_code.attrs.findItem( lib::equalAttr("key", "@name") );
		if (bind)
		{
			list res = t.expression::Expression(t, bind.value); t = res[0];
			v_model = "\\Runtime\\rtl::attr($ctx, $model, " ~ res[1] ~ ", null)";
			content ~= t.s(var_name~"_params[\"@model_path\"] = static::concatAttr($ctx, $params, \"@model_path\", " ~ res[1] ~ ");");
		}
		
		for (int i=0; i<op_code.attrs.count(); i++)
		{
			OpHtmlAttribute attr = op_code.attrs.item(i);
			
			if (attr.key == "@bind") continue;
			if (attr.key == "@name") continue;
			if (attr.key == "@model") continue;
			if (attr.key == "@ref") continue;
			
			if (attr.is_spread)
			{
				content ~= t.s("if($"~attr.value.value~"!=null)"~var_name~"_params = array_merge("~var_name~"_params,$"~attr.value.value~"->_map);");
			}
			else
			{
				list res = static::OpHtmlAttr(t, attr);
				t = res[0]; string attr_value = res[1];
				content ~= t.s(var_name~"_params[" ~ t.expression::toString(attr.key) ~ "] = " ~ attr_value ~ ";");
			}
		}
		
		content ~= t.s(var_name~"_content = [];");
		fn f = rtl::method(static::getCurrentClassName(), "OpHtmlItems");
		list res = t::saveOpCodeCall(t, f, [op_code.items, var_name~"_content"]); t = res[0];
		content ~= res[1];
		
		if (op_code.op_code_name)
		{
			content ~= t.s(var_name ~ "_name = \\Runtime\\rtl::find_class(" ~ module_name ~ ");");
			content ~= t.s(var_name ~ " = [" ~ var_name ~ "_name::render2($ctx, $layout," ~ v_model ~
				",\\Runtime\\Dict::from(" ~ var_name ~ "_params)," ~ var_name ~ "_content)];")
			;
		}
		else
		{
			content ~= t.s(var_name ~ "_name = \\Runtime\\rtl::find_class(" ~ module_name ~ ");");
			content ~= t.s(var_name ~ " = [" ~ var_name ~ "_name::render2($ctx, $layout," ~ v_model ~
				",\\Runtime\\Dict::from(" ~ var_name ~ "_params)," ~ var_name ~ "_content)];")
			;
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
	
	
	/**
	 * Translator html attr
	 */
	pure list<TranslatorPHP, string> OpHtmlAttr(TranslatorPHP t, OpHtmlAttribute attr)
	{
		if (attr.value instanceof OpString)
		{
			return [t, t.expression::toString(attr.value.value)];
		}
		if (attr.value instanceof OpHtmlValue)
		{
			if (attr.value.kind == OpHtmlValue::KIND_RAW)
			{
				list res = t.expression::Expression(t, attr.value.value); t = res[0]; 
				return [t, res[1]];
			}
			else if (attr.value.kind == OpHtmlValue::KIND_JSON)
			{
				list res = t.expression::Expression(t, attr.value.value); 
				t = res[0]; string value = res[1];
				value = "static::json_encode($ctx, " ~ value ~ ")";
				return [t, value];
			}
		}
		
		list res = t.expression::Expression(t, attr.value); t = res[0]; string value = res[1];
		value = t.o(value, res[0].opcode_level, 13);
		
		return [t, value];
	}
	
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorPHP, string> OpHtmlAttrs(TranslatorPHP t, Collection<OpHtmlAttribute> attrs)
	{
		Vector<string> attr_class = new Vector<string>();
		string attr_s = "";
		string attr_key_value = "";
		bool has_attr_key = false;
		
		Collection<string> res_attrs = attrs.map
		(
			string (OpHtmlAttribute attr) use (t, attr_class, attr_key_value, has_attr_key)
			{
				if (attr.is_spread) return "";
				
				string attr_key = attr.key;
				string attr_value = "";
				
				/*
				if (attr_key == "@class")
				{
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_class.push( "static::getCssName($ctx, " ~ attr_value ~ ")" );
					
					if (not has_attr_key and attr.value instanceof OpString)
					{
						var arr = rs::split(" ", attr.value.value);
						attr_key_value = t.expression::toString(arr[0]);
						has_attr_key = true;
					}
					
					return "";
				}
				*/
				if (attr_key == "class")
				{
					t <= opcode_level <= 1000;
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_class.push(attr_value);
					
					if (not has_attr_key and attr.value instanceof OpString)
					{
						var arr = rs::split(" ", attr.value.value);
						attr_key_value = t.expression::toString(arr[0]);
						has_attr_key = true;
					}
					
					return "";
				}
				else if (attr_key == "@key")
				{
					has_attr_key = true;
					list res = static::OpHtmlAttr(t, attr); t = res[0]; attr_value = res[1];
					attr_key_value = attr_value;
					return "";
				}
				
				if (attr_key == "@bind" or attr_key == "@name")
				{
					attr_key = "value";
					list res = t.expression::Expression(t, attr.value); t = res[0];
					attr_value = "\\Runtime\\rtl::attr($ctx, $model, " ~ res[1] ~ ", null)";
				}
				
				string ch = rs::substr(attr_key, 0, 1);
				if (ch == "@") return "";
				
				if (attr_value == "")
				{
					list res = static::OpHtmlAttr(t, attr);
					t = res[0]; attr_value = res[1];
				}
				
				return attr_key ~ "=\"'.static::escapeAttr($ctx, " ~ attr_value ~ ").'\"";
			}
		);
		res_attrs = res_attrs.filter( bool (string s) => s != "" );
		if (attr_class.count() > 0)
		{
			attr_class.push( "static::getCssHash($ctx)" );
			/*attr_class.push( t.expression::toString("h-" ~ ParserBayHtml::getCssHash(t.current_class_full_name)) );*/
			res_attrs = res_attrs.pushIm
			(
				"class=" ~ "\"'." ~ rs::join(".\" \".", attr_class) ~ ".'\""
			);
		}
		if (res_attrs.count() > 0)
		{
			attr_s = " " ~ rs::join(" ", res_attrs);
		}
		
		/* Add spreads */
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute attr = attrs[i];
			if (not attr.is_spread) continue;
			attr_s ~= " ' . static::joinAttrs($ctx, $" ~ attr.value.value ~ ") . '";
		}
		
		return [t, attr_s];
	}
	
	
	
	/**
	 * Translator html template
	 */
	pure list<TranslatorPHP, string> OpHtmlTag(TranslatorPHP t, OpHtmlTag op_code)
	{
		if (static::isComponent(op_code.tag_name))
		{
			return static::OpHtmlComponent(t, op_code);
		}
		
		/* Output attrs */
		list res = static::OpHtmlAttrs(t, op_code.attrs); t = res[0]; string attr_s = res[1];
		
		list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
		string content = "";
		if (op_code.tag_name != "") content ~= t.s("/* Element '" ~ op_code.tag_name ~ "' */");
		if (static::isSingleTag(op_code.tag_name))
		{
			content ~= t.s(var_name ~ " = ['<" ~ op_code.tag_name ~ attr_s ~ " />'];");
		}
		else
		{
			if (op_code.tag_name != "")
			{
				content ~= t.s(var_name ~ " = ['<" ~ op_code.tag_name ~ attr_s ~ ">'];");
			}
			else
			{
				content ~= t.s(var_name ~ " = [];");
			}
			bool flag_value = false;
			if (not flag_value)
			{
				fn f = rtl::method(static::getCurrentClassName(), "OpHtmlItems");
				list res = t::saveOpCodeCall(t, f, [op_code.items, var_name]); t = res[0];
				content ~= res[1];
			}
			if (op_code.tag_name != "")
				content ~= t.s("static::p(" ~ var_name ~ ", '</" ~
					op_code.tag_name ~ ">');");
		}
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, var_name];
	}
	
	
	
	/**
	 * Translator html items
	 */
	pure list<TranslatorPHP, string> OpHtmlItems(TranslatorPHP t, OpHtmlItems op_code, string var_name = "")
	{
		if (op_code == null or op_code.items.count() == 0)
		{
			return [t, ""];
		}
		
		int items_count = op_code.items.count();
		string content = "";
		if (var_name == "")
		{
			list res = t::incSaveOpCode(t); t = res[0]; string var_name = res[1];
			content ~= t.s(var_name ~ " = [];");
		}
		
		string save_html_var_name = t.html_var_name;
		t <= html_var_name <= var_name;
		
		for (int i=0; i<op_code.items.count(); i++)
		{
			OpHtmlTag item = op_code.items.item(i);
			string item_value = "";
			string op_content = "";
			
			/* Save op codes */
			Collection<SaveOpCode> save_op_codes = t.save_op_codes;
			int save_op_code_inc = t.save_op_code_inc;
			
			if (item instanceof OpHtmlContent)
			{
				item_value = t.expression::toString(item.value);
			}
			else if (item instanceof OpHtmlTag)
			{
				list res = static::OpHtmlTag(t, item); t = res[0]; item_value = res[1];
			}
			else if (item instanceof OpHtmlValue)
			{
				if (item.kind == OpHtmlValue::KIND_RAW)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
				}
				else if (item.kind == OpHtmlValue::KIND_HTML)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					item_value = "static::toHtml($ctx, " ~ item_value ~ ")";
				}
				else if (item.kind == OpHtmlValue::KIND_JSON)
				{
					list res = t.expression::Expression(t, item.value); 
					t = res[0]; item_value = res[1];
					item_value = "static::json_encode($ctx, " ~ item_value ~ ")";
				}
			}
			else if (item instanceof OpAssign)
			{
				list res = t.operator::OpAssign(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpComment)
			{
				list res = t.operator::OpComment(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpFor)
			{
				list res = t.operator::OpFor(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpIf)
			{
				list res = t.operator::OpIf(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else if (item instanceof OpWhile)
			{
				list res = t.operator::OpWhile(t, item);
				t = res[0]; op_content ~= res[1];
			}
			else
			{
				list res = t.expression::Expression(t, item); 
				t = res[0]; item_value = res[1];
				item_value = "static::escapeHtml($ctx, " ~ item_value ~ ")";
			}
			
			/* Output save op code */
			string save = t::outputSaveOpCode(t, save_op_codes.count());
			if (save != "") content ~= save;
			if (op_content != "") content ~= op_content;
			
			/* Restore save op codes */
			t <= save_op_codes <= save_op_codes;
			t <= save_op_code_inc <= save_op_code_inc;
			
			if (item_value != "") content ~= t.s("static::p(" ~ var_name ~
				", " ~ item_value ~ ");");
		}
		
		t <= html_var_name <= save_html_var_name;
		
		list res = t::addSaveOpCode
		(
			t,
			{
				"op_code": op_code,
				"var_name": var_name,
				"content": content,
			}
		);
		t = res[0];
		return [t, "new \\Runtime\\RawString(" ~ var_name ~ ")"];
	}
	
}