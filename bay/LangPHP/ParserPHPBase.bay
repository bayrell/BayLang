/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangPHP;

use Runtime.BaseObject;
use Runtime.Reference;
use BayLang.Caret;
use BayLang.TokenReader;
use BayLang.Exceptions.ParserEOF;
use BayLang.Exceptions.ParserError;
use BayLang.Exceptions.ParserExpected;
use BayLang.LangPHP.ParserPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpClassOf;
use BayLang.OpCodes.OpClassRef;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpCurry;
use BayLang.OpCodes.OpCurryArg;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpDict;
use BayLang.OpCodes.OpDictPair;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpMethod;
use BayLang.OpCodes.OpNew;
use BayLang.OpCodes.OpNumber;
use BayLang.OpCodes.OpNegative;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpTypeConvert;
use BayLang.OpCodes.OpTypeIdentifier;


class ParserPHPBase extends BaseObject
{
	ParserPHP parser = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(ParserPHP parser)
	{
		parent();
		this.parser = parser;
	}
	
	
	/**
	 * Is system type
	 */
	static bool isSystemType (string name)
	{
		if (name == "var") return true;
		if (name == "void") return true;
		if (name == "bool") return true;
		if (name == "byte") return true;
		if (name == "int") return true;
		if (name == "double") return true;
		if (name == "float") return true;
		if (name == "char") return true;
		if (name == "string") return true;
		if (name == "list") return true;
		if (name == "scalar") return true;
		if (name == "primitive") return true;
		if (name == "html") return true;
		if (name == "Error") return true;
		if (name == "Object") return true;
		if (name == "DateTime") return true;
		if (name == "Collection") return true;
		if (name == "Dict") return true;
		if (name == "Vector") return true;
		if (name == "Map") return true;
		if (name == "rs") return true;
		if (name == "rtl") return true;
		if (name == "ArrayInterface") return true;
		return false;
	}
	
	
	/**
	 * Returns true if name is identifier
	 */
	static bool isIdentifier(string name)
	{
		if (name == "") return false;
		if (Caret::isNumber(rs::charAt(name, 0))) return false;
		int sz = rs::strlen(name);
		for (int i=0; i<sz; i++)
		{
			string ch = rs::charAt(name, i);
			if (Caret::isChar(ch) or Caret::isNumber(ch) or ch == "_") continue;
			return false;
		}
		return true;
	}
	
	
	/**
	 * Returns true if reserved words
	 */
	static bool isReserved(string name)
	{
		if (rs::substr(name, 0, 3) == "__v") return true;
		return false;
	}
	
	
	/**
	 * Read number
	 */
	OpNumber readNumber(TokenReader reader, bool flag_negative = false)
	{
		Caret caret_start = reader.caret();
		
		/* Read number */
		string value = reader.readToken();
		if (value == "")
		{
			throw caret_start.expected("Number");
		}
		if (not Caret::isNumber(value))
		{
			throw caret_start.expected("Number");
		}
		
		/* Look dot */
		if (reader.nextToken() == ".")
		{
			value ~= reader.readToken();
			value ~= reader.readToken();
		}
		
		/* Returns op_code */
		return new OpNumber
		{
			"value": flag_negative ? "-" ~ value : value,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read string
	 */
	OpString readString(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		string str_char = reader.readToken();
		
		/* Read begin string char */
		if (str_char != "'" and str_char != '"') /* " */
		{
			throw caret_start.expected("String");
		}
		
		/* Read string value */
		Caret caret = reader.caret();
		string value_str = "";
		string ch = caret.nextChar();
		while (not caret.eof() and ch != str_char)
		{
			if (ch == "\\")
			{
				caret.readChar();
				if (caret.eof())
				{
					throw caret.expected("End of string");
				}
				string ch2 = caret.readChar();
				if (ch2 == "n") value_str ~= "\n";
				else if (ch2 == "r") value_str ~= "\r";
				else if (ch2 == "t") value_str ~= "\t";
				else if (ch2 == "s") value_str ~= " ";
				else if (ch2 == "\\") value_str ~= "\\";
				else if (ch2 == "'") value_str ~= "'";
				else if (ch2 == '"') value_str ~= '"';
				else value_str ~= ch ~ ch2;
			}
			else
			{
				value_str ~= caret.readChar();
			}
			if (caret.eof())
			{
				throw caret.expected("End of string");
			}
			ch = caret.nextChar();
		}
		
		/* Read end string char */
		caret.matchString(str_char);
		
		/* Restore reader */
		reader.init(caret);
		
		/* Returns op_code */
		return new OpString
		{
			"value": value_str,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read comment
	 */
	OpComment readComment(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		string str_char = reader.readToken();
		
		/* Read begin coment */
		reader.matchToken("/");
		reader.matchToken("*");
		
		/* Read comment value */
		Caret caret = reader.caret();
		string value_str = "";
		string ch2 = caret.nextString(2);
		while (not caret.eof() and ch2 != "*/")
		{
			value_str ~= caret.readChar();
			if (caret.eof())
			{
				throw caret.expected("End of comment");
			}
			ch2 = caret.nextString(2);
		}
		
		/* Restore reader */
		reader.init(caret);
		
		/* Read end coment */
		reader.matchToken("*");
		reader.matchToken("/");
		
		/* Returns op_code */
		return new OpComment
		{
			"value": value_str,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read identifier
	 */
	OpIdentifier readIdentifier(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		
		/* Detect variable */
		bool is_variable = false;
		if (reader.nextToken() == "$")
		{
			is_variable = true;
			reader.readToken();
		}
		
		/* Read identifier */
		string name = reader.readToken();
		if (not static::isIdentifier(name) or static::isReserved(name))
		{
			throw reader.expected("Identifier");
		}
		
		/* Check if function */
		if (not this.parser.isRegisteredVariable(name) and not is_variable)
		{
			throw reader.expected("Variable");
		}
		
		/* Returns op_code */
		return new OpIdentifier
		{
			"value": name,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read entity name
	 */
	OpEntityName readEntityName(TokenReader reader)
	{
		Caret caret_start = reader.caret();
		Collection<string> items = [];
		
		/* Read name */
		items.push(this.readIdentifier(reader));
		
		/* Read names */
		while (reader.nextToken() == "\\")
		{
			reader.readToken();
			items.push(this.readIdentifier(reader));
		}
		
		/* Returns op_code */
		return new OpEntityName
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read type identifier
	 */
	OpTypeIdentifier readTypeIdentifier(TokenReader reader, bool read_generic = true)
	{
		Caret caret_start = reader.caret();
		OpEntityName entity_name = this.readEntityName(reader);
		
		/* Read generics */
		Collection<OpTypeIdentifier> generics = [];
		if (reader.nextToken() == "<" and read_generic)
		{
			while (not reader.eof() and reader.nextToken() != ">")
			{
				generics.push(this.readTypeIdentifier);
				if (reader.nextToken() != ">")
				{
					reader.matchToken(",");
				}
			}
		}
		
		return new OpTypeIdentifier
		{
			"entity_name": entity_name,
			"generics": generics,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read collection
	 */
	BaseOpCode readCollection(TokenReader reader)
	{
	}
	
	
	/**
	 * Read collection
	 */
	BaseOpCode readDict(TokenReader reader)
	{
	}
	
	
	/**
	 * Read fixed
	 */
	BaseOpCode readFixed(TokenReader reader)
	{
	}
	
	
	/**
	 * Read new instance
	 */
	BaseOpCode readNew(TokenReader reader)
	{
	}
	
	
	/**
	 * Read item
	 */
	BaseOpCode readItem(TokenReader reader)
	{
		if (Caret::isNumber(reader.nextToken()))
		{
			return this.readNumber(reader);
		}
		else if (reader.nextToken() == "'" or reader.nextToken() == '"') /* " */
		{
			return this.readString(reader);
		}
		return this.readIdentifier(reader);
	}
}