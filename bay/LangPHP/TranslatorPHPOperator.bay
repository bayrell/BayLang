/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangPHP;

use Runtime.BaseObject;
use BayLang.SaveOpCode;
use BayLang.LangPHP.TranslatorPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAssignValue;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpBreak;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpContinue;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpIfElse;
use BayLang.OpCodes.OpInc;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpPreprocessorIfCode;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpPreprocessorSwitch;
use BayLang.OpCodes.OpReturn;
use BayLang.OpCodes.OpThrow;
use BayLang.OpCodes.OpTryCatch;
use BayLang.OpCodes.OpTryCatchItem;
use BayLang.OpCodes.OpWhile;


class TranslatorPHPOperator extends BaseObject
{
	TranslatorPHP translator = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(TranslatorPHP translator)
	{
		parent();
		this.translator = translator;
	}
	
	
	/**
	 * OpAssign
	 */
	bool OpAssign(OpAssign op_code, Collection<string> result)
	{
		bool flag = false;
		int values_count = op_code.items.count();
		for (int i=0; i<values_count; i++)
		{
			OpAssignValue op_code_item = op_code.items.get(i);
			if (not op_code_item.expression) continue;
			if (i > 0) result.push(this.translator.newLine());
			flag = true;
			if (op_code_item.value instanceof OpAttr)
			{
				this.translator.expression.OpAttr(op_code_item.value, result);
			}
			else if (op_code_item.value instanceof OpIdentifier)
			{
				this.translator.expression.OpIdentifier(op_code_item.value, result);
			}
			if (op_code_item.expression)
			{
				string op = op_code_item.op;
				if (op == "~=") op = ".=";
				else if (op == "") op = "=";
				result.push(" " ~ op ~ " ");
				this.translator.expression.translate(op_code_item.expression, result);
			}
			if (i != values_count - 1) result.push(";");
		}
		return flag;
	}
	
	
	/**
	 * OpBreak
	 */
	void OpBreak(OpBreak op_code, Collection<string> result)
	{
		result.push("break");
	}
	
	
	/**
	 * OpContinue
	 */
	void OpContinue(OpContinue op_code, Collection<string> result)
	{
		result.push("continue");
	}
	
	
	/**
	 * OpReturn
	 */
	void OpReturn(OpReturn op_code, Collection<string> result)
	{
		result.push("return");
		if (op_code.expression)
		{
			result.push(" ");
			this.translator.expression.translate(op_code.expression, result);
		}
	}
	
	
	/**
	 * OpInc
	 */
	void OpInc(OpInc op_code, Collection<string> result)
	{
		if (op_code.kind == OpInc::KIND_INC)
		{
			this.translator.expression.translate(op_code.item, result);
			result.push("++");
		}
		if (op_code.kind == OpInc::KIND_DEC)
		{
			this.translator.expression.translate(op_code.item, result);
			result.push("--");
		}
	}
	
	
	/**
	 * OpFor
	 */
	void OpFor(OpFor op_code, Collection<string> result)
	{
		result.push("for (");
		this.translateItem(op_code.expr1, result);
		result.push("; ");
		this.translator.expression.translate(op_code.expr2, result);
		result.push("; ");
		this.translateItem(op_code.expr3, result);
		result.push(")");
		this.translateItems(op_code.content, result);
	}
	
	
	/**
	 * OpIf
	 */
	void OpIf(OpIf op_code, Collection<string> result)
	{
		result.push("if (");
		this.translator.expression.translate(op_code.condition, result);
		result.push(")");
		this.translateItems(op_code.if_true, result);
		if (op_code.if_else and op_code.if_else.count() > 0)
		{
			for (int i=0; i<op_code.if_else.count(); i++)
			{
				OpIfElse op_code_item = op_code.if_else.get(i);
				result.push(this.translator.newLine());
				result.push("else if (");
				this.translator.expression.translate(op_code_item.condition, result);
				result.push(")");
				this.translateItems(op_code_item.content, result);
			}
		}
		if (op_code.if_false)
		{
			result.push(this.translator.newLine());
			result.push("else");
			this.translateItems(op_code.if_false, result);
		}
	}
	
	
	/**
	 * OpThrow
	 */
	void OpThrow(OpThrow op_code, Collection<string> result)
	{
		result.push("throw ");
		this.translator.expression.translate(op_code.expression, result);
	}
	
	
	/**
	 * OpTryCatch
	 */
	void OpTryCatch(OpTryCatch op_code, Collection<string> result)
	{
		result.push("try");
		this.translateItems(op_code.op_try, result);
		if (op_code.items and op_code.items.count() > 0)
		{
			int items_count = op_code.items.count();
			for (int i=0; i<items_count; i++)
			{
				OpTryCatchItem op_code_item = op_code.items.get(i);
				result.push(this.translator.newLine());
				result.push("catch (");
				if (op_code_item.pattern.entity_name.getName() == "var")
				{
					result.push("\Exception");
				}
				else
				{
					this.translator.expression.OpTypeIdentifier(op_code_item.pattern, result);
				}
				result.push(" ");
				result.push("$" ~ op_code_item.name.value);
				result.push(")");
				this.translateItems(op_code_item.content, result);
			}
		}
		else
		{
			result.push(this.translator.newLine());
			result.push("catch (Exception $e) { throw e; }");
		}
	}
	
	
	/**
	 * OpWhile
	 */
	void OpWhile(OpWhile op_code, Collection<string> result)
	{
		result.push("while (");
		this.translator.expression.translate(op_code.condition, result);
		result.push(")");
		this.translateItems(op_code.content, result);
	}
	
	
	/**
	 * OpComment
	 */
	void OpComment(OpComment op_code, Collection<string> result)
	{
		result.push("/*");
		result.push(op_code.value);
		result.push("*/");
	}
	
	
	/**
	 * Add semicolon
	 */
	void addSemicolon(BaseOpCode op_code, Collection<string> result)
	{
		if (
			op_code instanceof OpAssign or
			op_code instanceof OpBreak or
			op_code instanceof OpCall or
			op_code instanceof OpContinue or
			op_code instanceof OpInc or
			op_code instanceof OpReturn or
			op_code instanceof OpThrow
		)
		{
			if (not this.translator.last_semicolon) result.push(";");
		}
	}
	
	
	/**
	 * Translate item
	 */
	bool translateItem(BaseOpCode op_code, Collection<string> result)
	{
		if (op_code instanceof OpAssign)
		{
			return this.OpAssign(op_code, result);
		}
		else if (op_code instanceof OpBreak)
		{
			this.OpBreak(op_code, result);
		}
		else if (op_code instanceof OpCall)
		{
			this.translator.expression.OpCall(op_code, result);
		}
		else if (op_code instanceof OpContinue)
		{
			this.OpContinue(op_code, result);
		}
		else if (op_code instanceof OpReturn)
		{
			this.OpReturn(op_code, result);
		}
		else if (op_code instanceof OpInc)
		{
			this.OpInc(op_code, result);
		}
		else if (op_code instanceof OpFor)
		{
			this.OpFor(op_code, result);
		}
		else if (op_code instanceof OpIf)
		{
			this.OpIf(op_code, result);
		}
		else if (op_code instanceof OpThrow)
		{
			this.OpThrow(op_code, result);
		}
		else if (op_code instanceof OpTryCatch)
		{
			this.OpTryCatch(op_code, result);
		}
		else if (op_code instanceof OpWhile)
		{
			this.OpWhile(op_code, result);
		}
		else if (op_code instanceof OpComment)
		{
			this.OpComment(op_code, result);
		}
		else if (op_code instanceof OpPreprocessorIfCode)
		{
			return this.translator.program.OpPreprocessorIfCode(op_code, result);
		}
		else if (op_code instanceof OpPreprocessorIfDef)
		{
			return this.translator.program.OpPreprocessorIfDef(
				op_code, result, OpPreprocessorIfDef::KIND_OPERATOR
			);
		}
		else if (op_code instanceof OpPreprocessorSwitch)
		{
			return this.translator.program.OpPreprocessorSwitch(
				op_code, result, OpPreprocessorIfDef::KIND_OPERATOR
			);
		}
		else
		{
			return false;
		}
		return true;
	}
	
	
	/**
	 * Translate OpItems
	 */
	void translateItems(OpItems op_code, Collection<string> result, bool match_brackets = true)
	{
		if (not(op_code instanceof OpItems))
		{
			result.push(" ");
			this.translateItem(op_code, result);
			result.push(";");
			this.translator.last_semicolon = true;
			return;
		}
		
		if (op_code.items.count() == 0 and match_brackets)
		{
			result.push("{");
			result.push("}");
			return;
		}
		
		/* Begin bracket */
		if (match_brackets)
		{
			result.push(this.translator.newLine());
			result.push("{");
			this.translator.levelInc();
		}
		
		/* Items */
		int items_count = op_code.items.count();
		for (int i=0; i<items_count; i++)
		{
			BaseOpCode op_code_item = op_code.items.get(i);
			Collection<string> result_items = [];
			this.translator.last_semicolon = false;
			bool flag = this.translateItem(op_code_item, result_items);
			if (flag)
			{
				if (not(op_code_item instanceof OpPreprocessorIfDef or
					op_code_item instanceof OpPreprocessorSwitch))
				{
					result.push(this.translator.newLine());
				}
				result.appendItems(result_items);
				this.addSemicolon(op_code_item, result);
			}
		}
		
		/* End bracket */
		if (match_brackets)
		{
			this.translator.levelDec();
			result.push(this.translator.newLine());
			result.push("}");
		}
	}
}