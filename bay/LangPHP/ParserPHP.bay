/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangPHP;

use Runtime.BaseStruct;
use Runtime.Reference;
use BayLang.Caret;
use BayLang.CoreParser;
use BayLang.TokenReader;
use BayLang.LangPHP.ParserPHPBase;
use BayLang.LangPHP.ParserPHPExpression;
use BayLang.LangPHP.ParserPHPFunction;
use BayLang.LangPHP.ParserPHPOperator;
use BayLang.LangPHP.ParserPHPProgram;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpFlags;


class ParserPHP extends CoreParser
{
	/* Work */
	Dict<bool> vars = {};
	Dict<string> uses = {};
	OpNamespace current_namespace = null;
	OpDeclareClass current_class = null;
	string current_namespace_name = "";
	string current_class_name = "";
	string current_class_kind = "";
	bool current_class_abstract = false;
	bool current_class_declare = false;
	bool find_identifier = true;
	bool skip_comments = true;
	string pipe_kind = "";
	bool is_pipe = false;
	bool is_html = false;
	bool is_local_css = false;
	
	/* Parsers */
	ParserPHPBase parser_base = new ParserPHPBase(this);
	ParserPHPExpression parser_expression = new ParserPHPExpression(this);
	ParserPHPExpression parser_function = new ParserPHPFunction(this);
	ParserPHPOperator parser_operator = new ParserPHPOperator(this);
	ParserPHPProgram parser_program = new ParserPHPProgram(this);
	
	
	/**
	 * Returns true if registered variable
	 */
	bool isRegisteredVariable(string name)
	{
		Collection variables = [
			"echo"
		];
		if (variables.indexOf(name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Add variable
	 */
	void addVariable(OpIdentifier op_code)
	{
		string name = op_code.value;
		this.vars.set(name, true);
	}
	
	
	/**
	 * Find variable
	 */
	bool findVariable(OpIdentifier op_code)
	{
		string name = op_code.value;
		if (this.vars.has(name)) return true;
		if (this.isRegisteredVariable(name)) return true;
		return false;
	}
	
	
	/**
	 * Parse file and convert to BaseOpCode
	 */
	BaseOpCode parse()
	{
		TokenReader reader = this.createReader();
		return this.parser_program.parse(reader);
	}
}