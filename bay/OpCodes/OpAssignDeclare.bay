/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAnnotation;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpTemplateIdentifier;


export class OpAssignDeclare extends BaseOpCode{
	
	public serializable string op = "op_assign_declare";
	public serializable BaseOpCode tp = null;
	public serializable string name = null;
	public serializable BaseOpCode value = null;
	public serializable OpFlags flags = null;
	public serializable Vector<OpAnnotation> annotations = null;
	
	
	
	/**
	 * Read is Flag
	 */
	public boolean isFlag(string name){
		if (this.flags == null)
			return false;
		if (not OpFlags::hasFlag(name))
			return false;
		return this.flags.takeValue(name);
	}
	
	
	
	/**
	 * Has Annotations
	 */
	public boolean hasAnnotations(){
		return this.annotations != null and this.annotations.count() > 0;
	}
	
	
	
	/**
	 * Constructor
	 */ 
	void constructor(BaseOpCode tp = null, string name = null, BaseOpCode value = null){
		parent();
		this.tp = tp;
		this.name = name;
		this.value = value;
	}
	
	
	
	/**
	 * Destructor
	 */ 
	void destructor(){
		parent();
	}
	
}