/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Bayrell.Lang.OpCodes;

use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAnnotation;
use Bayrell.Lang.OpCodes.OpComment;
use Bayrell.Lang.OpCodes.OpDeclareFunctionArg;
use Bayrell.Lang.OpCodes.OpFlags;


struct OpDeclareFunction extends BaseOpCode
{
	string op = "op_function";
	string name = "";
	Collection<OpAnnotation> annotations = null;
	Collection<OpComment> comments = null;
	Collection<OpDeclareFunctionArg> args = null;
	Collection<string> vars = null;
	BaseOpCode result_type = null;
	BaseOpCode expression = null;
	BaseOpCode items = null;
	OpFlags flags = null;
	bool is_context = true;
	bool is_this = false;
	
	
	/**
	 * Returns true if static function
	 */
	bool isStatic() =>
		this.flags != null and
		(
			this.flags.isFlag("static") or
			this.flags.isFlag("lambda") or
			this.flags.isFlag("pure")
		)
	;
	
	
	
	/**
	 * Returns true if is flag
	 */
	bool isFlag(string flag_name) =>
		this.flags != null and this.flags.isFlag(flag_name)
	;
	
}