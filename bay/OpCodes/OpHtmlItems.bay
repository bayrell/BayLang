/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayLang.OpCodes;

use Runtime.lib;
use Runtime.Serializer;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpHtmlTag;


class OpHtmlItems extends BaseOpCode
{
	string op = "op_html";
	Collection<BaseOpCode> items = null;
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		parent(serializer, data);
		serializer.process(this, "items", data);
	}
	
	
	/**
	 * Find op_code position
	 */
	int find(BaseOpCode op_code) =>
		op_code ? this.items.find(lib::equal(op_code)) : -1
	;
	
	
	/**
	 * Add op_code
	 */
	BaseOpCode addItem(BaseOpCode op_code, BaseOpCode dest = null, string kind = "after")
	{
		int pos = -1;
		if (dest != null)
		{
			pos = this.find(dest);
		}
		if (pos >= 0)
		{
			if (kind == "before") this.items.insert(pos, op_code);
			else this.items.insert(pos + 1, op_code);
		}
		else
		{
			if (kind == "before") this.items.prepend(op_code);
			else this.items.push(op_code);
		}
		return op_code;
	}
	
	
	/**
	 * Remove op_code
	 */
	void removeItem(BaseOpCode op_code)
	{
		int pos = this.find(op_code);
		this.items.remove(pos);
	}
}