/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellRtl.Types.Vector;
use BayrellLang.OpCodes.BaseOpCode;


export class OpFunctionDeclare extends BaseOpCode{
	
	public string op = "op_function";
	public string name = "";
	public BaseOpCode result_type = null;
	public Vector<OpAssignDeclare> args = null;
	public Vector<BaseOpCode> childs = null;
	
	
	
	/**
	 * Assign all data from other object
	 * @param CoreObject obj
	 */
	void assign(CoreObject obj){
		if (obj instanceof OpFunctionDeclare){
			this.name = obj.name;
			this.result_type = obj.result_type;
			this.args = clone obj.args;
			this.childs = clone obj.childs;
		}
		parent::assign(obj);
	}
	
	
	
	/**
	 * Returns classname of the object
	 * @return string
	 */
	public string getClassName(){
		return "BayrellLang.OpCodes.OpFunctionDeclare";
	}
	
	
	
	/**
	 * Constructor
	 */ 
	void constructor(){
		parent();
		this.args = new Vector<OpAssignDeclare>();
	}
	
	
	
	/**
	 * Destructor
	 */ 
	void destructor(){
		parent();
	}
	
	
	
	/**
	 * Returns name of variables to serialization
	 * @return Vector<string>
	 */
	public void getVariablesNames(Vector<string> names){
		parent::getVariablesNames(names);
		names.push("name");
		names.push("result_type");
		names.push("args");
	}
	
	
	
	/**
	 * Returns instance of the value by variable name
	 * @param string variable_name
	 * @return var
	 */
	public var takeValue(string variable_name, var default_value = null){
		if (variable_name == 'name') return this.name;
		else if (variable_name == 'result_type') return this.result_type;
		else if (variable_name == 'args') return this.args;
		return parent::takeValue(variable_name, default_value);
	}
	
	
	
	/**
	 * Set new value instance by variable name
	 * @param string variable_name
	 * @param var value
	 */
	public void assignValue(string variable_name, var value){
		if (variable_name == 'name') this.name = value;
		else if (variable_name == 'result_type') this.result_type = value;
		else if (variable_name == 'args') this.args = value;
		else parent::assignValue(variable_name, value);
	}
	
}