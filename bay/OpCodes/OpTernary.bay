/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellLang.OpCodes.BaseOpCode;
use BayrellRtl.Interfaces.SerializeInterface;

export class OpTernary extends BaseOpCode implements SerializeInterface{
	
	public string op = "op_ternary";
	
	public BaseOpCode expr = null;
	public BaseOpCode if_true = null;
	public BaseOpCode if_false = null;
	
	
	/**
	 * Returns classname of the object
	 * @return string
	 */
	public string getClassName(){
		return "BayrellLang.OpCodes.OpTernary";
	}
	
	
	
	/**
	 * Constructor
	 */ 
	void constructor(BaseOpCode expr = null, BaseOpCode if_true = null, BaseOpCode if_false = null){
		parent();
		this.expr = expr;
		this.if_true = if_true;
		this.if_false = if_false;
	}
	
	
	
	/**
	 * Destructor
	 */ 
	void destructor(){
		delete this.expr;
		delete this.if_true;
		delete this.if_false;
		parent();
	}
	
	
	
	/**
	 * Returns name of variables to serialization
	 * @return Vector<string>
	 */
	public void getVariablesNames(Vector<string> names){
		parent::getVariablesNames(names);
		names.push("expr");
		names.push("if_true");
		names.push("if_false");
	}
	
	
	
	/**
	 * Returns instance of the value by variable name
	 * @param string variable_name
	 * @return var
	 */
	public var takeValue(string variable_name, var default_value = null){
		if (variable_name == 'expr') return this.expr;
		else if (variable_name == 'if_true') return this.if_true;
		else if (variable_name == 'if_false') return this.if_false;
		return parent::takeValue(variable_name, default_value);
	}
	
	
	
	/**
	 * Set new value instance by variable name
	 * @param string variable_name
	 * @param var value
	 */
	public void assignValue(string variable_name, var value){
		if (variable_name == 'expr') this.expr = value;
		if (variable_name == 'if_true') this.if_true = value;
		if (variable_name == 'if_false') this.if_false = value;
		else parent::assignValue(variable_name, value);
	}
	
	
	
	/**
	 * Assign all data from other object
	 * @param CoreObject obj
	 */
	void assign(CoreObject obj){
		if (obj instanceof OpTernary){
			this.expr = clone obj.expr;
			this.if_true = clone obj.if_true;
			this.if_false = clone obj.if_false;
		}
		parent::assign(obj);
	}
}