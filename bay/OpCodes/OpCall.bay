/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellLang.OpCodes.BaseOpCode;


export class OpCall extends BaseOpCode{
	
	public string op = "op_call";
	public BaseOpCode value = null;
	public Vector<BaseOpCode> args = null;
	
	
	
	/**
	 * Returns classname of the object
	 * @return string
	 */
	public string getClassName(){
		return "BayrellLang.OpCodes.OpCall";
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor(BaseOpCode value = null, Vector<BaseOpCode> args = null){
		parent();
		this.value = value;
		this.args = args;
	}
	
	
	
	/**
	 * Destructor
	 */
	void destructor(){
		parent();
	}
	
	
	
	/**
	 * Returns name of variables to serialization
	 * @return Vector<string>
	 */
	public void getVariablesNames(Vector<string> names){
		parent::getVariablesNames(names);
		names.push("value");
		names.push("args");
	}
	
	
	
	/**
	 * Returns instance of the value by variable name
	 * @param string variable_name
	 * @return var
	 */
	public var takeValue(string variable_name, var default_value = null){
		if (variable_name == 'value') return this.value;
		else if (variable_name == 'args') return this.args;
		return parent::takeValue(variable_name, default_value);
	}
	
	
	
	/**
	 * Set new value instance by variable name
	 * @param string variable_name
	 * @param var value
	 */
	public void assignValue(string variable_name, var value){
		if (variable_name == 'value') this.value = value;
		else if (variable_name == 'args') this.args = value;
		else
			parent::assignValue(variable_name, value);
	}
	
}