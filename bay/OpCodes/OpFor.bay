/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellLang.OpCodes.BaseOpCode;


export class OpFor extends BaseOpCode{
	
	public serializable string op = "op_for";
	public serializable BaseOpCode loop_condition = null;
	public serializable BaseOpCode loop_init = null;
	public serializable BaseOpCode loop_inc = null;
	public serializable Vector<BaseOpCode> childs = null;
	
	
	/**
	 * Constructor
	 */ 
	void constructor(BaseOpCode loop_condition = null, BaseOpCode loop_init = null, 
		BaseOpCode loop_inc = null, Vector<BaseOpCode> childs = null)
	{
		parent();
		this.loop_condition = loop_condition;
		this.loop_init = loop_init;
		this.loop_inc = loop_inc;
		this.childs = childs;
	}
	
	
	
	/**
	 * Destructor
	 */ 
	void destructor(){
		parent();
	}
	
}