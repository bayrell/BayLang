/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayLang.OpCodes;

use Runtime.BaseObject;
use Runtime.Serializer;
use Runtime.SerializeInterface;
use BayLang.OpCodes.BaseOpCode;


class OpFlags extends BaseOpCode implements SerializeInterface
{
	Map items = [];
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "items", data);
	}
	
	
	/**
	 * Read is Flag
	 */
	public bool isFlag(string name)
	{
		if (not OpFlags::hasFlag(name))	return false;
		return this.items.has(name);
	}
	
	
	
	/**
	 * Get flags
	 */
	pure Collection<string> getFlags()
	{
		return 
		[
			"async",
			"export",
			"static",
			"const",
			"public",
			"private",
			"declare",
			"protected",
			"serializable",
			"cloneable",
			"assignable",
			"memorize",
			"multiblock",
			/*"lambda",*/
			"pure",
			"props",
		];
	}
	
	
	
	/**
	 * Get flags
	 */
	pure bool hasFlag(string flag_name)
	{
		if (
			flag_name == "async" or
			flag_name == "export" or
			flag_name == "static" or
			flag_name == "const" or
			flag_name == "public" or
			flag_name == "private" or
			flag_name == "declare" or
			flag_name == "protected" or
			flag_name == "serializable" or
			flag_name == "cloneable" or
			flag_name == "assignable" or
			flag_name == "memorize" or
			flag_name == "multiblock" or
			flag_name == "lambda" or
			flag_name == "pure" or
			flag_name == "props"
		){
			return true;
		}
		return false;
	}
}