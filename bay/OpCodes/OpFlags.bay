/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellLang.OpCodes.BaseOpCode;


export class OpFlags extends BaseOpCode{
	
	public string op = "op_flags";
	public bool p_async = false;
	public bool p_export = false;
	public bool p_static = false;
	public bool p_const = false;
	public bool p_public = false;
	public bool p_private = false;
	public bool p_protected = false;
	public bool p_declare = false;
	public bool p_serializable = false;
	public bool p_cloneable = false;
	public bool p_assignable = false;
	public bool p_safe = false;
	
	
	
	
	/**
	 * Read is Flag
	 */
	public boolean isFlag(string name)
	{
		if (not OpFlags::hasFlag(name))	return false;
		return this.takeValue(name);
	}
	
	
	
	/**
	 * Returns name of variables to serialization
	 * @return Vector<string>
	 */
	public void getVariablesNames(Vector<string> names)
	{
		parent::getVariablesNames(names);
		names.push("async");
		names.push("export");
		names.push("static");
		names.push("const");
		names.push("public");
		names.push("private");
		names.push("declare");
		names.push("protected");
		names.push("serializable");
		names.push("cloneable");
		names.push("assignable");
		names.push("safe");
	}
	
	
	
	/**
	 * Returns instance of the value by variable name
	 * @param string variable_name
	 * @return var
	 */
	public var takeValue(string variable_name, var default_value = null)
	{
		if (variable_name == 'async') return this.p_async;
		else if (variable_name == 'export') return this.p_export;
		else if (variable_name == 'static') return this.p_static;
		else if (variable_name == 'const') return this.p_const;
		else if (variable_name == 'public') return this.p_public;
		else if (variable_name == 'private') return this.p_private;
		else if (variable_name == 'declare') return this.p_declare;
		else if (variable_name == 'protected') return this.p_protected;
		else if (variable_name == 'serializable') return this.p_serializable;
		else if (variable_name == 'cloneable') return this.p_cloneable;
		else if (variable_name == 'assignable') return this.p_assignable;
		else if (variable_name == 'safe') return this.p_safe;
		return parent::takeValue(variable_name, default_value);
	}
	
	
	
	/**
	 * Set new value instance by variable name
	 * @param string variable_name
	 * @param var value
	 */
	public void assignValue(string variable_name, var value)
	{
		if (variable_name == 'async') this.p_async = value;
		else if (variable_name == 'export') this.p_export = value;
		else if (variable_name == 'static') this.p_static = value;
		else if (variable_name == 'const') this.p_const = value;
		else if (variable_name == 'public') this.p_public = value;
		else if (variable_name == 'private') this.p_private = value;
		else if (variable_name == 'declare') this.p_declare = value;
		else if (variable_name == 'protected') this.p_protected = value;
		else if (variable_name == 'serializable') this.p_serializable = value;
		else if (variable_name == 'cloneable') this.p_cloneable = value;
		else if (variable_name == 'assignable') this.p_assignable = value;
		else if (variable_name == 'safe') this.p_safe = value;
		else parent::assignValue(variable_name, value);
	}
	
	
	
	/**
	 * Assign flag
	 */
	public void assignFlag(string flag_name)
	{
		if (self::hasFlag(flag_name))
		{
			this.assignValue(flag_name, true);
			return true;
		}
		return false;
	}
	
	
	
	/**
	 * Get flags
	 */
	public static Vector<string> getFlags()
	{
		return (new Vector<string>())
			.push("async")
			.push("export")
			.push("static")
			.push("const")
			.push("public")
			.push("private")
			.push("declare")
			.push("protected")
			.push("serializable")
			.push("cloneable")
			.push("assignable")
			.push("safe")
		;
	}
	
	
	
	/**
	 * Get flags
	 */
	public static boolean hasFlag(string flag_name)
	{
		if (
			flag_name == "async" or
			flag_name == "export" or
			flag_name == "static" or
			flag_name == "const" or
			flag_name == "public" or
			flag_name == "private" or
			flag_name == "declare" or
			flag_name == "protected" or
			flag_name == "serializable" or
			flag_name == "cloneable" or
			flag_name == "assignable"
		){
			return true;
		}
		return false;
	}
}