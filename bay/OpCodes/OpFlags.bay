/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;

use BayrellLang.OpCodes.BaseOpCode;


export class OpFlags extends BaseOpCode{
	
	public string op = "op_flags";
	
	public bool p_async = false;
	public bool p_export = false;
	public bool p_static = false;
	public bool p_const = false;
	public bool p_public = false;
	public bool p_private = false;
	public bool p_protected = false;
	public bool p_declare = false;
	/*public bool p_pointer = false;*/
	
	
	static const array FLAGS = [
		'export', 'static', 'const', 'public', 'private', 'declare', 'protected', 
		'async',
		/*'pointer'*/
	];
	
	
	public void setFlag(string name, bool value){
		if (name == 'export') this.p_export = value;
		else if (name == 'static') this.p_static = value;
		else if (name == 'const') this.p_const = value;
		else if (name == 'public') this.p_public = value;
		else if (name == 'private') this.p_private = value;
		else if (name == 'declare') this.p_declare = value;
		else if (name == 'protected') this.p_protected = value;
		else if (name == 'async') this.p_async = value;
		/*else if (name == 'pointer') this.p_pointer = value;*/
	}
	
	public void getFlag(string name){
		if (name == 'export') return this.p_export;
		else if (name == 'static') return this.p_static;
		else if (name == 'const') return this.p_const;
		else if (name == 'public') return this.p_public;
		else if (name == 'private') return this.p_private;
		else if (name == 'declare') return this.p_declare;
		else if (name == 'protected') return this.p_protected;
		else if (name == 'async') return this.p_async;
		/*else if (name == 'pointer') return this.p_pointer;*/
		return false;
	}
	
}