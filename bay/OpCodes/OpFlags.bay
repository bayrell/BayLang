/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Bayrell.Lang.OpCodes;

use Runtime.CoreStruct;


struct OpFlags extends CoreStruct
{
	public bool p_async = false;
	public bool p_export = false;
	public bool p_static = false;
	public bool p_const = false;
	public bool p_public = false;
	public bool p_private = false;
	public bool p_protected = false;
	public bool p_declare = false;
	public bool p_serializable = false;
	public bool p_cloneable = false;
	public bool p_assignable = false;
	public bool p_memorize = false;
	public bool p_lambda = false;
	
	
	/**
	 * Read is Flag
	 */
	public bool isFlag(string name)
	{
		if (not OpFlags::hasFlag(name))	return false;
		return this.takeValue("p_"~name);
	}
	
	
	
	/**
	 * Get flags
	 */
	lambda Collection<string> getFlags()
	{
		return 
		[
			"async",
			"export",
			"static",
			"const",
			"public",
			"private",
			"declare",
			"protected",
			"serializable",
			"cloneable",
			"assignable",
			"memorize",
			"lambda",
		];
	}
	
	
	
	/**
	 * Get flags
	 */
	lambda bool hasFlag(string flag_name)
	{
		if (
			flag_name == "async" or
			flag_name == "export" or
			flag_name == "static" or
			flag_name == "const" or
			flag_name == "public" or
			flag_name == "private" or
			flag_name == "declare" or
			flag_name == "protected" or
			flag_name == "serializable" or
			flag_name == "cloneable" or
			flag_name == "assignable" or
			flag_name == "memorize" or
			flag_name == "lambda"
		){
			return true;
		}
		return false;
	}
}