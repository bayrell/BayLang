/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayLang.OpCodes;

use Runtime.lib;
use Runtime.Serializer;
use Runtime.Exceptions.RuntimeException;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpUse;


class OpModule extends BaseOpCode
{
	Dict<string> uses = null;
	Collection<BaseOpCode> items = null;
	bool is_component = false;
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		parent(serializer, data);
		serializer.process(this, "is_component", data);
		serializer.process(this, "items", data);
		serializer.process(this, "uses", data);
	}
	
	
	/**
	 * Add module
	 */
	void addModule(string class_name, string alias_name = "", bool is_component = true)
	{
		if (alias_name != "")
		{
			this.uses.set(alias_name, class_name);
		}
		
		/* Add op_code */
		int pos = this.items.find(lib::isInstance(classof OpNamespace));
		OpUse op_code = new OpUse
		{
			"alias": alias_name,
			"name": class_name,
			"is_component": is_component,
		};
		if (pos != -1)
		{
			pos = pos + 1;
			while (pos < this.items.count())
			{
				BaseOpCode item = this.items.get(pos);
				if (item == null) break;
				if (not (item instanceof OpUse)) break;
				if (rs::compare(class_name, item.name) == -1) break;
				pos = pos + 1;
			}
			this.items.insert(pos, op_code);
		}
		else
		{
			this.items.prepend(op_code);
		}
	}
	
	
	/**
	 * Has module
	 */
	bool hasModule(string alias_name) => this.uses.has(alias_name);
	
	
	/**
	 * Find alias name
	 */
	string findModule(string class_name)
	{
		Collection keys = this.uses.keys();
		for (int i=0; i<keys.count(); i++)
		{
			string key_name = keys.get(i);
			if (this.uses.get(key_name) == class_name) return key_name;
		}
		return null;
	}
	
	
	/**
	 * Find class
	 */
	OpDeclareClass findClass() =>
		this.items ? this.items.findItem(lib::isInstance(classof OpDeclareClass)) : null
	;
	
	
	/**
	 * Find class by name
	 */
	OpDeclareClass findClassByName(string name) =>
		this.items.findItem(
			bool (BaseOpCode item) use (name)
			{
				if (not(item instanceof OpDeclareClass)) return false;
				if (item.name == name) return false;
				return true;
			}
		)
	;
}