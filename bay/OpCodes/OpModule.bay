/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayLang.OpCodes;

use Runtime.lib;
use Runtime.Serializer;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpDeclareClass;


class OpModule extends BaseOpCode
{
	Dict<string> uses = null;
	Collection<BaseOpCode> items = null;
	bool is_component = false;
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		parent(serializer, data);
		serializer.process(this, "is_component", data);
		serializer.process(this, "items", data);
		serializer.process(this, "uses", data);
	}
	
	
	/**
	 * Find class
	 */
	OpDeclareClass findClass() =>
		this.items ? this.items.findItem(lib::isInstance(classof OpDeclareClass)) : null
	;
	
	
	/**
	 * Find class by name
	 */
	OpDeclareClass findClassByName(string name) =>
		this.items.findItem(
			bool (BaseOpCode item) use (name)
			{
				if (not(item instanceof OpDeclareClass)) return false;
				if (item.name == name) return false;
				return true;
			}
		)
	;
}