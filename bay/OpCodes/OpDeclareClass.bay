/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace Bayrell.Lang.OpCodes;

use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAnnotation;
use Bayrell.Lang.OpCodes.OpAssign;
use Bayrell.Lang.OpCodes.OpComment;
use Bayrell.Lang.OpCodes.OpDeclareFunction;
use Bayrell.Lang.OpCodes.OpFlags;
use Bayrell.Lang.OpCodes.OpTypeIdentifier;


struct OpDeclareClass extends BaseOpCode
{
	static const string KIND_CLASS = "class";
	static const string KIND_STRUCT = "struct";
	static const string KIND_INTERFACE = "interface";
	
	string op = "op_class";
	string kind = "";
	string name = "";
	string extend_name = "";
	Collection<OpAnnotation> annotations = null;
	Collection<OpComment> comments = null;
	Collection<OpTypeIdentifier> template = null;
	OpFlags flags = null;
	OpDeclareFunction fn_create = null;
	OpDeclareFunction fn_destroy = null;
	OpTypeIdentifier class_extends = null;
	Collection<OpTypeIdentifier> class_implements = null;
	Collection<OpAssign> vars = null;
	Collection<OpDeclareFunction> functions = null;
	Collection<BaseOpCode> items = null;
	bool is_static = false;
	bool is_declare = false;
}