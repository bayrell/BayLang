/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayLang.OpCodes;

use Runtime.Serializer;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAnnotation;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpFlags;
use BayLang.OpCodes.OpTypeIdentifier;


class OpDeclareClass extends BaseOpCode
{
	static const string KIND_CLASS = "class";
	static const string KIND_STRUCT = "struct";
	static const string KIND_INTERFACE = "interface";
	
	string op = "op_class";
	string kind = "";
	string name = "";
	string extend_name = "";
	Collection<OpAnnotation> annotations = null;
	Collection<OpComment> comments = null;
	Collection<OpTypeIdentifier> template = null;
	OpFlags flags = null;
	OpDeclareFunction fn_create = null;
	OpDeclareFunction fn_destroy = null;
	OpTypeIdentifier class_extends = null;
	Collection<OpTypeIdentifier> class_implements = null;
	Collection<OpAssign> vars = null;
	Collection<OpDeclareFunction> functions = null;
	Collection<BaseOpCode> items = null;
	bool is_abstract = false;
	bool is_static = false;
	bool is_declare = false;
	bool is_component = false;
	bool is_model = false;
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		parent(serializer, data);
		serializer.process(this, "annotations", data);
		serializer.process(this, "class_extends", data);
		serializer.process(this, "class_implements", data);
		serializer.process(this, "comments", data);
		serializer.process(this, "extend_name", data);
		serializer.process(this, "flags", data);
		serializer.process(this, "fn_create", data);
		serializer.process(this, "fn_destroy", data);
		serializer.process(this, "functions", data);
		serializer.process(this, "is_abstract", data);
		serializer.process(this, "is_component", data);
		serializer.process(this, "is_declare", data);
		serializer.process(this, "is_model", data);
		serializer.process(this, "items", data);
		serializer.process(this, "kind", data);
		serializer.process(this, "name", data);
		serializer.process(this, "template", data);
		serializer.process(this, "vars", data);
	}
	
	
	/**
	 * Find function
	 */
	OpDeclareFunction findFunction(string name) =>
		this.items.findItem(
			bool (BaseOpCode op_code) use (name) =>
				op_code instanceof OpDeclareFunction and op_code.name == name
		)
	;
}