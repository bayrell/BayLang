/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayrellLang.OpCodes;


use Runtime.Vector;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpHtmlAttribute;


class OpHtmlTag extends BaseOpCode{
	
	public serializable string op = "op_html_tag";
	public serializable string tag_name = "";
	public serializable Vector<OpHtmlAttribute> attributes = null;
	public serializable Vector<mixed> spreads = null;
	public serializable Vector<BaseOpCode> childs = null;
	public serializable bool is_plain = false;
	
	
	
	/**
	 * Find attribute by attr_name
	 * @param string attr_name
	 * @return OpHtmlAttribute
	 */
	OpHtmlAttribute findAttribute(string attr_name)
	{
		if (this.attributes == null) return null;
		
		for (int i=0; i<this.attributes.count(); i++)
		{
			OpHtmlAttribute item = this.attributes.item(i);
			if (item.key == attr_name)
				return item;
		}
		
		return null;
	}
	
	
	
	/**
	 * Remove attribute by attr_name
	 * @param string attr_name
	 */
	void removeAttribute(string attr_name)
	{
		this.attributes = this.attributes.filter(
			bool (OpHtmlAttribute item) use (attr_name)
			{
				return item.key != attr_name;
			}
		);
	}
	
	
	
	/**
	 * Set attribute by attr_name
	 * @param string attr_name
	 * @param mixed value
	 */
	void setAttribute(string attr_name, mixed value)
	{
		if (this.attributes == null) return;
		
		for (int i=0; i<this.attributes.count(); i++)
		{
			OpHtmlAttribute item = this.attributes.item(i);
			if (item.key == attr_name)
			{
				item.value = value;
				return ;
			}
		}
		
		this.attributes.push(new OpHtmlAttribute({"key":attr_name, "value":value}));
	}
}