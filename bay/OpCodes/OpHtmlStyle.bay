/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace BayLang.OpCodes;

use Runtime.Reference;
use Runtime.Serializer;
use BayLang.Caret;
use BayLang.TokenReader;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.LangBay.ParserBay;
use BayLang.LangBay.ParserBayHtml;
use BayLang.OpCodes.BaseOpCode;


class OpHtmlStyle extends BaseOpCode
{
	string op = "op_html_style";
	string content = "";
	bool is_global = false;
	BaseOpCode value = null;
	Dict<string> styles = {};
	
	
	/**
	 * Serialize object
	 */
	void serialize(Serializer serializer, Map data)
	{
		parent(serializer, data);
		serializer.process(this, "content", data);
		serializer.process(this, "is_global", data);
		serializer.process(this, "value", data);
	}
	
	
	/**
	 * Setup styles from content
	 */
	void setupStyles()
	{
		TokenReader reader = new TokenReader();
		reader.init(
			new Caret{
				"content": new Reference(this.content),
			}
		);
		
		this.styles = {};
		while (not reader.eof() and reader.nextToken() == ".")
		{
			string selector = this.readSelector(reader);
			string code = this.readCssBlock(reader);
			this.styles.set(selector, code);
		}
	}
	
	
	/**
	 * Setup content from styles
	 */
	void setupContent(Dict params = null)
	{
		/* Get items */
		Collection items = [];
		Collection keys = this.styles.keys().sort();
		for (int i=0; i<keys.count(); i++)
		{
			string key_name = keys.get(i);
			items.push(key_name ~ "{");
			items.push(this.styles.get(key_name));
			items.push("}");
		}
		
		/* Set content */
		this.content = rs::join("\n", items);
		try
		{
			/* Parse new content */
			ParserBay parser = new ParserBay();
			parser = parser::reset(parser);
			parser = parser::setContent(parser, this.content ~ "}");
			if (params.has("current_namespace_name"))
				parser <= current_namespace_name <= params.get("current_namespace_name");
			if (params.has("current_class_name"))
				parser <= current_class_name <= params.get("current_class_name");
			if (params.has("uses"))
				parser <= uses <= params.get("uses");
			list res = parser.parser_html::readCssBody(parser);
			
			/* Set new value */
			this.value = res.get(1);
		}
		catch (ParserUnknownError e)
		{
		}
	}
	
	
	/**
	 * Read selector
	 */
	string readSelector(TokenReader reader)
	{
		Collection items = [];
		while (not reader.eof() and reader.nextToken() != "{")
		{
			items.push(reader.readToken());
		}
		return rs::join("", items);
	}
	
	
	/**
	 * Read css block
	 */
	string readCssBlock(TokenReader reader)
	{
		reader.matchToken("{");
		Caret caret = reader.main_caret;
		caret.skipSpace();
		
		Collection items = [];
		while (not caret.eof() and caret.nextChar() != "}")
		{
			string ch = caret.readChar();
			if (ch != "\t") items.push(ch);
		}
		
		reader.init(caret);
		reader.matchToken("}");
		
		return rs::trim(rs::join("", items));
	}
}