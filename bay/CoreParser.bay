/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang;

use Runtime.BaseStruct;
use Runtime.FakeStruct;
use Runtime.lib;
use Runtime.rs;
use Runtime.Reference;
use Runtime.Interfaces.ContextInterface;
use BayLang.Caret;
use BayLang.CoreToken;
use BayLang.SaveOpCode;
use BayLang.Exceptions.ParserExpected;
use BayLang.OpCodes.BaseOpCode;


struct CoreParser extends BaseStruct
{
	/* Settings */
	int tab_size = 4;
	
	/* Content */
	string file_name = "";
	Reference content = null;
	/*string content = "";*/
	int content_sz = 0;
	
	/* Work */
	Caret caret = null;
	bool find_ident = true;
	
	
	/**
	 * Returns true if eof
	 */
	bool isEof() => this.caret.pos >= this.content_sz;
	
	
	/**
	 * Returns caret
	 */
	Caret getCaret() => this.caret.clone{
		"file_name": this.file_name,
		"content": this.content,
		"content_sz": this.content_sz,
	};
	
	
	/**
	 * Reset parser
	 */
	pure CoreParser reset(CoreParser parser) =>
		parser.copy({
			"caret": new Caret{},
			"token": null,
		})
	;
	
	
	/**
	 * Set content
	 */
	pure CoreParser setContent(CoreParser parser, string content) =>
		parser.copy({
			"content": new Reference(content), "content_sz": rs::strlen(content)
		})
	;
	
	
	/**
	 * Parse file and convert to BaseOpCode
	 */
	pure CoreParser parse(CoreParser parser, string content)
	{
		parser = static::reset(parser);
		parser = static::setContent(parser, content);
		while ( parser.caret.pos < parser.content_sz )
		{
			parser = parser::nextToken(parser);
		}
		return parser;
	}
}