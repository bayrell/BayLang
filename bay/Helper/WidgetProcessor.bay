/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Helper;

use Runtime.fs;
use Runtime.lib;
use Runtime.BaseObject;
use BayLang.Helper.Module;
use BayLang.Exceptions.ParserUnknownError;
use BayLang.LangBay.ParserBay;
use BayLang.LangBay.TranslatorBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpNew;
use BayLang.OpCodes.OpReturn;
use BayLang.OpCodes.OpString;
use BayLang.OpCodes.OpTypeIdentifier;
use BayLang.Helper.Widget;


class WidgetProcessor extends BaseObject
{
	Module module = null;
	BaseOpCode op_code = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(Module module)
	{
		parent();
		this.module = module;
	}
	
	
	/**
	 * Returns file path
	 */
	string getModuleDescriptionFilePath() => fs::join([
		this.module.getSourceFolderPath(),
		"ModuleDescription.bay"
	]);
	
	
	/**
	 * Load widgets
	 */
	async void load()
	{
		string file_path = this.getModuleDescriptionFilePath();
		
		/* Read file */
		if (not(await fs::isFile(file_path))) return;
		string content = await fs::readFile(file_path);
		
		try
		{
			/* Parse file */
			ParserBay parser = new ParserBay();
			list res = parser::parse(parser, content);
			this.op_code = res.get(1);
		}
		catch (ParserUnknownError e)
		{
		}
	}
	
	
	/**
	 * Save op_code
	 */
	async void save()
	{
		string file_path = this.getModuleDescriptionFilePath();
		
		/* Translate */
		TranslatorBay translator = new TranslatorBay();
		list res = translator::translate(translator, this.op_code);
		string content = res.get(1);
		
		/* Save content */
		await fs::saveFile(file_path, content);
	}
	
	
	/**
	 * Add widget
	 */
	async void addWidget(string widget_name)
	{
		BaseOpCode op_code = this.op_code;
		if (not(op_code instanceof OpModule)) return;
		
		OpDeclareClass class_op_code = op_code.findClass();
		if (not class_op_code) return;
		
		OpDeclareFunction entities_op_code = class_op_code.findFunction("entities");
		if (not entities_op_code) return;
		
		/* Create op_code */
		OpNew op_code_widget = new OpNew
		{
			"args":
			[
				new OpString
				{
					"value": widget_name,
				}
			],
			"value": new OpTypeIdentifier
			{
				"entity_name": new OpEntityName
				{
					"names": ["Widget"]
				}
			},
		};
		
		/* Add widget */
		OpCollection expression = entities_op_code.getExpression()
		expression.values.push(op_code_widget);
	}
	
	
	/**
	 * Returns widgets
	 */
	Collection<string> getWidgets()
	{
		BaseOpCode op_code = this.op_code;
		if (not(op_code instanceof OpModule)) return [];
		
		OpDeclareClass class_op_code = op_code.findClass();
		if (not class_op_code) return [];
		
		OpDeclareFunction entities_op_code = class_op_code.findFunction("entities");
		if (not entities_op_code) return [];
		
		return static::findWidgets(entities_op_code);
	}
	
	
	/**
	 * Find widgets
	 */
	static Collection<string> findWidgets(OpDeclareFunction op_code)
	{
		OpCollection expression = op_code.getExpression();
		
		if (expression == null) return [];
		if (not(expression instanceof OpCollection)) return [];
		if (expression.values == null) return [];
		
		return expression.values
			.filter(
				bool (BaseOpCode op_code) => static::isWidget(op_code)
			)
			.map(
				string (BaseObject op_code) => op_code.args.get(0).value
			)
		;
	}
	
	
	/**
	 * Returns true if op_code is widget
	 */
	static bool isWidget(BaseOpCode op_code)
	{
		if (not(op_code instanceof OpNew)) return false;
		if (not(op_code.value instanceof OpTypeIdentifier)) return false;
		if (op_code.value.entity_name.names.count() != 1) return false;
		if (op_code.value.entity_name.names.get(0) != "Widget") return false;
		if (op_code.args.count() != 1) return false;
		if (not(op_code.args.get(0) instanceof OpString)) return false;
		return true;
	}
}