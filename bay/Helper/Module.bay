/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Helper;

use Runtime.fs;
use Runtime.lib;
use Runtime.BaseObject;
use Runtime.SerializeInterface;
use Runtime.Serializer;
use BayLang.Helper.Cache;
use BayLang.Helper.Project;
use BayLang.Helper.Widget;
use BayLang.Helper.RouteProcessor;
use BayLang.Helper.WidgetProcessor;


class Module extends BaseObject implements SerializeInterface
{
	Project project = null;
	string path = "";
	string src_path = "";
	string name = "";
	Dict submodules = null;
	Vector<Map> routes = null;
	Vector<string> groups = null;
	Vector<Widget> widgets = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(Project project)
	{
		parent();
		this.project = project;
	}
	
	
	/**
	 * Read project from folder
	 */
	static Module readModule(Project project, string path)
	{
		Module module = new Module(project);
		module.initFromFile(path);
		if (not module.exists()) return null;
		return module;
	}
	
	
	/**
	 * Init module from file
	 */
	void initFromFile(string module_path)
	{
		this.info = null;
		string file_name = rs::basename(module_path);
		
		if (file_name == "") return;
		if (file_name[0] == ".") return;
		
		string module_json_path = module_path ~ "/" ~ "module.json";
		if (not(await fs::isFile(module_json_path))) return;
		
		/* Read file */
		string content = await fs::readFile(module_json_path);
		Dict module_info = rtl::json_decode(content);
		
		/* Init module */
		this.init(module_path, module_info);
	}
	
	
	/**
	 * Init module
	 */
	void init(string module_path, Dict module_info)
	{
		this.info = null;
		
		if (not module_info) return;
		if (not module_info.has("name")) return;
		
		this.path = module_path;
		this.name = module_info.get("name");
		this.src_path = module_info.get("src");
		this.groups = module_info.get("groups");
		this.submodules = module_info.get("modules");
	}
	
	
	/**
	 * Process project cache
	 */
	void serialize(Serializer serializer, Map data)
	{
		serializer.process(this, "groups", data);
		serializer.process(this, "name", data);
		serializer.process(this, "path", data);
		serializer.process(this, "routes", data);
		serializer.process(this, "src_path", data);
		serializer.process(this, "submodules", data);
		serializer.processItems(this, "widgets", data,
			Widget (Dict widget) => new Widget(this)
		);
	}
	
	
	/**
	 * Returns true if project is exists
	 */
	void exists() => this.path != null;
	
	
	/**
	 * Returns module path
	 */
	string getPath() => this.path;
	
	
	/**
	 * Returns module name
	 */
	string getName() => this.name;
	
	
	/**
	 * Returns routes
	 */
	Collection<Dict> getRoutes() => this.routes ? this.routes : [];
	
	
	/**
	 * Returns route by name
	 */
	Dict getRoute(string route_name) =>
		this.getRoutes().findItem(lib::equalAttr("name", route_name))
	;
	
	
	/**
	 * Returns widgets
	 */
	Collection<Widget> getWidgets() => this.widgets ? this.widgets : [];
	
	
	/**
	 * Returns widget by name
	 */
	Widget getWidget(string widget_name) =>
		this.getWidgets().findItem(lib::equalAttr("name", widget_name))
	;
	
	
	/**
	 * Returns source path
	 */
	string getSourcePath() => fs::join([ this.getPath(), this.src_path ]);
	
	
	/**
	 * Returns class name file path
	 */
	string resolveClassName(string class_name)
	{
		/* Check if class name start with module name */
		int module_name_sz = rs::strlen(this.getName());
		if (rs::substr(class_name, 0, module_name_sz) != this.getName())
		{
			return;
		}
		
		/* Remove module name from class name */
		class_name = rs::substr(class_name, module_name_sz);
		
		/* Return path to class name */
		string path = this.getSourcePath();
		Vector<string> arr = rs::split(".", class_name);
		arr.prepend(path);
		return fs::join(arr) ~ ".bay";
	}
	
	
	/**
	 * Returns true if module has group
	 */
	bool hasGroup(string group_name)
	{
		if (rs::substr(group_name, 0, 1) != "@") return false;
		group_name = rs::substr(group_name, 1);
		if (this.groups == null) return false;
		if (this.groups.indexOf(group_name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Returns true if this module contains in module list include groups
	 */
	bool inModuleList(Collection<string> module_names)
	{
		for (int i=0; i<module_names.count(); i++)
		{
			string module_name = module_names.get(i);
			if (this.name == module_name) return true;
			if (this.hasGroup(module_name)) return true;
		}
		return false;
	}
	
	
	/**
	 * Rename module
	 */
	void rename(string new_module_name)
	{
		return;
		
		if (not this.exists()) return;
		
		string new_file_name = rs::lower(new_module_name);
		string old_file_name = this.file_name;
		
		/* Set new module name */
		this.info.set("name", new_module_name);
		
		/* Save file */
		string module_path = "/data/projects/" ~ old_file_name;
		string module_json_path = module_path ~ "/" ~ "module.json";
		string content = rtl::json_encode(this.info, rtl::JSON_PRETTY);
		await fs::saveFile(module_json_path, content);
		
		/* Rename folder */
		#ifcode PHP then
		rename($this.path, "/data/projects/" . $new_file_name);
		#endif
	}
	
	
	/**
	 * Load routes
	 */
	async void loadRoutes()
	{
		RouteProcessor route_processor = new RouteProcessor(this);
		await route_processor.load();
	}
	
	
	/**
	 * Load widgets
	 */
	async void loadWidgets()
	{
		WidgetProcessor widget_processor = new WidgetProcessor(this);
		await widget_processor.load();
	}
}