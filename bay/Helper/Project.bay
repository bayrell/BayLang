/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.Helper;

use Runtime.fs;
use Runtime.BaseObject;
use Runtime.Serializer;
use BayLang.Helper.Module;
use BayLang.Helper.Widget;


class Project extends BaseObject
{
	string path = "";
	Map info = null;
	Map<Module> modules = null;
	
	
	/**
	 * Read projects
	 */
	async static Collection<Project> readProjects(string projects_path)
	{
		if (not(await fs::isFolder(projects_path))) return [];
		
		Vector<string> result = [];
		Collection<string> items = await fs::listDir(projects_path);
		for (int i=0; i<items.count(); i++)
		{
			string file_name = items.get(i);
			Project project = await static::readProject(fs::join([projects_path, file_name]));
			if (project) result.push(project);
		}
		return result;
	}
	
	
	/**
	 * Read project from folder
	 */
	async static Project readProject(string project_path)
	{
		Project project = new Project();
		await project.initFromFile(project_path);
		if (not project.exists()) return null;
		return project;
	}
	
	
	/**
	 * Init from file
	 */
	async void initFromFile(string project_path)
	{
		string file_name = rs::basename(project_path);
		
		if (file_name == "") return;
		if (file_name[0] == ".") return;
		
		string project_json_path = fs::join([project_path, "project.json"]);
		if (not(await fs::isFolder(project_path))) return;
		if (not(await fs::isFile(project_json_path))) return;
		
		/* Read file */
		string content = await fs::readFile(project_json_path);
		Dict project_info = rtl::json_decode(content);
		
		/* Init project */
		this.init(project_path, project_info);
		
		/* Load data from cache */
		await this.loadCache();
	}
	
	
	/**
	 * Init project
	 */
	void init(string project_path, Dict project_info)
	{
		if (not project_info) return;
		if (not project_info.has("name")) return;
		
		this.path = project_path;
		this.info = project_info;
	}
	
	
	/**
	 * Returns project cache path
	 */
	string getCachePath() =>
		this.exists()
			? fs::join([this.getPath(), ".cache", "cache.json"])
			: ""
	;
	
	
	/**
	 * Load project from cache
	 */
	async void loadCache()
	{
		/* Get json path */
		string cache_path = this.getCachePath();
		if (not(await fs::isFile(cache_path))) return;
		
		/* Create serializer */
		Serializer serializer = new Serializer();
		
		/* Read file */
		string content = await fs::readFile(cache_path);
		Dict data = serializer.json_decode(content);
		if (not data) return;
		
		/* Import data */
		serializer.setCallback("projectCache");
		serializer.setFlag(Serializer::ALLOW_CLASS_NAME);
		serializer.setFlag(Serializer::IMPORT);
		this.projectCache(serializer, data);
	}
	
	
	/**
	 * Save project to cache
	 */
	async void saveCache()
	{
		/* Get json folder */
		string cache_path = this.getCachePath();
		string folder_path = rs::dirname(cache_path);
		if (not(await fs::isFolder(folder_path)))
		{
			await fs::mkdir(folder_path);
		}
		
		/* Create serializer */
		Serializer serializer = new Serializer();
		serializer.setCallback("projectCache");
		/*serializer.setFlag(Serializer::ALLOW_CLASS_NAME);*/
		serializer.setFlag(Serializer::EXPORT);
		serializer.setFlag(Serializer::JSON_PRETTY);
		
		/* Export data */
		Dict data = {};
		this.projectCache(serializer, data);
		
		/* Save cache to file */
		string content = serializer.json_encode(data);
		await fs::saveFile(cache_path, content);
	}
	
	
	/**
	 * Process project cache
	 */
	void projectCache(Serializer serializer, Map data)
	{
		serializer.processItems(this, "modules", data,
			Module (Dict module) => new Module(this)
		);
	}
	
	
	/**
	 * Returns true if project is exists
	 */
	void exists() => this.info != "";
	
	
	/**
	 * Returns project path
	 */
	string getPath() => this.exists() ? this.path : "";
	
	
	/**
	 * Returns project file_name
	 */
	string getID() => this.exists() ? rs::basename(this.path) : "";
	
	
	/**
	 * Returns project name
	 */
	string getName() => this.exists() ? this.info.get("name") : "";
	
	
	/**
	 * Set project name
	 */
	void setName(string name)
	{
		if (not this.exists()) return;
		this.info.set("name", name);
	}
	
	
	/**
	 * Returns project description
	 */
	string getDescription() => this.exists() ? this.info.get("description") : "";
	
	
	/**
	 * Set project description
	 */
	void setDescription(string description)
	{
		if (not this.exists()) return;
		this.info.set("description", description);
	}
	
	
	/**
	 * Returns project type
	 */
	string getType() => this.exists() ? this.info.get("type") : "";
	
	
	/**
	 * Set project type
	 */
	void setType(string project_type)
	{
		if (not this.exists()) return;
		this.info.set("type", project_type);
	}
	
	
	/**
	 * Returns module
	 */
	Module getModule(string module_name) => this.modules.get(module_name);
	
	
	/**
	 * Returns widget
	 */
	async Widget getWidget(string widget_name)
	{
		if (not this.modules) return null;
		
		/* Find widget by name */
		Collection<string> modules = this.modules.keys().sort();
		for (int i=0; i<modules.count(); i++)
		{
			string module_name = modules.get(i);
			Module module = this.modules.get(module_name);
			Widget widget = module.getWidget(widget_name);
			if (widget) return widget;
		}
		
		return null;
	}
	
	
	/**
	 * Save project
	 */
	async void saveInfo()
	{
		string project_json_path = fs::join([this.path, "project.json"]);
		string content = rtl::json_encode(this.info, rtl::JSON_PRETTY);
		await fs::saveFile(project_json_path, content);
	}
	
	
	/**
	 * Read modules
	 */
	async void readModules()
	{
		if (not this.exists()) return;
		
		this.modules = {};
		
		/* Read sub modules */
		await this.readSubModules(this.path, this.info.get("modules"));
	}
	
	
	/**
	 * Load modules
	 */
	async void loadModules()
	{
		Collection<string> modules = this.modules.keys().sort();
		for (int i=0; i<modules.count(); i++)
		{
			string module_name = modules.get(i);
			Module module = this.modules.get(module_name);
			await module.loadRoutes();
			await module.loadWidgets();
		}
	}
	
	
	/**
	 * Read sub modules
	 */
	async void readSubModules(string path, Collection<Dict> items)
	{
		if (not items) return;
		for (int i=0; i<items.count(); i++)
		{
			Dict item = items.get(i);
			string module_src = item.get("src");
			string module_type = item.get("type");
			string folder_path = fs::join([ path, module_src ]);
			
			/* Read from folder */
			if (module_type == "folder")
			{
				await this.readModuleFromFolder(folder_path);
			}
			
			/* Read module */
			else if (module_type == "folder")
			{
				Module module = Module::readModule(this, folder_path);
				if (module)
				{
					/* Set module */
					this.modules.set(module.getName(), module);
					
					/* Read sub modules */
					await this.readSubModules(module.getPath(), module.getInfo().get("modules"));
				}
			}
		}
	}
	
	
	/**
	 * Read sub modules
	 */
	async void readModuleFromFolder(string folder_path)
	{
		if (not(await fs::isFolder(folder_path))) return;
		
		Collection<string> items = await fs::listDir(folder_path);
		for (int i=0; i<items.count(); i++)
		{
			string file_name = items.get(i);
			
			/* Read module */
			Module module = Module::readModule(this, fs::join([folder_path, file_name]));
			if (module)
			{
				/* Set module */
				this.modules.set(module.getName(), module);
				
				/* Read sub modules */
				this.readSubModules(module.getPath(), module.submodules);
			}
		}
	}
}