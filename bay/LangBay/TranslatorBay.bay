/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangBay;

use Runtime.re;
use Runtime.BaseObject;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.LangBay.TranslatorBayExpression;


class TranslatorBay extends BaseObject
{
	int opcode_level = 0;
	int indent_level = 0;
	string indent = "\t";
	string crlf = "\n";
	
	/* Translators */
	TranslatorBayExpression expression = new TranslatorBayExpression(this);
	
	
	/**
	 * Reset translator
	 */
	void reset()
	{
		this.opcode_level = 0;
		this.indent_level = 0;
	}
	
	
	/**
	 * Increment indent level
	 */
	void levelInc()
	{
		this.indent_level = this.indent_level + 1;
	}
	
	
	/**
	 * Decrease indent level
	 */
	void levelDec()
	{
		this.indent_level = this.indent_level - 1;
	}
	
	
	/**
	 * Output content with indent
	 */
	string s(Collection<string> s)
	{
		if (s.count() == 0) return "";
		return this.crlf ~ rs::str_repeat(this.indent, this.indent_level) ~ rs::join("", s);
	}
	
	
	/**
	 * Output content with opcode level
	 */
	string o(string s, int opcode_level_in, int opcode_level_out)
	{
		if (opcode_level_in < opcode_level_out) return "(" ~ s ~ ")";
		return s;
	}
	
	
	/**
	 * Returns string
	 */
	string toString(string s)
	{
		s = re::replace('\\\\', '\\\\', s);
		s = re::replace('"', '\\\"', s);
		s = re::replace('\n', '\\n', s);
		s = re::replace('\r', '\\r', s);
		s = re::replace('\t', '\\t', s);
		return "\"" ~ s ~ "\"";
	}
	
	
	/**
	 * Translate BaseOpCode
	 */
	pure list<TranslatorBay, string> translate(TranslatorBay t, BaseOpCode op_code)
	{
		Collection<string> content = [];
		t.reset();
		/*t.run(op_code, content);*/
		string result = rs::join(t.crlf, content);
		return [t, result];
	}
}