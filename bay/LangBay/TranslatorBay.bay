/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang;

use BayrellLang.CommonTranslator;
use BayrellLang.Output.OutputAbstract;
use BayrellLang.Output.OutputChilds;
use BayrellLang.Output.OutputNope;
use BayrellLang.Output.OutputOneLine;
use BayrellLang.Output.OutputString;


export class TranslatorBay extends CommonTranslator {
	
	
	/**
	 * Operator ADD
	 */
	OutputAbstract OpAdd(OpAdd code_tree){
		OutputNope tag = new OutputNope();
		tag.addChild( this.translateRun(code_tree.value1) );
		tag.addChild( (new OutputString()).setValueAtSameLine('+') );
		tag.addChild( this.translateRun(code_tree.value2) );
		return tag;
	}
	
	
	/**
	 * Operator AND
	 */
	OutputAbstract OpAnd(OpAnd code_tree){ 
		return (new OutputOneLine())
			.addChild(this.translateRun(code_tree.value1))
			.addChild((new OutputString()).setValueAtSameLine('and'))
			.addChild(this.translateRun(code_tree.value2))
		;
	}
	
	
	OutputAbstract OpArray(OpArray code_tree){  return null; }
	
	
	
	/**
	 * Assign
	 */
	OutputAbstract OpAssign(OpAssign code_tree){ 
		return (new OutputOneLine())
			.addChild(this.translateRun(code_tree.ident))
			.addChild((new OutputString()).setValueAtSameLine('='))
			.addChild(this.translateRun(code_tree.value))
		;
	}
	
	
	
	OutputAbstract OpAssignDeclare(OpAssignDeclare code_tree){  return null; }
	OutputAbstract OpBitAnd(OpBitAnd code_tree){  return null; }
	OutputAbstract OpBitNot(OpBitNot code_tree){  return null; }
	OutputAbstract OpBitOr(OpBitOr code_tree){  return null; }
	OutputAbstract OpBitXor(OpBitXor code_tree){  return null; }
	OutputAbstract OpBreak(OpBreak code_tree){  return null; }
	OutputAbstract OpCall(OpCall code_tree){  return null; }
	OutputAbstract OpChilds(OpChilds code_tree){  return null; }
	OutputAbstract OpClone(OpClone code_tree){  return null; }
	OutputAbstract OpCompare(OpCompare code_tree){  return null; }
	OutputAbstract OpConcat(OpConcat code_tree){  return null; }
	OutputAbstract OpContinue(OpContinue code_tree){  return null; }
	OutputAbstract OpDelete(OpDelete code_tree){  return null; }
	OutputAbstract OpDiv(OpDiv code_tree){  return null; }
	OutputAbstract OpDynamic(OpDynamic code_tree){  return null; }
	OutputAbstract OpFlags(OpFlags code_tree){  return null; }
	OutputAbstract OpFor(OpFor code_tree){  return null; }
	OutputAbstract OpHexNumber(OpHexNumber code_tree){  return null; }
	
	
	/**
	 * Identifier
	 */
	OutputAbstract OpIdentifier(OpIdentifier code_tree){  
		return (new OutputString()).setValueAtSameLine(code_tree.value);
	}
	
	
	OutputAbstract OpIf(OpIf code_tree){  return null; }
	OutputAbstract OpIfElse(OpIfElse code_tree){  return null; }
	OutputAbstract OpMod(OpMod code_tree){  return null; }
	OutputAbstract OpMult(OpMult code_tree){  return null; }
	OutputAbstract OpNamespace(OpNamespace code_tree){  return null; }
	OutputAbstract OpNew(OpNew code_tree){  return null; }
	OutputAbstract OpNope(OpNope code_tree){  return null; }
	OutputAbstract OpNot(OpNot code_tree){  return null; }
	
	
	/**
	 * Number
	 */
	OutputAbstract OpNumber(OpNumber code_tree){
		return (new OutputString()).setValueAtSameLine(code_tree.value);
	}
	
	
	OutputAbstract OpOr(OpOr code_tree){  return null; }
	OutputAbstract OpPostDec(OpPostDec code_tree){  return null; }
	OutputAbstract OpPostInc(OpPostInc code_tree){  return null; }
	OutputAbstract OpPow(OpPow code_tree){  return null; }
	OutputAbstract OpPreDec(OpPreDec code_tree){  return null; }
	OutputAbstract OpPreInc(OpPreInc code_tree){  return null; }
	OutputAbstract OpReturn(OpReturn code_tree){  return null; }
	OutputAbstract OpShiftLeft(OpShiftLeft code_tree){  return null; }
	OutputAbstract OpShiftRight(OpShiftRight code_tree){  return null; }
	OutputAbstract OpStatic(OpStatic code_tree){  return null; }
	OutputAbstract OpString(OpString code_tree){  return null; }
	OutputAbstract OpSub(OpSub code_tree){  return null; }
	OutputAbstract OpTemplateIdentifier(OpTemplateIdentifier code_tree){  return null; }
	OutputAbstract OpTernary(OpTernary code_tree){  return null; }
	OutputAbstract OpThrow(OpThrow code_tree){  return null; }
	OutputAbstract OpTryCatch(OpTryCatch code_tree){  return null; }
	OutputAbstract OpUse(OpUse code_tree){  return null; }
	OutputAbstract OpWhile(OpWhile code_tree){  return null; }
	
	
}