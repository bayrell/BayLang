/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangBay;

use Runtime.BaseObject;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAttr;
use Bayrell.Lang.OpCodes.OpCall;
use Bayrell.Lang.OpCodes.OpCollection;
use Bayrell.Lang.OpCodes.OpDict;
use Bayrell.Lang.OpCodes.OpDictPair;
use Bayrell.Lang.OpCodes.OpIdentifier;
use Bayrell.Lang.OpCodes.OpMath;
use Bayrell.Lang.OpCodes.OpNew;
use Bayrell.Lang.OpCodes.OpNumber;
use Bayrell.Lang.OpCodes.OpString;
use Bayrell.Lang.OpCodes.OpTypeIdentifier;
use Bayrell.Lang.LangBay.TranslatorBay;


class TranslatorBayExpression extends BaseObject
{
	TranslatorBay translator = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(TranslatorBay translator)
	{
		parent();
		this.translator = translator;
	}
	
	
	/**
	 * OpIdentifier
	 */
	void OpIdentifier(OpIdentifier op_code, Collection<string> result)
	{
		result.push(op_code.value);
		this.opcode_level = 20;
	}
	
	
	/**
	 * OpNumber
	 */
	void OpNumber(OpNumber op_code, Collection<string> result)
	{
		result.push(op_code.value);
		this.opcode_level = 20;
	}
	
	
	/**
	 * OpString
	 */
	void OpString(OpNumber op_code, Collection<string> result)
	{
		result.push(this.translator.toString(op_code.value));
		this.opcode_level = 20;
	}
	
	
	/**
	 * OpTypeIdentifier
	 */
	void OpTypeIdentifier(OpTypeIdentifier op_code, Collection<string> result)
	{
		result.push(op_code.entity_name.names.last());
	}
	
	
	/**
	 * OpCollection
	 */
	void OpCollection(OpCollection op_code, Collection<string> result)
	{
		result.push("[");
		int values_count = op_code.values.count();
		for (int i=0; i<values_count; i++)
		{
			BaseOpCode op_code_item = op_code.values.get(i);
			this.translate(op_code_item, result);
			if (i < values_count - 1) result.push(", ");
		}
		result.push("]");
	}
	
	
	/**
	 * OpDict
	 */
	void OpDict(OpCollection op_code, Collection<string> result)
	{
		if (op_code.values.count() == 0)
		{
			result.push("{");
			result.push("}");
			return;
		}
		
		/* Begin bracket */
		result.push("{");
		this.translator.levelInc();
		
		/* Items */
		int values_count = op_code.values.count();
		for (int i=0; i<values_count; i++)
		{
			OpDictPair op_code_item = op_code.values.get(i);
			result.push(this.translator.newLine());
			result.push(this.translator.toString(op_code_item.key));
			result.push(": ");
			this.translate(op_code_item.value, result);
			result.push(",");
		}
		
		/* End bracket */
		this.translator.levelDec();
		result.push(this.translator.newLine());
		result.push("}");
	}
	
	
	/**
	 * OpAttr
	 */
	void OpAttr(OpAttr op_code, Collection<string> result)
	{
		Vector<BaseOpCode> attrs = new Vector();
		
		BaseOpCode op_code_first = op_code;
		while (op_code_first instanceof OpAttr)
		{
			attrs.push(op_code_first);
			op_code_first = op_code_first.obj;
		}
		
		attrs = attrs.reverse();
		
		/* first op_code */
		this.Dynamic(op_code_first, result);
		
		/* Attrs */
		for (int i=0; i<attrs.count(); i++)
		{
			OpAttr item_attr = attrs.get(i);
			if (item_attr.kind == OpAttr::KIND_ATTR)
			{
				result.push(".");
				result.push(item_attr.value.value);
			}
			else if (item_attr.kind == OpAttr::KIND_STATIC)
			{
				result.push("::");
				result.push(item_attr.value.value);
			}
			else if (item_attr.kind == OpAttr::KIND_DYNAMIC)
			{
				result.push("[");
				this.translate(item_attr.value, result);
				result.push("]");
			}
			else if (item_attr.kind == OpAttr::KIND_DYNAMIC_ATTRS)
			{
				result.push("[");
				int item_attr_count = item_attr.attrs.count();
				for (int j=0; j<item_attr_count; j++)
				{
					BaseOpCode op_code_item = item_attr.attrs.get(j);
					this.translate(op_code_item, result);
					if (j < item_attr_count - 1) result.push(", ");
				}
				result.push("]");
			}
		}
		
		this.opcode_level = 20;
	}
	
	
	/**
	 * OpCall
	 */
	void OpCall(OpCall op_code, Collection<string> result)
	{
		this.Dynamic(op_code.obj, result);
		
		if (op_code.args.count() == 1 and op_code.args.get(0) instanceof OpDict)
		{
			this.OpDict(op_code.args.get(0), result);
		}
		else
		{
			result.push("(");
			int args_count = op_code.args.count();
			for (int i=0; i<args_count; i++)
			{
				BaseOpCode op_code_item = op_code.args.get(i);
				this.Expression(op_code_item, result);
				if (i < args_count - 1) result.push(", ");
			}
			result.push(")");
		}
		
		this.opcode_level = 20;
	}
	
	
	/**
	 * OpNew
	 */
	void OpNew(OpNew op_code, Collection<string> result)
	{
		result.push("new ");
		this.OpTypeIdentifier(op_code.value, result);
		
		if (op_code.args.count() == 1 and op_code.args.get(0) instanceof OpDict)
		{
			this.OpDict(op_code.args.get(0), result);
		}
		else
		{
			result.push("(");
			int args_count = op_code.args.count();
			for (int i=0; i<args_count; i++)
			{
				BaseOpCode op_code_item = op_code.args.get(i);
				this.Expression(op_code_item, result);
				if (i < args_count - 1) result.push(", ");
			}
			result.push(")");
		}
		
		this.opcode_level = 20;
	}
	
	
	/**
	 * OpMath
	 */
	void OpMath(OpCall op_code, Collection<string> result)
	{
		Collection<string> result1 = [];
		this.Expression(op_code.value1, result1);
		int opcode_level1 = this.opcode_level;
		
		string op = "";
		int opcode_level = 0;
		if (op_code.math == "!") { opcode_level = 16; op = "!"; }
		if (op_code.math == ">>") { opcode_level = 12; op = ">>"; }
		if (op_code.math == "<<") { opcode_level = 12; op = "<<"; }
		if (op_code.math == "&") { opcode_level = 9; op = "&"; }
		if (op_code.math == "xor") { opcode_level = 8; op = "^"; }
		if (op_code.math == "|") { opcode_level = 7; op = "|"; }
		if (op_code.math == "*") { opcode_level = 14; op = "*"; }
		if (op_code.math == "/") { opcode_level = 14; op = "/"; }
		if (op_code.math == "%") { opcode_level = 14; op = "%"; }
		if (op_code.math == "div") { opcode_level = 14; op = "div"; }
		if (op_code.math == "mod") { opcode_level = 14; op = "mod"; }
		if (op_code.math == "+") { opcode_level = 13; op = "+"; }
		if (op_code.math == "-") { opcode_level = 13; op = "-"; }
		if (op_code.math == "~") { opcode_level = 13; op = "~"; }
		if (op_code.math == "===") { opcode_level = 10; op = "==="; }
		if (op_code.math == "!==") { opcode_level = 10; op = "!=="; }
		if (op_code.math == "==") { opcode_level = 10; op = "=="; }
		if (op_code.math == "!=") { opcode_level = 10; op = "!="; }
		if (op_code.math == ">=") { opcode_level = 10; op = ">="; }
		if (op_code.math == "<=") { opcode_level = 10; op = "<="; }
		if (op_code.math == ">") { opcode_level = 10; op = ">"; }
		if (op_code.math == "<") { opcode_level = 10; op = "<"; }
		if (op_code.math == "is") { opcode_level = 10; op = "instanceof"; }
		if (op_code.math == "instanceof") { opcode_level = 10; op = "instanceof"; }
		if (op_code.math == "implements") { opcode_level = 10; op = "implements"; }
		if (op_code.math == "not") { opcode_level = 16; op = "not"; }
		if (op_code.math == "and") { opcode_level = 6; op = "and"; }
		if (op_code.math == "&&") { opcode_level = 6; op = "and"; }
		if (op_code.math == "or") { opcode_level = 5; op = "or"; }
		if (op_code.math == "||") { opcode_level = 5; op = "or"; }
		
		if (op_code.math == "not" or op_code.math == "!")
		{
			result.push("not ");
			
			if (opcode_level1 < opcode_level)
			{
				result.push("(");
				result.appendItems(result1);
				result.push(")");
			}
			else
			{
				result.appendItems(result1);
			}
		}
		else
		{
			if (opcode_level1 < opcode_level)
			{
				result.push("(");
				result.appendItems(result1);
				result.push(")");
			}
			else
			{
				result.appendItems(result1);
			}
			
			result.push(" " ~ op ~ " ");
			
			Collection<string> result2 = [];
			this.Expression(op_code.value2, result2);
			int opcode_level2 = this.opcode_level;
			
			if (opcode_level2 < opcode_level)
			{
				result.push("(");
				result.appendItems(result2);
				result.push(")");
			}
			else
			{
				result.appendItems(result2);
			}
		}
		
		this.opcode_level = opcode_level;
	}
	
	
	/**
	 * Dynamic
	 */
	void Dynamic(OpCall op_code, Collection<string> result)
	{
		if (op_code instanceof OpNumber)
		{
			this.OpNumber(op_code, result);
		}
		if (op_code instanceof OpString)
		{
			this.OpString(op_code, result);
		}
		else if (op_code instanceof OpIdentifier)
		{
			this.OpIdentifier(op_code, result);
		}
		else if (op_code instanceof OpAttr)
		{
			this.OpAttr(op_code, result);
		}
		else if (op_code instanceof OpCollection)
		{
			this.OpCollection(op_code, result);
		}
		else if (op_code instanceof OpDict)
		{
			this.OpDict(op_code, result);
		}
		else if (op_code instanceof OpCall)
		{
			this.OpCall(op_code, result);
		}
		else if (op_code instanceof OpNew)
		{
			this.OpNew(op_code, result);
		}
	}
	
	
	/**
	 * Expression
	 */
	void Expression(BaseOpCode op_code, Collection<string> result)
	{
		if (op_code instanceof OpMath)
		{
			this.OpMath(op_code, result);
		}
		else
		{
			this.Dynamic(op_code, result);
		}
	}
	
	
	/**
	 * Translate expression
	 */
	void translate(BaseOpCode op_code, Collection<string> result)
	{
		this.Expression(op_code, result);
	}
}