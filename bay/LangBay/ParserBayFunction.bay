/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangBay;

use Runtime.BaseObject;
use BayLang.Caret;
use BayLang.CoreToken;
use BayLang.TokenReader;
use BayLang.Exceptions.ParserError;
use BayLang.Exceptions.ParserExpected;
use BayLang.LangBay.ParserBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpFlags;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpPipe;
use BayLang.OpCodes.OpTypeIdentifier;


class ParserBayFunction extends BaseObject
{
	ParserBay parser = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(ParserBay parser)
	{
		parent();
		this.parser = parser;
	}
	
	
	/**
	 * Read flags
	 */
	pure list<ParserBay, OpFlags> readFlags(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		Map values = new Map();
		Collection<string> current_flags = OpFlags::getFlags();
		
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		while (not token.eof and current_flags.indexOf(token.content) >= 0)
		{
			string flag = token.content;
			values.set("p_"~flag, true);
			parser = look;
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		}
		
		return 
		[
			parser,
			new OpFlags(values)
		];
	}
	
	
	/**
	 * Read call function
	 */
	BaseOpCode readCallFunction(TokenReader reader, BaseOpCode pattern = null)
	{
		Caret caret_start = reader.start();
		
		/* Read identifier */
		if (pattern == null)
		{
			pattern = this.parser.parser_base.readItem(reader);
		}
		
		/* Next token should be bracket */
		if (reader.nextToken() != "(") return null;
		
		/* Find identifier */
		if (pattern instanceof OpTypeIdentifier) pattern = pattern.entity_name.items.last();
		
		/* Read arguments */
		reader.matchToken("(");
		Collection args = [];
		while (not reader.eof() and reader.nextToken() != ")")
		{
			BaseOpCode expression = this.parser.parser_expression.readExpression(reader);
			args.push(expression);
			if (reader.nextToken() == ",")
			{
				reader.matchToken(",");
			}
		}
		reader.matchToken(")");
		
		return new OpCall
		{
			"args": args,
			"item": pattern,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read function args
	 */
	OpItems<OpDeclareFunctionArg> readDeclareFunctionArgs(TokenReader reader)
	{
		Caret caret_start = reader.start();
		Collection<OpDeclareFunctionArg> items = [];
		
		reader.matchToken("(");
		while (not reader.eof() and reader.nextToken() != ")")
		{
			Caret caret_start_item = reader.start();
			
			/* Read argument */
			OpTypeIdentifier pattern = this.parser.parser_base.readTypeIdentifier(reader);
			OpIdentifier name = this.parser.parser_base.readIdentifier(reader);
			BaseOpCode expression = null;
			
			/* Read expression */
			if (reader.nextToken() == "=")
			{
				reader.matchToken("=");
				expression = this.parser.parser_expression.readExpression(reader);
			}
			
			/* Add item */
			items.push(new OpDeclareFunctionArg{
				"pattern": pattern,
				"name": name.value,
				"expression": expression,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			});
			
			if (reader.nextToken() == ",")
			{
				reader.matchToken(",");
			}
		}
		reader.matchToken(")");
		
		return new OpItems
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read function variables
	 */
	pure list<ParserBay, Collection> readDeclareFunctionUse
	(
		ParserBay parser, Dict<bool> vars = null, bool find_ident = true
	)
	{
		ParserBay look = null;
		CoreToken token = null;
		Vector<BaseOpCode> items = new Vector();
		
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		if (token.content == "use")
		{
			parser = look;
			list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
			while (not token.eof and token.content != ")")
			{
				BaseOpCode ident = null;
				list res = parser.parser_base::readIdentifier(parser); parser = res[0]; ident = res[1];
				string name = ident.value;
				
				if (vars != null and find_ident)
				{
					if (not vars.has(name))
					{
						throw new ParserError
						(
							"Unknown identifier '" ~ name ~ "'",
							ident.caret_start,
							parser.file_name
						);
					}
				}
				items.push(name);
				
				list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
				if (token.content == ",")
				{
					parser = look;
					list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
				}
			}
			list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		}
		
		return [parser, items];
	}
	
	
	/**
	 * Read function
	 */
	BaseOpCode readDeclareFunction(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		BaseOpCode pattern = this.parser.parser_base.readTypeIdentifier(reader);
		string name = this.parser.parser_base.readIdentifier(reader).value;
		Collection<OpDeclareFunctionArg> args = this.readDeclareFunctionArgs(reader);
		BaseOpCode content = this.parser.parser_operator.parse(reader);
		
		return new OpDeclareFunction
		{
			"args": args,
			"name": name,
			"pattern": pattern,
			"content": content,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Returns true if next is function
	 */
	pure bool tryReadFunction(ParserBay parser, string has_name = true, OpFlags flags = null)
	{
		ParserBay look = null;
		BaseOpCode parser_value = null;
		BaseOpCode token = null;
		
		/* Clear vars */
		Dict<bool> save_vars = parser.vars;
		parser <= vars <= new Dict<bool>();
		parser <= find_ident <= false;
		
		bool res = false;
		try
		{
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
			if (token.content == "async") parser = look;
			
			list res = parser.parser_base::readTypeIdentifier(parser, false);
			parser = res[0]; parser_value = res[1];
			Caret caret_start = parser_value.caret_start;
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
			if (token.content == "@") parser = look;
			if (has_name)
			{
				list res = parser.parser_base::readIdentifier(parser); parser = res[0];
			}
			list res = static::readDeclareFunctionArgs(parser, false); parser = res[0];
			list res = static::readDeclareFunctionUse(parser, null, false); parser = res[0];
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
			if (
				flags != null and flags.p_declare or
				parser.current_class_abstract or
				parser.current_class_declare or
				parser.current_class_kind == "interface"
			)
			{
				if (token.content != ";")
				{
					throw new ParserExpected("Function", caret_start, parser.file_name);
				}
			}
			else if (token.content != "=>" and token.content != "{")
			{
				throw new ParserExpected("Function", caret_start, parser.file_name);
			}
			res = true;
		}
		catch (ParserExpected e)
		{
			res = false;
		}
		
		/* Restore vars */
		parser <= vars <= save_vars;
		parser <= find_ident <= true;
		
		return res;
	}
}