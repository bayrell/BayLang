/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangBay;

use Runtime.BaseObject;
use BayLang.Caret;
use BayLang.TokenReader;
use BayLang.LangBay.ParserBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpHtmlAttribute;
use BayLang.OpCodes.OpHtmlContent;
use BayLang.OpCodes.OpHtmlCSS;
use BayLang.OpCodes.OpHtmlCSSAttribute;
use BayLang.OpCodes.OpHtmlItems;
use BayLang.OpCodes.OpHtmlSlot;
use BayLang.OpCodes.OpHtmlStyle;
use BayLang.OpCodes.OpHtmlTag;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpIfElse;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpModule;
use BayLang.OpCodes.OpNamespace;
use BayLang.OpCodes.OpTypeIdentifier;
use BayLang.OpCodes.OpUse;


class ParserBayHtml extends BaseObject
{
	ParserBay parser = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(ParserBay parser)
	{
		parent();
		this.parser = parser;
	}
	
	
	/**
	 * Read comment
	 */
	OpComment readComment(TokenReader reader)
	{
		Caret caret_start = reader.start();
		reader.matchToken("<");
		reader.matchToken("!--");
		
		Vector<string> value = [];
		while (not reader.main_caret.eof() and reader.main_caret.nextString(3) != "-->")
		{
			value.push(reader.main_caret.readChar());
		}
		reader.init(reader.main_caret);
		reader.matchToken("--");
		reader.matchToken(">");
		
		return new OpComment
		{
			"value": rs::join("", value),
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read open string
	 */
	string readOpenString(TokenReader reader)
	{
		if (reader.nextToken() == "\"")
		{
			reader.matchToken("\"");
			return "\"";
		}
		else if (reader.nextToken() == "'")
		{
			reader.matchToken("'");
			return "'";
		}
		else
		{
			throw reader.expected("\"");
		}
	}
	
	
	/**
	 * Read attr expression
	 */
	BaseOpCode readAttrExpression(TokenReader reader, string key, string kind = "")
	{
		BaseOpCode expression = null;
		if (kind == "type")
		{
			string open_tag = this.readOpenString(reader);
			expression = this.parser.parser_base.readTypeIdentifier(reader, false);
			reader.matchToken(open_tag);
		}
		else if (kind == "template")
		{
			if (key == "name")
			{
				string open_tag = this.readOpenString(reader);
				expression = this.parser.parser_base.readIdentifier(reader);
				reader.matchToken(open_tag);
			}
			else if (key == "args")
			{
				string open_tag = this.readOpenString(reader);
				expression = this.parser.parser_function.readDeclareFunctionArgs(
					reader, false, open_tag
				);
				reader.matchToken(open_tag);
			}
			else
			{
				expression = this.parser.parser_base.readString();
			}
		}
		else if (kind == "expression")
		{
			string next_token = reader.nextToken();
			if (next_token == "\"" or next_token == "'")
			{
				expression = this.parser.parser_base.readString(reader);
			}
			else if (next_token == "{{")
			{
				reader.matchToken("{{");
				expression = this.parser.parser_expression.readExpression(reader);
				reader.matchToken("}}");
			}
		}
		else if (kind == "function")
		{
			string open_tag = this.readOpenString(reader);
			expression = this.parser.parser_operator.parse(reader, false, open_tag);
			expression = new OpDeclareFunction
			{
				"content": expression,
				"caret_start": expression.caret_start,
				"caret_end": expression.caret_end,
			};
			reader.matchToken(open_tag);
		}
		else
		{
			expression = this.parser.parser_base.readString(reader);
		}
		return expression;
	}
	
	
	/**
	 * Read attrs
	 */
	Collection<BaseOpCode> readAttrs(TokenReader reader, string kind = "")
	{
		Collection<BaseObject> attrs = [];
		reader.main_caret.skipToken();
		while (not reader.main_caret.eof() and
			reader.main_caret.nextChar() != ">" and reader.main_caret.nextString(2) != "/>"
		)
		{
			Caret caret_start = reader.start();
			bool is_system_attr = false;
			if (reader.nextToken() == "@")
			{
				is_system_attr = true;
				reader.matchToken("@");
			}
			BaseOpCode key = this.parser.parser_base.readIdentifier(reader);
			string key_value = is_system_attr ? "@" ~ key.value : key.value;
			reader.main_caret.skipToken();
			reader.init(reader.main_caret);
			reader.matchToken("=");
			BaseOpCode expression = this.readAttrExpression(
				reader, key_value, is_system_attr ? "function" : kind
			);
			reader.main_caret.skipToken();
			attrs.push(new OpHtmlAttribute{
				"key": key_value,
				"expression": expression,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			});
		}
		return attrs;
	}
	
	
	/**
	 * Read selector
	 */
	string readSelector(TokenReader reader)
	{
		Collection selector = [];
		reader.main_caret.skipToken();
		while (not reader.main_caret.eof() and
			reader.main_caret.nextChar() != "{" and reader.main_caret.nextChar() != "}"
		)
		{
			selector.push(reader.main_caret.readChar());
		}
		reader.init(reader.main_caret);
		return rs::join("", selector);
	}
	
	
	/**
	 * Returns true if next is selector
	 */
	bool isNextSelector(TokenReader reader)
	{
		Caret caret = reader.main_caret.copy();
		while (not caret.eof())
		{
			string ch = caret.readChar();
			if (ch == ":" or ch == ";" or ch == "}") return false;
			if (ch == "{" or ch == "(") return true;
		}
		return false;
	}
	
	
	/**
	 * Read CSS Item
	 */
	string readCSSItem(TokenReader reader)
	{
		Caret caret = reader.main_caret;
		Collection<string> content = [];
		while (not caret.eof() and not (
			caret.isNextString(":") or caret.isNextString(";") or caret.isNextString("}")
		))
		{
			content.push(caret.readChar());
		}
		reader.init(caret);
		return rs::trim(rs::join("", content));
	}
	
	
	/**
	 * Read CSS
	 */
	OpHtmlCSS readCSS(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		string selector = this.readSelector(reader);
		reader.matchToken("{");
		
		Collection items = [];
		while (not reader.eof() and reader.nextToken() != "}")
		{
			if (this.isNextSelector(reader))
			{
				OpHtmlCSS op_code_item = this.readCSS(reader);
				items.push(op_code_item);
			}
			else
			{
				Caret caret_start_item = reader.start();
				string key = this.readCSSItem(reader);
				reader.matchToken(":");
				string value = this.readCSSItem(reader);
				items.push(
					new OpHtmlCSSAttribute
					{
						"key": key,
						"value": value,
						"caret_start": caret_start_item,
						"caret_end": reader.caret(),
					}
				);
				if (reader.nextToken() != "}") reader.matchToken(";");
			}
		}
		
		reader.matchToken("}");
		
		return new OpHtmlCSS
		{
			"selector": selector,
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read style content
	 */
	BaseOpCode readStyleContent(TokenReader reader, string end_tag = "}")
	{
		Caret caret_start = reader.start();
		
		Collection<BaseOpCode> items = [];
		while (not reader.eof() and reader.nextToken() != end_tag)
		{
			OpHtmlCSS op_code_item = this.readCSS(reader);
			items.push(op_code_item);
		}
		
		return new OpItems
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read style
	 */
	BaseOpCode readStyle(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		reader.matchToken("<");
		reader.matchToken("style");
		reader.matchToken(">");
		
		BaseOpCode content = this.readStyleContent(reader, "</");
		
		reader.matchToken("</");
		reader.matchToken("style");
		reader.matchToken(">");
		
		return new OpHtmlStyle
		{
			"content": content,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read html content
	 */
	OpHtmlContent readHtmlContent(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		Caret caret = caret_start.copy();
		Collection tokens = ["</", "{{"];
		Collection<string> content = [];
		while (not reader.eof() and
			not caret.isNextChar("<") and tokens.indexOf(caret.nextString(2)) == -1
		)
		{
			content.push(caret.readChar());
		}
		
		reader.init(caret);
		
		return new OpHtmlContent
		{
			"value": rs::trim(rs::join("", content), "\n\t"),
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read html expression
	 */
	BaseOpCode readHtmlExpression(TokenReader reader)
	{
		reader.matchToken("{{");
		BaseOpCode expression = this.parser.parser_expression.readExpression(reader);
		reader.matchToken("}}");
		return expression;
	}
	
	
	/**
	 * Read html render
	 */
	BaseOpCode reaHtmlRender(TokenReader reader)
	{
		reader.matchToken("%render");
		BaseOpCode expression = this.parser.parser_expression.readExpression(reader);
		reader.matchToken(";");
		return expression;
	}
	
	
	/**
	 * Returns true if tag_name is component
	 */
	static bool isComponent(string tag_name)
	{
		string first = rs::substr(tag_name, 0, 1);
		return rs::upper(first) == first;
	}
	
	
	/**
	 * Read html tag
	 */
	OpHtmlTag readHtmlTag(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		reader.matchToken("<");
		
		BaseOpCode tag_name = null;
		bool is_variable = false;
		if (reader.nextToken() == "{")
		{
			is_variable = true;
			reader.matchToken("{");
			tag_name = this.parser.parser_base.readIdentifier(reader);
			reader.matchToken("}");
		}
		else
		{
			tag_name = this.parser.parser_base.readIdentifier(reader);
		}
		
		Collection<OpHtmlAttribute> attrs = this.readAttrs(
			reader, not is_variable and tag_name.value == "slot" ? "template" : "expression"
		);
		
		OpHtmlItems content = null;
		if (reader.nextToken() != "/>")
		{
			reader.matchToken(">");
			content = this.readHtml(reader);
			reader.matchToken("</");
			if (is_variable) reader.matchToken("{");
			reader.matchToken(tag_name.value);
			if (is_variable) reader.matchToken("}");
			reader.matchToken(">");
		}
		else
		{
			reader.matchToken("/>");
		}
		
		if (tag_name.value == "slot")
		{
			string name = "";
			Collection<OpDeclareFunctionArg> args = null;
			for (int i=0; i<attrs.count(); i++)
			{
				OpHtmlAttribute item = attrs.get(i);
				if (item.key == "name") name = item.expression.value;
				else if (item.key == "args") args = item.expression;
			}
			
			return new OpHtmlSlot
			{
				"args": args,
				"name": name,
				"content": content,
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		return new OpHtmlTag
		{
			"attrs": attrs,
			"content": content,
			"tag_name": is_variable ? tag_name : tag_name.value,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read HTML Assign
	 */
	BaseOpCode readHtmlAssign(TokenReader reader)
	{
		if (reader.nextToken() == "%set") reader.matchToken("%set");
		else reader.matchToken("%var");
		OpAssign op_code = this.parser.parser_operator.readAssign(reader);
		reader.matchToken(";");
		return op_code;
	}
	
	
	/**
	 * Read HTML for
	 */
	BaseOpCode readHtmlFor(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		/* Read for */
		reader.matchToken("%for");
		reader.matchToken("(");
		
		/* Read assing */
		BaseOpCode expr1 = this.parser.parser_operator.readAssign(reader);
		reader.matchToken(";");
		
		/* Read expression */
		BaseOpCode expr2 = this.parser.parser_expression.readExpression(reader);
		reader.matchToken(";");
		
		/* Read operator */
		BaseOpCode expr3 = this.parser.parser_operator.readInc(reader);
		reader.matchToken(")");
		
		/* Read content */
		OpItems content = this.readHtml(reader, true, "}");
		
		/* Returns op_code */
		return new OpFor
		{
			"expr1": expr1,
			"expr2": expr2,
			"expr3": expr3,
			"content": content,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		}
	}
	
	
	/**
	 * Read HTML if
	 */
	BaseOpCode readHtmlIf(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		BaseOpCode if_true = null;
		BaseOpCode if_false = null;
		Collection if_else = [];
		
		/* Read condition */
		reader.matchToken("%if");
		reader.matchToken("(");
		BaseOpCode condition = this.parser.parser_expression.readExpression(reader);
		reader.matchToken(")");
		
		/* Read content */
		if_true = this.readHtml(reader, true, "}");
		this.parser.parser_base.skipComment(reader);
		
		/* Read content */
		Caret caret_last = null;
		Collection operations = ["%else", "%elseif"];
		while (not reader.eof() and (operations.indexOf(reader.nextToken()) >= 0))
		{
			string token = reader.readToken();
			if (token == "%elseif" or token == "%else" and reader.nextToken() == "if")
			{
				/* Read condition */
				if (reader.nextToken() == "if") reader.readToken();
				reader.matchToken("(");
				BaseOpCode if_else_condition = this.parser.parser_expression.readExpression(reader);
				reader.matchToken(")");
				
				/* Read content */
				BaseOpCode if_else_content = this.readHtml(reader, true, "}");
				
				/* Add op_code */
				if_else.push(new OpIfElse
				{
					"condition": if_else_condition,
					"content": if_else_content,
					"caret_start": caret_start,
					"caret_end": reader.caret(),
				});
			}
			else if (token == "%else")
			{
				if_false = this.readHtml(reader, true, "}");
			}
			caret_last = reader.caret();
			this.parser.parser_base.skipComment(reader);
		}
		
		/* Restore caret */
		if (caret_last) reader.init(caret_last);
		
		return new OpIf
		{
			"condition": condition,
			"if_true": if_true,
			"if_false": if_false,
			"if_else": if_else,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read HTML item
	 */
	BaseOpCode readHtmlItem(TokenReader reader)
	{
		string next_token = reader.nextToken();
		if (next_token == "<") return this.readHtmlTag(reader);
		else if (next_token == "{{") return this.readHtmlExpression(reader);
		else if (next_token == "%render") return this.reaHtmlRender(reader);
		else if (next_token == "%set" or next_token == "%var") return this.readHtmlAssign(reader);
		else if (next_token == "%for") return this.readHtmlFor(reader);
		else if (next_token == "%if") return this.readHtmlIf(reader);
		return this.readHtmlContent(reader);
	}
	
	
	/**
	 * Read html
	 */
	OpHtmlItems readHtml(TokenReader reader, bool match_brackets = false, string end_tag = "")
	{
		Caret caret_start = reader.start();
		
		if (match_brackets) reader.matchToken("{");
		
		Collection items = [];
		while (not reader.eof() and reader.nextToken() != "</" and reader.nextToken() != end_tag)
		{
			BaseOpCode op_code_item = this.readHtmlItem(reader);
			items.push(op_code_item);
		}
		
		if (match_brackets) reader.matchToken("}");
		
		return new OpHtmlItems
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read use
	 */
	BaseOpCode readUse(TokenReader reader)
	{
		Caret caret_start = reader.start();
		reader.matchToken("<");
		reader.matchToken("use");
		Collection attrs = this.readAttrs(reader);
		reader.matchToken("/>");
		
		string alias = "";
		string name = "";
		bool is_component = false;
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute item = attrs.get(i);
			string value = item.expression.value;
			if (item.key == "name") name = value;
			else if (item.key == "as") alias = value;
			else if (item.key == "component")
			{
				if (value == "true" or value == "1") is_component = true;
			}
		}
		
		/* Get alias */
		if (alias == "")
		{
			Collection arr = rs::split(".", name);
			alias = arr.last();
		}
		
		/* Add use */
		this.parser.uses.set(alias, name);
		
		return new OpUse
		{
			"alias": alias,
			"name": name,
			"is_component": is_component,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read template
	 */
	BaseOpCode readTemplate(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		reader.matchToken("<");
		reader.matchToken("template");
		Collection attrs = this.readAttrs(reader, "template");
		reader.matchToken(">");
		
		OpHtmlItems content = this.readHtml(reader);
		
		reader.matchToken("</");
		reader.matchToken("template");
		reader.matchToken(">");
		
		OpIdentifier name = null;
		OpHtmlAttribute args = null;
		for (int i=0; i<attrs.count(); i++)
		{
			OpHtmlAttribute item = attrs.get(i);
			if (item.key == "name") name = item.expression.value;
			else if (item.key == "args") args = item.expression;
		}
		
		return new OpDeclareFunction
		{
			"name": name ? name : "render",
			"args": args ? args : null,
			"is_html": true,
			"content": content,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read script
	 */
	BaseOpCode readScript(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		reader.matchToken("<");
		reader.matchToken("script");
		Collection attrs = this.readAttrs(reader, "script");
		reader.matchToken(">");
		
		OpItems items = this.parser.parser_class.readBody(reader, false, "</");
		
		reader.matchToken("</");
		reader.matchToken("script");
		reader.matchToken(">");
		
		return items;
	}
	
	
	/**
	 * Read item
	 */
	BaseOpCode readItem(TokenReader reader)
	{
		Caret caret_save = reader.caret();
		reader.matchToken("<");
		string next_token = reader.nextToken();
		reader.init(caret_save);
		
		if (next_token == "style") return this.readStyle(reader);
		else if (next_token == "template") return this.readTemplate(reader);
		else if (next_token == "script") return this.readScript(reader);
		else if (next_token == "use") return this.readUse(reader);
		else if (next_token == "!--") return this.readComment(reader);
		else throw reader.next_caret.error("Unknown token " ~ next_token);
		return null;
	}
	
	
	/**
	 * Read class content
	 */
	BaseOpCode readContent(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		Collection items = [];
		while (not reader.eof() and reader.nextToken() != "</")
		{
			BaseOpCode op_code_item = this.readItem(reader);
			if (op_code_item instanceof OpItems) items.appendItems(op_code_item.items);
			else items.push(op_code_item);
		}
		
		return new OpItems
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Parse HTML
	 */
	BaseOpCode parse(TokenReader reader)
	{
		Caret caret_start = reader.start();
		Collection items = [];
		
		/* Read comment */
		if (caret_start.skipSpace().nextString(2) == "<!")
		{
			items.push(this.readComment(reader));
		}
		
		/* Read class */
		reader.matchToken("<");
		reader.matchToken("class");
		
		/* Read attrs */
		Collection<OpHtmlAttribute> attrs = this.readAttrs(reader, "type");
		OpTypeIdentifier class_name = attrs.find(bool (OpHtmlAttribute attr) => attr.key == "name");
		OpTypeIdentifier extend_name = attrs.find(
			bool (OpHtmlAttribute attr) => attr.key == "extends"
		);
		
		reader.matchToken(">");
		
		/* Read component content */
		BaseOpCode class_content = this.readContent(reader);
		
		/*string class_name_value = class_name.entity_name.items.last();*/
		string namespace_name = rs::join(".", class_name.expression.entity_name.items
			.slice(0, class_name.expression.entity_name.items.count() - 1)
			.map(string (OpIdentifier item) => item.value)
		);
		
		/* Change class name */
		class_name.expression.entity_name.items = [ class_name.expression.entity_name.items.last() ];
		
		/* Add namespace */
		items.push(new OpNamespace
		{
			"name": namespace_name,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		});
		
		/* Add use */
		Collection<OpUse> uses = class_content.items.filter(
			bool (BaseOpCode item) => item instanceof OpUse);
		items.appendItems(uses);
		
		/* Filter content */
		class_content.items = class_content.items.filter(
			bool (BaseOpCode item) => not(item instanceof OpUse)
		);
		items.push(new OpDeclareClass
		{
			"name": class_name.expression,
			"kind": OpDeclareClass::KIND_CLASS,
			"class_extends": extend_name ? extend_name.expression : null,
			"is_component": true,
			"content": class_content,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		});
		
		return new OpModule
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
}
