/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangBay;

use Runtime.BaseObject;
use BayLang.Caret;
use BayLang.TokenReader;
use BayLang.LangBay.ParserBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpDeclareClass;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpFlags;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpTypeIdentifier;


class ParserBayClass extends BaseObject
{
	ParserBay parser = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(ParserBay parser)
	{
		parent();
		this.parser = parser;
	}
	
	
	/**
	 * Read flags
	 */
	OpFlags readFlags(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		Dict items = {};
		Collection<string> current_flags = OpFlags::getFlags();
		while (not reader.eof() and current_flags.indexOf(reader.nextToken()) >= 0)
		{
			string flag = reader.readToken();
			items.set(flag, true);
		}
		
		return new OpFlags
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read class item
	 */
	BaseOpCode readItem(TokenReader reader)
	{
		string next_token = reader.nextTokenComments();
		
		/* Comment */
		if (next_token == "/")
		{
			return this.parser.parser_base.readComment(reader);
		}
		
		/* Prepocessor */
		else if (next_token == "#switch" or next_token == "#ifcode" or next_token == "#ifdef")
		{
			return this.parser.parser_preprocessor.readPreprocessor(
				reader, OpPreprocessorIfDef::KIND_CLASS_BODY
			);
		}
		
		/* Read flags */
		OpFlags flags = this.readFlags(reader);
		
		/* Try to read call function */
		BaseOpCode op_code = this.parser.parser_function.tryReadFunction(reader);
		
		/* Assign operator */
		if (not op_code)
		{
			op_code = this.parser.parser_operator.readAssign(reader);
		}
		
		op_code.flags = flags;
		op_code.caret_start = flags.caret_start;
		return op_code;
	}
	
	
	/**
	 * Process items
	 */
	Collection processItems(Collection<BaseOpCode> items)
	{
		Collection<BaseOpCode> result = [];
		Collection<BaseOpCode> comments = [];
		for (int i=0; i<items.count(); i++)
		{
			BaseOpCode item = items.get(i);
			if (item instanceof OpComment)
			{
				comments.push(item);
			}
			else if (item instanceof OpAssign)
			{
				result.appendItems(comments);
				result.push(item);
				comments = [];
			}
			else if (item instanceof OpDeclareFunction)
			{
				item.comments = [];
				int line = item.caret_start.y - 1;
				for (int j=comments.count() - 1; j>=0; j--)
				{
					OpComment op_code = comments.get(j);
					if (op_code.caret_end.y == line)
					{
						item.comments.push(op_code);
						comments.remove(j);
						line = op_code.caret_start.y - 1;
					}
				}
				item.comments.reverse();
				result.appendItems(comments);
				result.push(item);
				comments = [];
			}
			else
			{
				result.push(item);
			}
		}
		return result;
	}
	
	
	/**
	 * Read class body
	 */
	BaseOpCode readBody(TokenReader reader, bool match_brackets = true, string end_tag = "")
	{
		Caret caret_start = reader.start();
		Collection<BaseOpCode> items = [];
		
		if (match_brackets) reader.matchToken("{");
		
		/* Read class */
		while (
			not reader.eof() and reader.nextToken() != "}" and
			reader.nextToken() != "#endswitch" and reader.nextToken() != "#case" and
			reader.nextToken() != "#endif" and reader.nextToken() != end_tag
		)
		{
			BaseOpCode op_code = this.readItem(reader);
			if (op_code)
			{
				items.push(op_code);
			}
			else
			{
				break;
			}
			
			/* Match semicolon */
			if (reader.nextToken() == ";")
			{
				reader.matchToken(";");
			}
		}
		
		if (match_brackets) reader.matchToken("}");
		
		/* Process items */
		items = this.processItems(items);
		return new OpItems
		{
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read class
	 */
	BaseOpCode readClass(TokenReader reader)
	{
		Caret caret_start = reader.start();
		
		/* Read abstract */
		bool is_abstract = false;
		if (reader.nextToken() == "abstract")
		{
			is_abstract = true;
			reader.matchToken("abstract");
		}
		
		/* Read class or interface */
		bool is_interface = false;
		if (reader.nextToken() == "interface")
		{
			is_interface = true;
			reader.matchToken("interface");
		}
		else reader.matchToken("class");
		
		OpTypeIdentifier class_extends = null;
		Collection<OpTypeIdentifier> class_implements = [];
		
		/* Read class name */
		OpTypeIdentifier class_name = this.parser.parser_base.readTypeIdentifier(reader, false);
		this.parser.uses.set(class_name.entity_name.getName(),
			this.parser.current_namespace ~ "." ~ class_name.entity_name.getName()
		);
		
		/* Add generics */
		Dict save_uses = this.parser.uses.copy();
		this.parser.addGenericUse(class_name.generics);
		
		/* Read extends */
		if (reader.nextToken() == "extends")
		{
			reader.readToken();
			class_extends = this.parser.parser_base.readTypeIdentifier(reader);
		}
		if (reader.nextToken() == "implements")
		{
			reader.readToken();
			while (not reader.eof() and reader.nextToken() != "{" and reader.nextToken() != ";")
			{
				BaseOpCode op_code_item = this.parser.parser_base.readTypeIdentifier(reader);
				class_implements.push(op_code_item);
				if (reader.nextToken() != "{" and reader.nextToken() != ";")
				{
					reader.matchToken(",");
				}
			}
		}
		/*
		if (class_extends == null)
		{
			class_extends = new OpTypeIdentifier
			{
				"entity_name": new OpEntityName
				{
					"items":
					[
						new OpIdentifier
						{
							"value": "BaseObject",
						}
					]
				}
			};
		}*/
		this.parser.current_class = new OpDeclareClass
		{
			"kind": is_interface ? OpDeclareClass::KIND_INTERFACE : OpDeclareClass::KIND_CLASS,
			"name": class_name,
			"is_abstract": is_abstract,
			"class_extends": class_extends,
			"class_implements": class_implements,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
		if (not is_abstract)
		{
			this.parser.current_class.content = this.readBody(reader);
		}
		else
		{
			if (reader.nextToken() == "{")
			{
				reader.matchToken("{");
				reader.matchToken("}");
			}
			else
			{
				reader.matchToken(";");
			}
		}
		this.parser.uses = save_uses;
		return this.parser.current_class;
	}
}