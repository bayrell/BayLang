/*!
 *  Bayrell Template Engine
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangBay;


use BayrellParser.ParserToken;
use BayrellParser.Exceptions.ParserEOF;
use BayrellParser.Exceptions.ParserExpected;
use BayrellLang.Exceptions.EndOfStringExpected;


export class HtmlToken extends ParserToken
{
	
	static const string TOKEN_NONE = 'none';
	static const string TOKEN_BASE = 'base';
	static const string TOKEN_HTML = 'html';
	static const string TOKEN_STRING = 'string';
	static const string TOKEN_COMMENT = 'comment';
	
	protected Vector<string> _special_tokens = null;
	
	
	
	/**
	 * Returns new Instance
	 */
	public CoreObject createNewInstance()
	{
		return new HtmlToken(this.context(), this.parser);
	}
	
	
	
	/**
	 * Returns special tokens
	 */
	public static Vector<string> getSpecialTokens()
	{
		return [
			"...",
			"@code{",
			"@json{",
			"@raw{",
			"@{",
			"<!--",
			"-->",
			"<!",
			"</",
			"/>",
			"/*", "*/",
		];
	}
	
	
	
	/**
	 * Constructor
	 */
	void constructor (ContextInterface context = null, ParserBay parser = null)
	{
		parent(context, parser);
		this._special_tokens = self::getSpecialTokens();
	}
	
	
	
	/**
	 * Return true if char is token char
	 * @param {char} ch
	 * @return {boolean}
	 */
	bool isTokenChar (char ch)
	{
		return rs::strpos('qazwsxedcrfvtgbyhnujmikolp0123456789_-', rs::strtolower(ch)) !== -1;
	}
	
	
	
	/**
	 * Read comments
	 */
	string readComment(string open_tag)
	{
		
		string res = "";
		string ch = "";
		string look = "";
		this.moveString(open_tag);
		
		while (not this.isEOF()){
			ch = this.lookChar();
			look = this.lookString(2);
			if (look == "*/"){
				break;
			}
			res ~= ch;
			this.moveChar(ch);
		}
		
		if (look == "*/"){
			this.moveString(look);
		}
		else{
			throw new ParserEOF(this.context(), start_line, start_col);
		}
		
		return res;
	}
	
	
	
	/**
	 * Get next token without move cursor pos. Throws error if EOF.
	 * @param {BayrellParserToken} token
	 */
	public void readNextToken()
	{
		
		/* Init next token function */
		this.readNextTokenInit();
		this.skipSystemChar();
		this.initStartPos();
		

		/* Read comment */
		string look = this.lookString(2);
		if (look == "/*"){ /* */
			this.tp = self::TOKEN_COMMENT;
			this.token = this.readComment(look);
			this.success = true;
			return;
		}
		
		
		/* Try to read special tokens */
		int pos = this.findVector( this._special_tokens );
		if (pos >= 0){
			this.tp = self::TOKEN_BASE;
			this.token = this._special_tokens.item(pos);
			this.success = true;
			this.readString(rs::strlen(this.token));
			return;
		}
		
		
		/* Read base token */
		this.readNextTokenBase();
		
	}
	
}

