/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangBay;

use Runtime.Reference;
use Bayrell.Lang.Caret;
use Bayrell.Lang.CoreToken;
use Bayrell.Lang.Exceptions.ParserError;
use Bayrell.Lang.Exceptions.ParserExpected;
use Bayrell.Lang.LangBay.ParserBay;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpAnnotation;
use Bayrell.Lang.OpCodes.OpAssign;
use Bayrell.Lang.OpCodes.OpAssignStruct;
use Bayrell.Lang.OpCodes.OpAssignValue;
use Bayrell.Lang.OpCodes.OpAttr;
use Bayrell.Lang.OpCodes.OpBreak;
use Bayrell.Lang.OpCodes.OpCall;
use Bayrell.Lang.OpCodes.OpComment;
use Bayrell.Lang.OpCodes.OpContinue;
use Bayrell.Lang.OpCodes.OpDeclareFunction;
use Bayrell.Lang.OpCodes.OpDeclareFunctionArg;
use Bayrell.Lang.OpCodes.OpDelete;
use Bayrell.Lang.OpCodes.OpFlags;
use Bayrell.Lang.OpCodes.OpFor;
use Bayrell.Lang.OpCodes.OpIdentifier;
use Bayrell.Lang.OpCodes.OpIf;
use Bayrell.Lang.OpCodes.OpIfElse;
use Bayrell.Lang.OpCodes.OpInc;
use Bayrell.Lang.OpCodes.OpItems;
use Bayrell.Lang.OpCodes.OpPipe;
use Bayrell.Lang.OpCodes.OpPreprocessorIfDef;
use Bayrell.Lang.OpCodes.OpReturn;
use Bayrell.Lang.OpCodes.OpThrow;
use Bayrell.Lang.OpCodes.OpTryCatch;
use Bayrell.Lang.OpCodes.OpTryCatchItem;
use Bayrell.Lang.OpCodes.OpTypeIdentifier;
use Bayrell.Lang.OpCodes.OpWhile;


static class ParserBayOperator
{
	
	
	/**
	 * Read return
	 */
	pure list<ParserBay, BaseOpCode> readReturn(ParserBay parser)
	{
		CoreToken token = null;
		BaseOpCode op_code = null;
		ParserBay look = null;
		
		list res = parser.parser_base::matchToken(parser, "return"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content != ";")
		{
			list res = parser.parser_expression::readExpression(parser); parser = res[0]; op_code = res[1];
		}		
		
		return
		[
			parser,
			new OpReturn
			{
				"expression": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read delete
	 */
	pure list<ParserBay, BaseOpCode> readDelete(ParserBay parser)
	{
		CoreToken token = null;
		BaseOpCode op_code = null;
		
		list res = parser.parser_base::matchToken(parser, "delete"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		list res = parser.parser_base::readDynamic(parser); parser = res[0]; op_code = res[1];
		
		return
		[
			parser,
			new OpDelete
			{
				"op_code": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read throw
	 */
	pure list<ParserBay, BaseOpCode> readThrow(ParserBay parser)
	{
		CoreToken token = null;
		BaseOpCode op_code = null;
		
		list res = parser.parser_base::matchToken(parser, "throw"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; op_code = res[1];
		
		return
		[
			parser,
			new OpThrow
			{
				"expression": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read try
	 */
	pure list<ParserBay, BaseOpCode> readTry(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode op_try = null;
		Vector<OpTryCatchItem> items = new Vector();
		
		list res = parser.parser_base::matchToken(parser, "try"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		/* Try */
		list res = static::readOperators(parser); parser = res[0]; op_try = res[1];
		
		/* Catch */
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		while (not token.eof and token.content == "catch")
		{
			parser = look.clone();
			
			BaseOpCode op_catch = null;
			BaseOpCode var_op_code = null;
			OpTypeIdentifier pattern = null;
			Caret item_caret_start = token.caret_start.clone();
			
			/* Read ident */
			list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
			list res = parser.parser_base::readTypeIdentifier(parser); parser = res[0]; pattern = res[1];
			list res = parser.parser_base::readIdentifier(parser); parser = res[0]; var_op_code = res[1];
			string var_name = var_op_code.value;
			list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
			
			/* Save vars */
			Dict<bool> save_vars = parser.vars;
			parser <= vars <= parser.vars.setIm(var_name, true);
			
			/* Catch operators */
			list res = static::readOperators(parser); parser = res[0]; op_catch = res[1];
			
			/* Restore vars */
			parser <= vars <= save_vars;
			
			OpTryCatchItem item = new OpTryCatchItem
			{
				"name": var_name,
				"pattern": pattern,
				"value": op_catch,
				"caret_start": item_caret_start,
				"caret_end": parser.caret.clone(),
			};
			items.push(item);
			
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		}
		
		return
		[
			parser,
			new OpTryCatch
			{
				"op_try": op_try,
				"items": items.toCollection(),
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read then
	 */
	pure list<ParserBay, CoreToken> readThen(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "then")
		{
			return [look, token];
		}
		return [parser, token];
	}
	
	
	
	/**
	 * Read do
	 */
	pure list<ParserBay, CoreToken> readDo(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "do")
		{
			return [look, token];
		}
		return [parser, token];
	}
	
	
	
	/**
	 * Read if
	 */
	pure list<ParserBay, BaseOpCode> readIf(ParserBay parser)
	{
		ParserBay look = null;
		ParserBay look2 = null;
		CoreToken token = null;
		CoreToken token2 = null;
		
		BaseOpCode if_condition = null;
		BaseOpCode if_true = null;
		BaseOpCode if_false = null;
		Vector<OpIfElse> if_else = new Vector();
		
		list res = parser.parser_base::matchToken(parser, "if"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		/* Read expression */
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; if_condition = res[1];
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		list res = static::readThen(parser); parser = res[0];
		
		/* If true */
		list res = static::readOperators(parser); parser = res[0]; if_true = res[1];
		
		/* Else */
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		while (not token.eof and (token.content == "else" or token.content == "elseif"))
		{
			list res = parser.parser_base::readToken(look.clone()); look2 = res[0]; token2 = res[1];
			if (token2.content == "elseif" or token2.content == "if")
			{
				BaseOpCode ifelse_condition = null;
				BaseOpCode ifelse_block = null;
				
				if (token.content == "elseif") parser = look.clone();
				else if (token2.content == "if") parser = look2.clone();
				
				/* Read expression */
				list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
				list res = parser.parser_expression::readExpression(parser); 
				parser = res[0]; ifelse_condition = res[1];
				list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
				
				list res = static::readThen(parser); parser = res[0];
				list res = static::readOperators(parser); parser = res[0]; ifelse_block = res[1];
				
				if_else.push
				(
					new OpIfElse
					{
						"condition": ifelse_condition,
						"if_true": ifelse_block,
						"caret_start": token2.caret_start.clone(),
						"caret_end": parser.caret.clone(),
					}
				);
			}
			else
			{
				list res = static::readOperators(look.clone()); parser = res[0]; if_false = res[1];
				break;
			}
			
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		}
		
		return 
		[
			parser,
			new OpIf
			{
				"condition": if_condition,
				"if_true": if_true,
				"if_false": if_false,
				"if_else": if_else.toCollection(),
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read For
	 */
	pure list<ParserBay, BaseOpCode> readFor(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode op_code = null;
		BaseOpCode expr1 = null;
		BaseOpCode expr2 = null;
		BaseOpCode expr3 = null;
		
		/* Save vars */
		Dict<bool> save_vars = parser.vars;
		
		list res = parser.parser_base::matchToken(parser, "for"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0]; token = res[1];
		list res = static::readAssign(parser); parser = res[0]; expr1 = res[1];
		
		list res = parser.parser_base::matchToken(parser, ";"); parser = res[0]; token = res[1];
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; expr2 = res[1];
		
		list res = parser.parser_base::matchToken(parser, ";"); parser = res[0]; token = res[1];
		list res = static::readOperator(parser); parser = res[0]; expr3 = res[1];
		
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0]; token = res[1];
		list res = static::readOperators(parser); parser = res[0]; op_code = res[1];
		
		/* Restore vars */
		parser <= vars <= save_vars;
		
		return
		[
			parser,
			new OpFor
			{
				"expr1": expr1,
				"expr2": expr2,
				"expr3": expr3,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read While
	 */
	pure list<ParserBay, BaseOpCode> readWhile(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode condition = null;
		BaseOpCode op_code = null;
		
		list res = parser.parser_base::matchToken(parser, "while"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; condition = res[1];
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		
		list res = static::readDo(parser); parser = res[0]; token = res[1];
		list res = static::readOperators(parser); parser = res[0]; op_code = res[1];
		
		return
		[
			parser,
			new OpWhile
			{
				"condition": condition,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Read assign
	 */
	pure list<ParserBay, BaseOpCode> readAssign(ParserBay parser)
	{
		ParserBay start = parser.clone();
		ParserBay save = null;
		ParserBay look = null;
		CoreToken token = null;
		OpTypeIdentifier pattern = null;
		BaseOpCode op_code = null;
		BaseOpCode reg_name = null;
		BaseOpCode expression = null;
		Collection<string> names = null;
		Vector<OpAssignValue> values = null;
		string kind = OpAssign::KIND_ASSIGN;
		string var_name = "";
		
		list res = parser.parser_base::readIdentifier(parser); parser = res[0]; op_code = res[1];
		Caret caret_start = op_code.caret_start.clone();
		var_name = op_code.value;
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "<=")
		{
			Vector<string> arr = new Vector();
			
			while (not token.eof and token.content == "<=")
			{
				parser = look.clone(); save = parser.clone();
				
				list res = parser.parser_base::readToken(parser); parser = res[0]; token = res[1];
				string name = token.content;
				
				list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
				if (token.content != "<=")
				{
					parser = save.clone();
					break;
				}
				else
				{
					if (not parser.parser_base::isIdentifier(name))
					{
						throw new ParserExpected("Identifier", save.caret.clone(), parser.file_name);
					}
					arr.push( name );
				}
			}
			
			names = arr.toCollection();
			list res = parser.parser_expression::readExpression(parser); parser = res[0]; expression = res[1];
			return 
			[
				parser,
				new OpAssignStruct
				{
					"caret_start": caret_start,
					"caret_end": parser.caret.clone(),
					"expression": expression,
					"var_name": var_name,
					"names": names,
				}
			];
		}
		
		if 
		(
			token.content != "=" and token.content != "+=" and token.content != "-=" and
			token.content != "~=" and token.content != "." and token.content != "::" and token.content != "["
		)
		{
			BaseOpCode var_op_code = null;
			kind = OpAssign::KIND_DECLARE;
			values = new Vector<OpAssignValue>();
			parser = start.clone();
			list res = parser.parser_base::readTypeIdentifier(parser); parser = res[0]; pattern = res[1];
			list res = parser.parser_base::readIdentifier(parser); parser = res[0]; var_op_code = res[1];
			var_name = var_op_code.value;
			
			/* Read expression */
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			if (token.content == "=")
			{
				list res = parser.parser_expression::readExpression(look.clone());
				parser = res[0]; expression = res[1];					
			}
			else
			{
				expression = null;
			}
			
			parser <= vars <= parser.vars.setIm(var_name, true);
			values.push
			(
				new OpAssignValue
				{
					"var_name": var_name,
					"expression": expression,
					"caret_start": var_op_code.caret_start.clone(),
					"caret_end": parser.caret.clone(),
				}
			);
			
			
			/* Look next token */
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			while (not token.eof and token.content == ",")
			{
				list res = parser.parser_base::readIdentifier(look.clone()); parser = res[0]; var_op_code = res[1];
				var_name = var_op_code.value;
				
				/* Read expression */
				list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
				if (token.content == "=")
				{
					list res = parser.parser_expression::readExpression(look.clone());
					parser = res[0]; expression = res[1];					
				}
				else
				{
					expression = null;
				}
				
				parser <= vars <= parser.vars.setIm(var_name, true);
				values.push(
					new OpAssignValue
					{
						"var_name": var_name,
						"expression": expression,
						"caret_start": var_op_code.caret_start.clone(),
						"caret_end": parser.caret.clone(),
					}
				);
				
				list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			}
			
			var_name = "";
			expression = null;
		}
		else
		{
			parser = start.clone();
			kind = OpAssign::KIND_ASSIGN;
			string op = "";
			
			list res = parser.parser_base::readDynamic(parser);
			parser = res[0]; BaseOpCode op_code = res[1];
			
			list res = parser.parser_base::readToken(parser); parser = res[0]; token = res[1];
			if 
			(
				token.content == "=" or token.content == "+=" or token.content == "-=" or
				token.content == "~="
			)
			{
				op = token.content;
			}
			else
			{
				throw new ParserError
				(
					"Unknown operator " ~ token.content, token.caret_start.clone(), parser.file_name
				);
			}
			
			list res = parser.parser_expression::readExpression(parser);
			parser = res[0]; expression = res[1];
			
			values = [ new OpAssignValue{ "op_code": op_code, "expression": expression, "op": op } ];
			
			var_name = "";
			expression = null;
		}
		
		
		return 
		[
			parser,
			new OpAssign
			{
				"pattern": pattern,
				"values": (values != null) ? values.toCollection() : null,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
				"expression": expression,
				"var_name": var_name,
				"names": names,
				"kind": kind,
			}
		];
	}
	
	
	
	/**
	 * Read operator
	 */
	pure list<ParserBay, BaseOpCode> readInc(ParserBay parser)
	{
		ParserBay look = null;
		ParserBay look1 = null;
		ParserBay look2 = null;
		CoreToken token = null;
		CoreToken token1 = null;
		CoreToken token2 = null;
		
		list res = parser.parser_base::readToken(parser.clone()); look1 = res[0]; token1 = res[1];
		Caret caret_start = token1.caret_start.clone();
		
		list res = parser.parser_base::readToken(look1.clone()); look2 = res[0]; token2 = res[1];
		
		string look1_content = token1.content;
		string look2_content = token2.content;
		
		if ((look1_content == "++" or look1_content == "--") and parser.parser_base::isIdentifier(look2_content))
		{
			parser = look2.clone();
			BaseOpCode op_code = new OpIdentifier
			{
				"value": look2_content,
				"caret_start": token2.caret_start.clone(),
				"caret_end": token2.caret_end.clone(),
			};
			op_code = new OpInc
			{
				"kind": (look1_content == "++") ? OpInc::KIND_PRE_INC : OpInc::KIND_PRE_DEC,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			};
			return [parser, op_code];
		}
		
		if ((look2_content == "++" or look2_content == "--") and parser.parser_base::isIdentifier(look1_content))
		{
			parser = look2.clone();
			BaseOpCode op_code = new OpIdentifier
			{
				"value": look1_content,
				"caret_start": token1.caret_start.clone(),
				"caret_end": token1.caret_end.clone(),
			};
			op_code = new OpInc
			{
				"kind": (look2_content == "++") ? OpInc::KIND_POST_INC : OpInc::KIND_POST_DEC,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			};
			return [parser, op_code];
		}
		
		return [parser, null];
	}
	
	
	
	/**
	 * Read call function
	 */
	pure list<ParserBay, BaseOpCode> readCallFunction(ParserBay parser)
	{
		BaseOpCode op_code = null;
		list res = parser.parser_base::readDynamic(parser); parser = res[0]; op_code = res[1];
		
		if (op_code instanceof OpCall or op_code instanceof OpPipe)
		{
			return [parser, op_code];
		}
		
		return [parser, null];
	}
	
	
	
	/**
	 * Read operator
	 */
	pure list<ParserBay, BaseOpCode> readOperator(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		
		parser <= skip_comments <= false;
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		parser <= skip_comments <= true;
		
		if (token.content == "/")
		{
			return parser.parser_base::readComment(parser);
		}
		else if (token.content == "#switch" or token.content == "#ifcode")
		{
			return parser.parser_preprocessor::readPreprocessor(parser);
		}
		else if (token.content == "#ifdef")
		{
			return parser.parser_preprocessor::readPreprocessorIfDef
			(
				parser, OpPreprocessorIfDef::KIND_OPERATOR
			);
		}
		else if (token.content == "break")
		{
			return
			[
				look,
				new OpBreak
				{
					"caret_start": caret_start,
					"caret_end": look.caret,
				}
			];
		}
		else if (token.content == "continue")
		{
			return
			[
				look,
				new OpContinue
				{
					"caret_start": caret_start,
					"caret_end": look.caret.clone(),
				}
			];
		}
		else if (token.content == "delete")
		{
			return static::readDelete(parser);
		}
		else if (token.content == "return")
		{
			return static::readReturn(parser);
		}
		else if (token.content == "throw")
		{
			return static::readThrow(parser);
		}
		else if (token.content == "try")
		{
			return static::readTry(parser);
		}
		else if (token.content == "if")
		{
			return static::readIf(parser);
		}
		else if (token.content == "for")
		{
			return static::readFor(parser);
		}
		else if (token.content == "while")
		{
			return static::readWhile(parser);
		}
		
		BaseOpCode op_code = null;
		
		/* Read op inc */
		list res = static::readInc(parser.clone()); look = res[0]; op_code = res[1];
		if (op_code != null)
		{
			return res;
		}
		
		/* Read op call function */
		list res = static::readCallFunction(parser.clone()); look = res[0]; op_code = res[1];
		if (op_code != null)
		{
			return res;
		}
		
		return static::readAssign(parser);
	}
	
	
	
	/**
	 * Read operators
	 */
	pure list<ParserBay, BaseOpCode> readOpItems(ParserBay parser, string end_tag = "}")
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode op_code = null;
		Vector<BaseOpCode> arr = new Vector();
		Caret caret_start = parser.caret;
		
		parser <= skip_comments <= false;
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		parser <= skip_comments <= true;
		
		while (not token.eof and token.content != end_tag)
		{
			BaseOpCode parser_value = null;
			
			list res = static::readOperator(parser); parser = res[0]; parser_value = res[1];
			if (parser_value != null)
			{
				arr.push(parser_value);
			}
			
			parser <= skip_comments <= false;
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			parser <= skip_comments <= true;
			
			if (token.content == ";")
			{
				parser = look.clone();
				parser <= skip_comments <= false;
				list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
				parser <= skip_comments <= true;
			}
		}
		
		op_code = new OpItems
		{
			"items": arr.toCollection(),
			"caret_start": caret_start,
			"caret_end": parser.caret,
		};
		
		return [parser, op_code];
	}
	
	
	
	/**
	 * Read operators
	 */
	pure list<ParserBay, BaseOpCode> readOperators(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode op_code = null;
		
		/* Save vars */
		Dict<bool> save_vars = parser.vars;
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		if (token.content == "{")
		{
			list res = parser.parser_base::matchToken(parser, "{"); parser = res[0];
			list res = static::readOpItems(parser, "}"); parser = res[0]; op_code = res[1];
			list res = parser.parser_base::matchToken(parser, "}"); parser = res[0];
		}
		else
		{
			list res = static::readOperator(parser); parser = res[0]; op_code = res[1];
			list res = parser.parser_base::matchToken(parser, ";"); parser = res[0];
		}
		
		/* Restore vars */
		parser <= vars <= save_vars;
		
		return [parser, op_code];
	}
	
	
	
	/**
	 * Read flags
	 */
	pure list<ParserBay, OpFlags> readFlags(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		Map values = new Map();
		Collection<string> current_flags = OpFlags::getFlags();
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		while (not token.eof and current_flags.indexOf(token.content) >= 0)
		{
			string flag = token.content;
			values.set("p_"~flag, true);
			parser = look.clone();
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		}
		
		return 
		[
			parser,
			new OpFlags(values)
		];
	}
	
	
	
	/**
	 * Read function args
	 */
	pure list<ParserBay, Collection> readDeclareFunctionArgs(ParserBay parser, bool find_ident = true)
	{
		ParserBay look = null;
		CoreToken token = null;
		Vector<BaseOpCode> items = new Vector();
		
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		while (not token.eof and token.content != ")")
		{
			BaseOpCode arg_value = null;
			BaseOpCode arg_pattern = null;
			BaseOpCode arg_expression = null;
			ParserBay arg_start = parser;
			
			/* Arg type */
			list res = parser.parser_base::readTypeIdentifier(parser, find_ident);
			parser = res[0]; arg_pattern = res[1];
			
			/* Arg name */
			list res = parser.parser_base::readIdentifier(parser);
			parser = res[0]; arg_value = res[1];
			string arg_name = arg_value.value;
			
			/* Arg expression */
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			if (token.content == "=")
			{
				parser = look.clone();
				Dict<bool> save_vars = parser.vars;
				parser <= vars <= new Dict<bool>();
				list res = parser.parser_expression::readExpression(parser);
				parser = res[0]; arg_expression = res[1];
				parser <= vars <= save_vars;
			}
			
			/* Register variable in parser */
			parser <= vars <= parser.vars.setIm(arg_name, true);
			
			items.push
			(
				new OpDeclareFunctionArg
				{
					"pattern": arg_pattern,
					"name": arg_name,
					"expression": arg_expression,
					"caret_start": arg_pattern.caret_start.clone(),
					"caret_end": parser.caret.clone(),
				}
			);
			
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			if (token.content == ",")
			{
				parser = look.clone();
				list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			}
		}
		
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		return [parser, items.toCollection()];
	}
	
	
	
	/**
	 * Read function variables
	 */
	pure list<ParserBay, Collection> readDeclareFunctionUse
	(
		ParserBay parser, Dict<bool> vars = null, bool find_ident = true
	)
	{
		ParserBay look = null;
		CoreToken token = null;
		Vector<BaseOpCode> items = new Vector();
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "use")
		{
			parser = look.clone();
			list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			while (not token.eof and token.content != ")")
			{
				BaseOpCode ident = null;
				list res = parser.parser_base::readIdentifier(parser); parser = res[0]; ident = res[1];
				string name = ident.value;
				
				if (vars != null and find_ident)
				{
					if (not vars.has(name))
					{
						throw new ParserError
						(
							"Unknown identifier '" ~ name ~ "'",
							ident.caret_start.clone(),
							parser.file_name
						);
					}
				}
				items.push(name);
				
				list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
				if (token.content == ",")
				{
					parser = look.clone();
					list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
				}
			}
			list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		}
		
		return [parser, items.toCollection()];
	}
	
	
	
	/**
	 * Read function
	 */
	pure list<ParserBay, BaseOpCode> readDeclareFunction(ParserBay parser, string has_name = true)
	{
		ParserBay look = null;
		BaseOpCode parser_value = null;
		BaseOpCode op_code = null;
		CoreToken token = null;
		
		/* Clear vars */
		Dict<bool> save_vars = parser.vars;
		parser <= vars <= new Dict<bool>();
		
		list res = parser.parser_base::readTypeIdentifier(parser); parser = res[0]; parser_value = res[1];
		Caret caret_start = parser_value.caret_start.clone();
		
		BaseOpCode result_type = parser_value;
		BaseOpCode expression = null;
		bool is_context = true;
		string name = "";
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "@") { is_context = false; parser = look; }
		
		if (has_name)
		{
			list res = parser.parser_base::readIdentifier(parser); parser = res[0]; parser_value = res[1];
			string name = parser_value.value;
		}
		
		/* Read function arguments */
		Collection<OpDeclareFunctionArg> args = null;
		list res = static::readDeclareFunctionArgs(parser); parser = res[0]; args = res[1];
		
		/* Read function variables */
		Collection<OpDeclareFunctionArg> vars = null;
		list res = static::readDeclareFunctionUse(parser, save_vars); parser = res[0]; vars = res[1];
		
		/* Add variables */
		vars.each
		(
			void (string name) use (parser)
			{
				parser <= vars <= parser.vars.setIm(name, true);
			}
		);
		
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "=>")
		{
			list res = parser.parser_base::matchToken(parser, "=>"); parser = res[0];
			list res = parser.parser_expression::readExpression(parser);
			parser = res[0]; expression = res[1]; op_code = null;
		}
		else if (token.content == "{")
		{
			ParserBay save = parser.clone();
			list res = parser.parser_base::matchToken(parser, "{"); parser = res[0];
			list res = static::readOperators(save); parser = res[0]; op_code = res[1];
		}
		else if (token.content == ";")
		{
			list res = parser.parser_base::matchToken(parser, ";"); parser = res[0];
			expression = null; op_code = null;
		}
		
		/* Restore vars */
		parser <= vars <= save_vars;
		
		return 
		[
			parser,
			new OpDeclareFunction
			{
				"args": args,
				"vars": vars,
				"name": name,
				"is_context": is_context,
				"result_type": result_type,
				"expression": expression,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret.clone(),
			}
		];
	}
	
	
	
	/**
	 * Returns true if next is function
	 */
	pure bool tryReadFunction(ParserBay parser, string has_name = true, OpFlags flags = null)
	{
		ParserBay look = null;
		BaseOpCode parser_value = null;
		BaseOpCode token = null;
		
		/* Clear vars */
		Dict<bool> save_vars = parser.vars;
		parser <= vars <= new Dict<bool>();
		parser <= find_ident <= false;
		
		bool res = false;
		try
		{
			list res = parser.parser_base::readTypeIdentifier(parser, false);
			parser = res[0]; parser_value = res[1];
			Caret caret_start = parser_value.caret_start.clone();
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			if (token.content == "@") parser = look;
			if (has_name)
			{
				list res = parser.parser_base::readIdentifier(parser); parser = res[0];
			}
			list res = static::readDeclareFunctionArgs(parser, false); parser = res[0];
			list res = static::readDeclareFunctionUse(parser, null, false); parser = res[0];
			list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
			if (flags != null and flags.p_declare or parser.current_class_kind == "interface")
			{
				if (token.content != ";")
				{
					throw new ParserExpected("Function", caret_start, parser.file_name);
				}
			}
			else if (token.content != "=>" and token.content != "{")
			{
				throw new ParserExpected("Function", caret_start, parser.file_name);
			}
			res = true;
		}
		catch (ParserExpected e)
		{
			res = false;
		}
		
		/* Restore vars */
		parser <= vars <= save_vars;
		parser <= find_ident <= true;
		
		return res;
	}
	
	
	
	/**
	 * Read annotation
	 */
	pure list<ParserBay, BaseOpCode> readAnnotation(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode name = null;
		BaseOpCode params = null;
		
		list res = parser.parser_base::matchToken(parser, "@"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start.clone();
		
		list res = parser.parser_base::readTypeIdentifier(parser); parser = res[0]; name = res[1];
		list res = parser.parser_base::readToken(parser.clone()); look = res[0]; token = res[1];
		if (token.content == "{")
		{
			list res = parser.parser_base::readDict(parser); parser = res[0]; params = res[1];
		}
		
		return
		[
			parser,
			new OpAnnotation
			{
				"name": name,
				"params": params,
			}
		];
	}
	
}