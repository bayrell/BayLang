/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangBay;

use Runtime.BaseObject;
use Runtime.Reference;
use BayLang.Caret;
use BayLang.CoreToken;
use BayLang.TokenReader;
use BayLang.Exceptions.ParserError;
use BayLang.Exceptions.ParserExpected;
use BayLang.LangBay.ParserBay;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpAnnotation;
use BayLang.OpCodes.OpAssign;
use BayLang.OpCodes.OpAssignStruct;
use BayLang.OpCodes.OpAssignValue;
use BayLang.OpCodes.OpAttr;
use BayLang.OpCodes.OpBreak;
use BayLang.OpCodes.OpCall;
use BayLang.OpCodes.OpComment;
use BayLang.OpCodes.OpContinue;
use BayLang.OpCodes.OpDeclareFunction;
use BayLang.OpCodes.OpDeclareFunctionArg;
use BayLang.OpCodes.OpDelete;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpFlags;
use BayLang.OpCodes.OpFor;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpIf;
use BayLang.OpCodes.OpIfElse;
use BayLang.OpCodes.OpInc;
use BayLang.OpCodes.OpItems;
use BayLang.OpCodes.OpPipe;
use BayLang.OpCodes.OpPreprocessorIfDef;
use BayLang.OpCodes.OpReturn;
use BayLang.OpCodes.OpThrow;
use BayLang.OpCodes.OpTryCatch;
use BayLang.OpCodes.OpTryCatchItem;
use BayLang.OpCodes.OpTypeIdentifier;
use BayLang.OpCodes.OpWhile;


class ParserBayOperator extends BaseObject
{
	ParserBay parser = null;
	
	
	/**
	 * Constructor
	 */
	void constructor(ParserBay parser)
	{
		parent();
		this.parser = parser;
	}
	
	
	/**
	 * Read annotation
	 */
	pure list<ParserBay, BaseOpCode> readAnnotation(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode name = null;
		BaseOpCode params = null;
		
		list res = parser.parser_base::matchToken(parser, "@"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		list res = parser.parser_base::readTypeIdentifier(parser); parser = res[0]; name = res[1];
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		if (token.content == "{")
		{
			list res = parser.parser_base::readDict(parser); parser = res[0]; params = res[1];
		}
		
		return
		[
			parser,
			new OpAnnotation
			{
				"name": name,
				"params": params,
			}
		];
	}
	
	
	/**
	 * Read return
	 */
	pure list<ParserBay, BaseOpCode> readReturn(ParserBay parser)
	{
		CoreToken token = null;
		BaseOpCode op_code = null;
		ParserBay look = null;
		
		list res = parser.parser_base::matchToken(parser, "return"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		if (token.content != ";")
		{
			list res = parser.parser_expression::readExpression(parser); parser = res[0]; op_code = res[1];
		}		
		
		return
		[
			parser,
			new OpReturn
			{
				"expression": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read delete
	 */
	pure list<ParserBay, BaseOpCode> readDelete(ParserBay parser)
	{
		CoreToken token = null;
		BaseOpCode op_code = null;
		
		list res = parser.parser_base::matchToken(parser, "delete"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		list res = parser.parser_base::readDynamic(parser); parser = res[0]; op_code = res[1];
		
		return
		[
			parser,
			new OpDelete
			{
				"op_code": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read throw
	 */
	pure list<ParserBay, BaseOpCode> readThrow(ParserBay parser)
	{
		CoreToken token = null;
		BaseOpCode op_code = null;
		
		list res = parser.parser_base::matchToken(parser, "throw"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; op_code = res[1];
		
		return
		[
			parser,
			new OpThrow
			{
				"expression": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read try
	 */
	pure list<ParserBay, BaseOpCode> readTry(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode op_try = null;
		Vector<OpTryCatchItem> items = new Vector();
		
		list res = parser.parser_base::matchToken(parser, "try"); parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		/* Try */
		list res = static::readOperators(parser); parser = res[0]; op_try = res[1];
		
		/* Catch */
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		while (not token.eof and token.content == "catch")
		{
			parser = look;
			
			BaseOpCode op_catch = null;
			BaseOpCode var_op_code = null;
			OpTypeIdentifier pattern = null;
			Caret item_caret_start = token.caret_start;
			
			/* Read ident */
			list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
			list res = parser.parser_base::readTypeIdentifier(parser); parser = res[0]; pattern = res[1];
			list res = parser.parser_base::readIdentifier(parser); parser = res[0]; var_op_code = res[1];
			string var_name = var_op_code.value;
			list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
			
			/* Save vars */
			Dict<bool> save_vars = parser.vars;
			parser <= vars <= parser.vars.setIm(var_name, true);
			
			/* Catch operators */
			list res = static::readOperators(parser); parser = res[0]; op_catch = res[1];
			
			/* Restore vars */
			parser <= vars <= save_vars;
			
			OpTryCatchItem item = new OpTryCatchItem
			{
				"name": var_name,
				"pattern": pattern,
				"value": op_catch,
				"caret_start": item_caret_start,
				"caret_end": parser.caret,
			};
			items.push(item);
			
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		}
		
		return
		[
			parser,
			new OpTryCatch
			{
				"op_try": op_try,
				"items": items,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read then
	 */
	pure list<ParserBay, CoreToken> readThen(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		if (token.content == "then")
		{
			return [look, token];
		}
		return [parser, token];
	}
	
	
	/**
	 * Read do
	 */
	pure list<ParserBay, CoreToken> readDo(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		if (token.content == "do")
		{
			return [look, token];
		}
		return [parser, token];
	}
	
	
	/**
	 * Read if
	 */
	pure list<ParserBay, BaseOpCode> readIf(ParserBay parser)
	{
		ParserBay look = null;
		ParserBay look2 = null;
		CoreToken token = null;
		CoreToken token2 = null;
		
		BaseOpCode if_condition = null;
		BaseOpCode if_true = null;
		BaseOpCode if_false = null;
		Vector<OpIfElse> if_else = new Vector();
		
		list res = parser.parser_base::matchToken(parser, parser.is_html ? "%if" : "if");
		parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		/* Read expression */
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
		list res = parser.parser_expression::readExpression(parser); parser = res[0];
		if_condition = res[1];
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		list res = static::readThen(parser); parser = res[0];
		
		/* If true */
		list res = static::readOperators(parser); parser = res[0]; if_true = res[1];
		
		/* Else */
		list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		while
			(
			not token.eof and
			(
				parser.is_html and (token.content == "%else" or token.content == "%elseif") or
				not parser.is_html and (token.content == "else" or token.content == "elseif")
			)
		)
		{
			list res = parser.parser_base::readToken(look); look2 = res[0]; token2 = res[1];
			if (
				token.content == "%elseif" or token.content == "elseif" or
				(token.content == "else" and token2.content == "if") or
				(token.content == "%else" and token2.content == "if")
			)
			{
				BaseOpCode ifelse_condition = null;
				BaseOpCode ifelse_block = null;
				
				if (token.content == "elseif") parser = look;
				else if (token2.content == "%elseif") parser = look2;
				else if (token2.content == "if") parser = look2;
				else if (token2.content == "%if") parser = look2;
				
				/* Read expression */
				list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
				list res = parser.parser_expression::readExpression(parser); 
				parser = res[0]; ifelse_condition = res[1];
				list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
				
				list res = static::readThen(parser); parser = res[0];
				list res = static::readOperators(parser); parser = res[0]; ifelse_block = res[1];
				
				if_else.push
				(
					new OpIfElse
					{
						"condition": ifelse_condition,
						"if_true": ifelse_block,
						"caret_start": token2.caret_start,
						"caret_end": parser.caret,
					}
				);
			}
			else
			{
				list res = static::readOperators(look); parser = res[0]; if_false = res[1];
				break;
			}
			
			list res = parser.parser_base::readToken(parser); look = res[0]; token = res[1];
		}
		
		return 
		[
			parser,
			new OpIf
			{
				"condition": if_condition,
				"if_true": if_true,
				"if_false": if_false,
				"if_else": if_else,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read For
	 */
	pure list<ParserBay, BaseOpCode> readFor(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode op_code = null;
		BaseOpCode expr1 = null;
		BaseOpCode expr2 = null;
		BaseOpCode expr3 = null;
		
		/* Save vars */
		Dict<bool> save_vars = parser.vars;
		
		list res = parser.parser_base::matchToken(parser, parser.is_html ? "%for" : "for");
		parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0]; token = res[1];
		list res = static::readAssign(parser); parser = res[0]; expr1 = res[1];
		
		list res = parser.parser_base::matchToken(parser, ";"); parser = res[0]; token = res[1];
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; expr2 = res[1];
		
		list res = parser.parser_base::matchToken(parser, ";"); parser = res[0]; token = res[1];
		list res = static::readOperator(parser); parser = res[0]; expr3 = res[1];
		
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0]; token = res[1];
		list res = static::readOperators(parser); parser = res[0]; op_code = res[1];
		
		/* Restore vars */
		parser <= vars <= save_vars;
		
		return
		[
			parser,
			new OpFor
			{
				"expr1": expr1,
				"expr2": expr2,
				"expr3": expr3,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read While
	 */
	pure list<ParserBay, BaseOpCode> readWhile(ParserBay parser)
	{
		ParserBay look = null;
		CoreToken token = null;
		BaseOpCode condition = null;
		BaseOpCode op_code = null;
		
		list res = parser.parser_base::matchToken(parser, parser.is_html ? "%while" : "while");
		parser = res[0]; token = res[1];
		Caret caret_start = token.caret_start;
		
		list res = parser.parser_base::matchToken(parser, "("); parser = res[0];
		list res = parser.parser_expression::readExpression(parser); parser = res[0]; condition = res[1];
		list res = parser.parser_base::matchToken(parser, ")"); parser = res[0];
		
		list res = static::readDo(parser); parser = res[0]; token = res[1];
		list res = static::readOperators(parser); parser = res[0]; op_code = res[1];
		
		return
		[
			parser,
			new OpWhile
			{
				"condition": condition,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			}
		];
	}
	
	
	/**
	 * Read assign
	 */
	OpAssign readAssign(TokenReader reader, OpIdentifier pattern = null)
	{
		Caret caret_start = reader.caret();
		Collection<OpAssignValue> items = [];
		
		/* Read pattern */
		if (pattern == null)
		{
			pattern = this.parser.parser_base.readIdentifier(reader);
		}
		
		/* Read items */
		if (reader.nextToken() != "=")
		{
			while (not reader.eof())
			{
				Caret caret_value_start = reader.caret();
				
				/* Read assign value */
				OpIdentifier value = this.parser.parser_base.readIdentifier(reader);
				
				/* Register variable */
				this.parser.addVariable(value);
				
				/* Read expression */
				BaseOpCode expression = null;
				if (reader.nextToken() == "=")
				{
					reader.matchToken("=");
					expression = this.parser.parser_expression.readExpression(reader);
				}
				
				/* Add op_code */
				items.push(new OpAssignValue{
					"caret_start": caret_value_start,
					"caret_end": reader.caret(),
					"value": value,
					"expression": expression,
				});
				
				/* Read next token */
				if (reader.nextToken() != ",") break;
				reader.readToken();
			}
		}
		
		/* Assign single value */
		else
		{
			/* Find identifier */
			this.parser.findVariable(pattern);
			
			/* Read expression */
			reader.matchToken("=");
			BaseOpCode expression = this.parser.parser_expression.readExpression(reader);
			items.push(new OpAssignValue{
				"caret_start": caret_start,
				"caret_end": reader.caret(),
				"value": pattern,
				"expression": expression,
			});
		}
		
		/* Returns op_code */
		return new OpAssign
		{
			"flags": new OpFlags(),
			"pattern": pattern,
			"items": items,
			"caret_start": caret_start,
			"caret_end": reader.caret(),
		};
	}
	
	
	/**
	 * Read operator
	 */
	pure list<ParserBay, BaseOpCode> readInc(ParserBay parser)
	{
		ParserBay look = null;
		ParserBay look1 = null;
		ParserBay look2 = null;
		CoreToken token = null;
		CoreToken token1 = null;
		CoreToken token2 = null;
		
		list res = parser.parser_base::readToken(parser); look1 = res[0]; token1 = res[1];
		Caret caret_start = token1.caret_start;
		
		list res = parser.parser_base::readToken(look1); look2 = res[0]; token2 = res[1];
		
		string look1_content = token1.content;
		string look2_content = token2.content;
		
		if ((look1_content == "++" or look1_content == "--") and parser.parser_base::isIdentifier(look2_content))
		{
			parser = look2;
			BaseOpCode op_code = new OpIdentifier
			{
				"value": look2_content,
				"caret_start": token2.caret_start,
				"caret_end": token2.caret_end,
			};
			op_code = new OpInc
			{
				"kind": (look1_content == "++") ? OpInc::KIND_PRE_INC : OpInc::KIND_PRE_DEC,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			};
			return [parser, op_code];
		}
		
		if ((look2_content == "++" or look2_content == "--") and parser.parser_base::isIdentifier(look1_content))
		{
			parser = look2;
			BaseOpCode op_code = new OpIdentifier
			{
				"value": look1_content,
				"caret_start": token1.caret_start,
				"caret_end": token1.caret_end,
			};
			op_code = new OpInc
			{
				"kind": (look2_content == "++") ? OpInc::KIND_POST_INC : OpInc::KIND_POST_DEC,
				"value": op_code,
				"caret_start": caret_start,
				"caret_end": parser.caret,
			};
			return [parser, op_code];
		}
		
		return [parser, null];
	}
	
	
	/**
	 * Read operator
	 */
	BaseOpCode readOperator(TokenReader reader)
	{
		string next_token = reader.nextToken();
		Caret caret_start = reader.caret();
		
		/* Comment */
		if (next_token == "/")
		{
			return this.parser.parser_base.readComment(reader);
		}
		
		/* Prepocessor */
		else if (next_token == "#switch" or next_token == "#ifcode")
		{
			return this.parser.parser_preprocessor.readPreprocessor(reader);
		}
		else if (next_token == "#ifdef")
		{
			return this.parser.parser_preprocessor.readPreprocessorIfDef
			(
				reader, OpPreprocessorIfDef::KIND_OPERATOR
			);
		}
		
		/* Break */
		else if (next_token == "break")
		{
			return new OpBreak
			{
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		/* Continue */
		else if (next_token == "continue")
		{
			return new OpContinue
			{
				"caret_start": caret_start,
				"caret_end": reader.caret(),
			};
		}
		
		/* Delete */
		else if (next_token == "delete")
		{
			return this.readDelete(reader);
		}
		
		/* Return */
		else if (next_token == "return")
		{
			return this.readReturn(reader);
		}
		
		/* Throw */
		else if (next_token == "throw")
		{
			return this.readThrow(reader);
		}
		
		/* Try catch */
		else if (next_token == "try")
		{
			return this.readTry(reader);
		}
		
		/* If operator */
		else if (next_token == "if")
		{
			return this.readIf(reader);
		}
		
		/* For operator */
		else if (next_token == "for")
		{
			return this.readFor(reader);
		}
		
		/* While operator */
		else if (next_token == "while")
		{
			return this.readWhile(reader);
		}
		
		/* Safe operator */
		else if (next_token == "safe")
		{
			return static::readSafe(reader);
		}
		
		/* Read pattern */
		OpIdentifier pattern = this.parser.parser_base.readIdentifier(reader);
		
		/* Try to read call function */
		if (reader.nextToken() == "(")
		{
			OpCall op_code = this.parser.parser_function.readCallFunction(reader, pattern);
			if (op_code) return op_code;
		}
		
		/* Assign operator */
		return this.readAssign(reader, pattern);
	}
	
	
	/**
	 * Read operators
	 */
	Collection<BaseOpCode> parse(TokenReader reader, string end_tag = "}")
	{
		Collection<BaseOpCode> items = [];
		
		/* Read operators */
		while (not reader.eof() and reader.nextToken() != end_tag)
		{
			BaseOpCode op_code = this.readOperator();
			if (op_code)
			{
				items.push(op_code);
			}
			else
			{
				break;
			}
			
			/* Match semicolon */
			if (reader.nextToken() == ";")
			{
				reader.matchToken(";");
			}
		}
		return items;
	}
}