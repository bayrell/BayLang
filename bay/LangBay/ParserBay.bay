/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangBay;

use BayrellRtl.Lib.rs;
use BayrellRtl.Types.Vector;
use BayrellLang.CommonParser;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellParser.ParserToken;


export class ParserBay extends CommonParser{
	
	
	
	/**
	 * Read double value and
	 * @return BaseOpCode
	 */
	BaseOpCode readFixed(){
		
		boolean success = false;
		string res = "";
		ParserToken current_token = clone this.current_token;
		ParserToken next_token = clone this.next_token;
		
		
		/* Try to read HEX Number */
		try{
			res = this.matchHexNumber();
			success = true;
		}
		catch (Exception ex){
			success = false;
		}
		
		if (success)
			return new OpNumber(res);
		
		
		/* Try to read Double */
		this.current_token = clone current_token;
		this.next_token = clone next_token;
		try{
			res = this.matchDouble();
			success = true;
		}
		catch (Exception ex){
			success = false;
		}
		
		if (success)
			return new OpHexNumber(res);
		
		
		/* Try to read string */
		this.current_token = clone current_token;
		this.next_token = clone next_token;
		
		if (this.findNextToken("'") or this.findNextToken('"')){
			string ch = this.readNextToken().token;
			res = this.readNextToken().token;
			this.matchNextToken(ch);
			return new OpString(res);
		}
		
		
		this.nextTokenExpected("String or number");
	}
	
	
	
	/**
	 * Read Identifier
	 * @return OpIdentifier
	 */
	OpIdentifier readIdentifier(){
		string res = this.readNextToken().token;
		
		if (not this.isSymbolChar(rs::charAt(res, 0))){
			this.parserError("First char of the identifier must be a letter");
		}
		
		return new OpIdentifier(res);
	}
	
	
	
	/**
	 * Read dynamic identifier
	 * @return BaseOpCode
	 */
	BaseOpCode readDynamicIdentifier(){
		
		BaseOpCode res = this.readIdentifier();
		if (not this.findNextToken("."))
			return res;
		}
		
		Vector<BaseOpCode> v = new Vector();
		v.push(res);
		
		while (this.findNextToken(".")){
			this.matchNextToken(".");
			res = this.readIdentifier();
			v.push(res);
		}
		
		return new OpDynamicIdentifier(v);
	}
	
	
	
	/**
	 * Read type identifier
	 * @return BaseOpCode
	 */
	BaseOpCode readTypeIdentifier(){
		
		BaseOpCode res1 = this.readDynamicIdentifier();
		if (not this.findNextToken("<")){
			return res1;
		}
		
		Vector<BaseOpCode> v = new Vector();
		
		this.matchNextToken("<");
		BaseOpCode res2 = this.readDynamicIdentifier();
		v.push(res2);
		
		while (this.findNextToken(",")){
			BaseOpCode res2 = this.readDynamicIdentifier();
			v.push(res2);		
		}
		this.matchNextToken(">");
		
		return new OpTypeIdentifier(res1, v);
	}
	
	
	
	/**
	 * Read static identifier
	 * @return BaseOpCode
	 */
	BaseOpCode readStaticIdentifier(){
	
		BaseOpCode res1 = this.readTypeIdentifier();
		if (not this.findNextToken(":")){
			return res1;
		}
		
		this.matchNextToken(":");
		this.matchNextToken(":");
		
		BaseOpCode res2 = this.readIdentifier();
		return new OpStaticIdentifier(res1, res2);
	}
	
	
	
	/**
	 * Read op name
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionElement(){
		
		if (this.findNextToken('(')){
			this.matchNextToken('(');
			BaseOpCode res = this.readExpression();
			this.matchNextToken(')');
			return res;
		}
		
		return this.readDouble();
	}
	
	
	
	/**
	 * Read arithmetic multiply and divide
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionFactor (){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionElement();
		
		while (this.findNextToken('*') or this.findNextToken('/')){
			if (this.findNextToken('*')){
				this.matchNextToken('*');
				op_code = new OpMult(op_code, this.readExpressionElement());
			}
			else if (this.findNextToken('/')){
				this.matchNextToken('/');
				op_code = new OpDiv(op_code, this.readExpressionElement());
			}
			else{
				this.nextTokenExpected('"*" or "/"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read arithmetic expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionArithmetic(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionFactor();
		
		while (this.findNextToken('+') or this.findNextToken('-')){
			if (this.findNextToken('+')){
				this.matchNextToken('+');
				op_code = new OpAdd(op_code, this.readExpressionFactor());
			}
			else if (this.findNextToken('-')){
				this.matchNextToken('-');
				op_code = new OpSub(op_code, this.readExpressionFactor());
			}
			else{
				this.nextTokenExpected('"+" or "-"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpression(){
		return this.readExpressionArithmetic();
	}
	
	
	
	/**
	 * Parser function
	 */
	void runParser(){
		this._result = this.readExpression();
		this.matchNextToken(';');
	}
	
	
	
}