/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.LangBay;

use Runtime.CoreStruct;
use Bayrell.Lang.Caret;
use Bayrell.Lang.CoreParser;
use Bayrell.Lang.CoreToken;
use Bayrell.Lang.LangBay.ParserBayBase;
use Bayrell.Lang.LangBay.ParserBayExpression;
use Bayrell.Lang.LangBay.ParserBayHtml;
use Bayrell.Lang.LangBay.ParserBayOperator;
use Bayrell.Lang.LangBay.ParserBayPreprocessor;
use Bayrell.Lang.LangBay.ParserBayProgram;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.OpCodes.OpDeclareClass;
use Bayrell.Lang.OpCodes.OpNamespace;
use Bayrell.Lang.OpCodes.OpFlags;


class ParserBay extends CoreParser
{
	/* Work */
	Dict<bool> vars = null;
	Dict<string> uses = null;
	OpNamespace current_namespace = null;
	OpDeclareClass current_class = null;
	string current_namespace_name = "";
	string current_class_name = "";
	string current_class_kind = "";
	bool find_identifier = true;
	bool skip_comments = true;
	
	/* Parsers */
	ParserBayBase parser_base = null;
	ParserBayExpression parser_expression = null;
	ParserBayHtml parser_html = null;
	ParserBayOperator parser_operator = null;
	ParserBayPreprocessor parser_preprocessor = null;
	ParserBayProgram parser_program = null;
	
	
	/**
	 * Reset parser
	 */
	lambda ParserBay reset(ParserBay parser) =>
		parser.copy({
			"vars": new Dict<string>(),
			"uses": new Dict<string>(),
			"caret": new Caret{},
			"token": null,
			"parser_base": new ParserBayBase(),
			"parser_expression": new ParserBayExpression(),
			"parser_html": new ParserBayHtml(),
			"parser_operator": new ParserBayOperator(),
			"parser_preprocessor": new ParserBayPreprocessor(),
			"parser_program": new ParserBayProgram(),
		})
	;
	
	
	
	/**
	 * Parse file and convert to BaseOpCode
	 */
	lambda list<ParserBay, BaseOpCode> parse(ParserBay parser, string content)
	{
		parser = static::reset(parser);
		parser = static::setContent(parser, content);
		return parser.parser_program::readProgram(parser);
	}
	
}