/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangBay;

use Runtime.BaseStruct;
use Runtime.Reference;
use BayLang.Caret;
use BayLang.CoreParser;
use BayLang.TokenReader;
use BayLang.LangBay.ParserBayBase;
use BayLang.LangBay.ParserBayClass;
use BayLang.LangBay.ParserBayExpression;
use BayLang.LangBay.ParserBayFunction;
use BayLang.LangBay.ParserBayHtml;
use BayLang.LangBay.ParserBayOperator;
use BayLang.LangBay.ParserBayPreprocessor;
use BayLang.LangBay.ParserBayProgram;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpEntityName;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpTypeIdentifier;


class ParserBay extends CoreParser
{	
	/* Parsers */
	ParserBayBase parser_base = new ParserBayBase(this);
	ParserBayClass parser_class = new ParserBayClass(this);
	ParserBayExpression parser_expression = new ParserBayExpression(this);
	ParserBayExpression parser_function = new ParserBayFunction(this);
	ParserBayHtml parser_html = new ParserBayHtml(this);
	ParserBayOperator parser_operator = new ParserBayOperator(this);
	ParserBayPreprocessor parser_preprocessor = new ParserBayPreprocessor(this);
	ParserBayProgram parser_program = new ParserBayProgram(this);
	
	
	/**
	 * Returns true if registered variable
	 */
	bool isRegisteredVariable(string name)
	{
		Collection variables = [
			"print", "var_dump", "rs", "rtl", "parent", "this", "@", "null", "true", "false",
		];
		if (variables.indexOf(name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Returns true if system type
	 */
	bool isSystemType(string name)
	{
		Collection variables = [
			"var", "void", "bool", "byte", "int", "char", "real", "double",
			"string", "list", "scalar", "primitive", "html", "fn",
			"Error", "Object", "DateTime", "Collection", "Dict",
			"Vector", "Map", "ArrayInterface",
		];
		
		if (variables.indexOf(name) == -1) return false;
		return true;
	}
	
	
	/**
	 * Find identifier
	 */
	void findIdentifier(OpIdentifier op_code)
	{
		string name = op_code.value;
		if (this.vars.has(name) or this.isRegisteredVariable(name))
		{
			op_code.kind = OpIdentifier::KIND_VARIABLE;
		}
		if (this.uses.has(name) or this.isSystemType(name))
		{
			op_code.kind = OpIdentifier::KIND_TYPE;
		}
	}
	
	
	/**
	 * Find variable
	 */
	void findVariable(OpIdentifier op_code)
	{
		string name = op_code.value;
		this.findIdentifier(op_code);
		if (op_code.kind == OpIdentifier::KIND_VARIABLE) return;
		throw op_code.caret_end.error("Unknown variable '" ~ name ~ "'");
	}
	
	
	/**
	 * Find type
	 */
	void findType(OpIdentifier op_code)
	{
		string name = op_code.value;
		if (op_code.kind == OpIdentifier::KIND_TYPE) return;
		throw op_code.caret_end.error("Unknown type '" ~ name ~ "'");
	}
	
	
	/**
	 * Find entity
	 */
	void findEntity(OpEntityName op_code)
	{
		/* Find name */
		if (op_code.items.count() != 1) return;
		
		OpIdentifier op_code_item = op_code.items.get(0);
		if (this.uses.has(op_code_item.value)) return;
		if (this.isSystemType(op_code_item.value)) return;
		throw op_code.caret_end.error("Unknown identifier '" ~ op_code_item.value ~ "'");
	}
	
	
	/**
	 * Add use
	 */
	void addGenericUse(Collection<OpTypeIdentifier> items)
	{
		if (items and items.count() > 0)
		{
			for (int i=0; i<items.count(); i++)
			{
				OpTypeIdentifier item = items.get(i);
				this.uses.set(item.entity_name.getName(), item);
				this.addGenericUse(item.generics);
			}
		}
	}
	
	
	/**
	 * Parse file and convert to BaseOpCode
	 */
	BaseOpCode parse()
	{
		TokenReader reader = this.createReader();
		if (reader.nextToken() == "<")
		{
			return this.parser_html.parse(reader);
		}
		return this.parser_program.parse(reader);
	}
}