/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangBay;

use Runtime.rs;
use Runtime.RuntimeUtils;
use BayrellLang.CommonParser;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpAnd;
use BayrellLang.OpCodes.OpAnnotation;
use BayrellLang.OpCodes.OpAssign;
use BayrellLang.OpCodes.OpAssignDeclare;
use BayrellLang.OpCodes.OpBitAnd;
use BayrellLang.OpCodes.OpBitNot;
use BayrellLang.OpCodes.OpBitOr;
use BayrellLang.OpCodes.OpBitXor;
use BayrellLang.OpCodes.OpBreak;
use BayrellLang.OpCodes.OpCall;
use BayrellLang.OpCodes.OpCallAwait;
use BayrellLang.OpCodes.OpChilds;
use BayrellLang.OpCodes.OpClassDeclare;
use BayrellLang.OpCodes.OpClassName;
use BayrellLang.OpCodes.OpClone;
use BayrellLang.OpCodes.OpComponent;
use BayrellLang.OpCodes.OpComment;
use BayrellLang.OpCodes.OpCompare;
use BayrellLang.OpCodes.OpConcat;
use BayrellLang.OpCodes.OpContinue;
use BayrellLang.OpCodes.OpCopyStruct;
use BayrellLang.OpCodes.OpDelete;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpFor;
use BayrellLang.OpCodes.OpFunctionArrowDeclare;
use BayrellLang.OpCodes.OpFunctionDeclare;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpHtmlAttribute;
use BayrellLang.OpCodes.OpHtmlComment;
use BayrellLang.OpCodes.OpHtmlEscape;
use BayrellLang.OpCodes.OpHtmlJson;
use BayrellLang.OpCodes.OpHtmlRaw;
use BayrellLang.OpCodes.OpHtmlTag;
use BayrellLang.OpCodes.OpHtmlText;
use BayrellLang.OpCodes.OpHtmlView;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpIf;
use BayrellLang.OpCodes.OpIfElse;
use BayrellLang.OpCodes.OpInterfaceDeclare;
use BayrellLang.OpCodes.OpMap;
use BayrellLang.OpCodes.OpMethod;
use BayrellLang.OpCodes.OpMod;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpNamespace;
use BayrellLang.OpCodes.OpNew;
use BayrellLang.OpCodes.OpNope;
use BayrellLang.OpCodes.OpNot;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpOr;
use BayrellLang.OpCodes.OpPipe;
use BayrellLang.OpCodes.OpPostDec;
use BayrellLang.OpCodes.OpPostInc;
use BayrellLang.OpCodes.OpPow;
use BayrellLang.OpCodes.OpPreDec;
use BayrellLang.OpCodes.OpPreInc;
use BayrellLang.OpCodes.OpPreprocessorCase;
use BayrellLang.OpCodes.OpPreprocessorSwitch;
use BayrellLang.OpCodes.OpReturn;
use BayrellLang.OpCodes.OpShiftLeft;
use BayrellLang.OpCodes.OpShiftRight;
use BayrellLang.OpCodes.OpStatic;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpStringItem;
use BayrellLang.OpCodes.OpStructDeclare;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpTemplateIdentifier;
use BayrellLang.OpCodes.OpTernary;
use BayrellLang.OpCodes.OpThrow;
use BayrellLang.OpCodes.OpTryCatch;
use BayrellLang.OpCodes.OpTryCatchChilds;
use BayrellLang.OpCodes.OpUse;
use BayrellLang.OpCodes.OpVector;
use BayrellLang.OpCodes.OpWhile;
use BayrellLang.LangBay.HtmlToken;
use BayrellLang.LangBay.ParserBayToken;
use BayrellLang.LangBay.ParserBayNameToken;
use BayrellLang.Exceptions.HexNumberExpected;
use BayrellLang.Exceptions.TwiceDeclareElseError;
use BayrellParser.Exceptions.ParserError;



class ParserBay extends CommonParser
{
	
	string current_namespace = "";
	string current_class_name = "";
	bool is_interface = false;
	Map<string, string> modules = null;
	Vector<OpAnnotation> annotations = null;
	
	
	/**
	 * Tokens Fabric
	 * @return BayrellParserToken
	 */
	BayrellParserToken createToken()
	{
		return new ParserBayToken(this.context(), this);
	}
	
	
	
	/**
	 * Get module name
	 */
	string getModuleName(string name)
	{
		if ( this.modules.has(name) )
		{
			return this.modules.item(name);
		}
		return name;
	}
	
	
	
	/**
	 * Read double value and
	 * @return BaseOpCode
	 */
	BaseOpCode readFixed()
	{
		
		string res = "";
		
		
		/* Try to read HEX Number */
		this.pushToken();
		try
		{
			res = this.matchHexNumber();
		}
		catch (var ex)
		{
			if (ex instanceof HexNumberExpected)
			{
				throw ex;
			}
			else if (ex instanceof ParserError)
			{
				res = null;
			}
			else
			{
				throw ex;
			}
		}
		if (res != null)
		{
			this.popToken();
			return new OpHexNumber(res);
		}
		else
		{
			this.popRollbackToken();
		}
		
		
		/* Try to read number */
		this.pushToken();
		try
		{
			res = this.matchDouble();
		}
		catch (var ex)
		{
			if (ex instanceof ParserError)
			{
				res = null;
			}
			else
			{
				throw ex;
			}
		}
		if (res != null)
		{
			this.popToken();
			return new OpNumber(res);
		}
		else
		{
			this.popRollbackToken();
		}
		
		
		/* Try to read string */
		if (this.lookNextTokenType() == ParserBayToken::TOKEN_STRING)
		{
			return new OpString(this.readAnyNextToken().token);
		}
		
		
		return null;
	}
	
	
	
	/**
	 * Read name
	 */
	string readIdentifierName()
	{
		string res = this.lookNextToken();
		string s = rs::charAt(res, 0);
		if (not this.isLetterChar(s) and s != "_")
		{
			throw this.parserError(this.translate("ERROR_PARSER_FIRST_CHAR_MUST_BE_LETTER"));
		}
		this.readNextToken();
		return res;
	}
	
	
	
	/**
	 * Read name
	 */
	string readDynamicName()
	{
		/* Create new token */
		ParserToken next_token = new ParserBayNameToken(this.context(), this);
		this.pushToken(next_token);
		
		/* Get name */
		string name = next_token.token;
		
		/* Assign next token */
		this.popRollbackToken();
		this.assignCurrentToken(next_token);
		
		delete next_token;
		
		return name;
	}
	
	
	
	/**
	 * Read Identifier
	 * @return OpIdentifier
	 */
	OpIdentifier readIdentifier()
	{
		string res = this.readIdentifierName();
		return new OpIdentifier(res);
	}
	
	
	
	/**
	 * Read call args
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readCallArgs()
	{
		
		Vector<BaseOpCode> v = new Vector();
		BaseOpCode op_code = this.readExpression();
		v.push(op_code);
		
		while (this.findNextToken(","))
		{
			this.matchNextToken(",");
			op_code = this.readExpression();
			v.push(op_code);
		}
		
		return v;
	}
	
	
	
	/**
	 * Read call body
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readCallBody()
	{
	
		Vector<BaseOpCode> v = null;
		this.matchNextToken("(");
		if (not this.findNextToken(")"))
		{
			v = this.readCallArgs();
		}
		this.matchNextToken(")");
		
		return v;
	}
	
	
	
	/**
	 * Read new or await function
	 */
	BaseOpCode readGroupExpression()
	{
		if (this.findNextToken('('))
		{
			this.matchNextToken('(');
			BaseOpCode op_code = this.readExpression();
			this.matchNextToken(')');
			return op_code;
		}
		return this.readIdentifier();
	}
	
	
	
	/**
	 * Read new instance
	 * @return BaseOpCode
	 */
	BaseOpCode readNewInstance()
	{
		this.matchNextToken("new");
		BaseOpCode ident = this.readTemplateIdentifier();
		
		if (this.findNextToken("("))
		{
			Vector<BaseOpCode> v = this.readCallBody();
			return new OpNew(ident, v);
		}
		else if (this.findNextToken("{"))
		{
			BaseOpCode v = this.readMap();
			return new OpNew(ident, [v]);
		}
		
		return new OpNew(ident);
	}
	
	
	
	/**
	 * Read call await
	 * @return BaseOpCode
	 */
	BaseOpCode readCallAwait()
	{
		this.matchNextToken("await");
		BaseOpCode obj = this.readCallDynamic(true, true, true, false);
		Vector<BaseOpCode> v = this.readCallBody();
		obj = new OpCall(obj, v);
		obj.is_await = true;
		return obj;
	}
	
	
	
	/**
	 * Read clone
	 * @return BaseOpCode
	 */
	BaseOpCode readClone()
	{
		this.matchNextToken("clone");
		BaseOpCode value = this.readExpression();
		return new OpClone(value);
	}
	
	
	
	/**
	 * Read method
	 * @return BaseOpCode
	 */
	BaseOpCode readMethod()
	{
		this.matchNextToken("method");
		
		if (this.findNextToken('('))
		{
			this.matchNextToken("(");
			BaseOpCode class_name = this.readExpression();
			this.matchNextToken(",");
			BaseOpCode method_name = this.readExpression();
			this.matchNextToken(")");
			
			return new OpCall( 
				new OpStatic( new OpIdentifier("rtl"), "method" ), 
				[
					class_name,
					method_name
				]
			);
		}
		
		BaseOpCode value = this.readCallDynamic(true, false, true, false);
		return new OpMethod(value);
	}
	
	
	
	/**
	 * Read pipe
	 * @return BaseOpCode
	 */
	BaseOpCode readPipe()
	{
		BaseOpCode item = null;
		Vector<BaseOpCode> items = new Vector();
		bool is_return_value = false;
		BaseOpCode value = null;
		
		this.matchNextToken("pipe");
		this.matchNextToken("(");
		if ( !this.findNextToken(")") )
		{
			value = this.readExpression();
		}
		this.matchNextToken(")");
		
		while (this.findNextToken(">>"))
		{
			this.matchNextToken(">>");
			if (this.findNextToken("method"))
			{
				item = this.readMethod();
			}
			else if (this.findNextToken("value"))
			{
				break;
			}
			else
			{
				item = this.readCallDynamic(true, true, true, true);
			}
			items.push(item);
		}
		
		if (this.findNextToken("value"))
		{
			this.matchNextToken("value");
			is_return_value = true;
		}
		
		return new OpPipe({ "value": value, "items": items, "is_return_value": is_return_value });
	}
	
	
	
	/**
	 * Read get class name
	 */
	BaseOpCode readClassName()
	{
		if (this.findNextToken('class'))
		{			
			this.matchNextToken("class");
			this.matchNextToken("of");
			BaseOpCode value = this.readIdentifierName();
			return new OpClassName(value);
		}
		if (this.findNextToken('classof'))
		{
			this.matchNextToken("classof");
			BaseOpCode value = this.readIdentifierName();
			return new OpClassName(value);		
		}
		return null;
	
	}
	
	
	
	/**
	 * Read call dynamic
	 * @return BaseOpCode
	 */
	BaseOpCode readCallDynamic(
		bool allow_dynamic = true, bool allow_bracket = true, 
		bool allow_static = true, bool allow_call = true
	){
		
		string name = "";
		bool can_static = true;
		BaseOpCode obj = this.readGroupExpression();
		BaseOpCode ident = null;
		while ((this.findNextToken(".") and allow_dynamic) or 
		       (this.findNextToken("[") and allow_bracket) or 
		       (this.findNextToken("::") and allow_static) or 
			   (this.findNextToken("(") and allow_call)) 
		{
		
			if (this.findNextToken(".") and allow_dynamic)
			{
				this.matchNextToken(".");
				name = this.readIdentifierName();
				obj = new OpDynamic(obj, name);
			}
			
			else if (this.findNextToken("[") and allow_bracket)
			{
				this.matchNextToken("[");
				ident = this.readExpression();
				this.matchNextToken("]");
				obj = new OpStringItem(obj, ident);
			}
			
			else if (this.findNextToken("::") and allow_static)
			{
				if (not can_static)
				{
					throw this.parserError(this.translate("ERROR_PARSER_STATIC_METHOD_IS_NOT_ALOWED_HERE"));
				}
				this.matchNextToken("::");
				name = this.readIdentifierName();
				obj = new OpStatic(obj, name);
				can_static = false;
			}
			
			else if (this.findNextToken("(") and allow_call)
			{
				Vector<BaseOpCode> v = this.readCallBody();
				obj = new OpCall(obj, v);
				can_static = false;
			}
			
		}
		
		return obj;
	}
	
	
	
	/**
	 * Read type identifier
	 * @return BaseOpCode
	 */
	BaseOpCode readTemplateIdentifier()
	{
		BaseOpCode op_code1 = this.readCallDynamic(true, false, false, false);
		if (not this.findNextToken("<"))
		{
			return op_code1;
		}
		
		Vector<BaseOpCode> v = new Vector();
		
		this.matchNextToken("<");
		while (true)
		{
			BaseOpCode op_code2 = this.readCallDynamic(true, false, false, false);
			v.push(op_code2);
			if (this.findNextToken(","))
			{
				this.matchNextToken(",");
				continue;
			}
			break;
		}
		this.matchNextToken(">");
		
		return new OpTemplateIdentifier(op_code1, v);
	}
	
	
	
	/**
	 * Read element
	 * @return BaseOpCode
	 */
	BaseOpCode readVector()
	{
		OpVector res = new OpVector();
		this.matchNextToken("[");
		while (not this.findNextToken("]"))
		{
			res.values.push( this.readExpression() );
			if (this.findNextToken(","))
				this.matchNextToken(",");
		}
		this.matchNextToken("]");
		return res;
	}
	
	
	
	/**
	 * Read element
	 * @return BaseOpCode
	 */
	BaseOpCode readMap()
	{
		OpMap res = new OpMap();
		this.matchNextToken("{");
		while (not this.findNextToken("}"))
		{
			if (this.lookNextTokenType() != ParserBayToken::TOKEN_STRING)
			{
				throw this.parserExpected("string");
			}
			
			string key = this.readAnyNextToken().token;
			this.matchNextToken(":");
			
			string value = this.readExpression();
			res.values.set(key, value);
			
			if (this.findNextToken(","))
				this.matchNextToken(",");
		}
		this.matchNextToken("}");
		return res;
	}
	
	
	
	
	/* ============== HTML Template Parser ============== */
	
	
	
	/**
	 * Read Html Comment
	 */
	BaseOpCode readHtmlComment(){
		this.matchNextToken("<!--");
		string res_str = this.current_token.readUntilString("-->", false);
		this.assignCurrentToken(this.current_token);
		this.matchNextToken("-->");
		return new OpHtmlText("<!--" ~ res_str ~ "-->");
	}
	
	
	
	/**
	 * Read Html Doctype
	 */
	BaseOpCode readHtmlDOCTYPE(){
		string s = this.current_token.readUntilString(">", false);
		this.assignCurrentToken(this.current_token);
		OpHtmlText res = new OpHtmlText("<!" ~ rs::trim(s) ~ ">");
		this.matchNextToken(">");
		return res;
	}
	
	
	
	/**
	 * Add attribute
	 */
	void addAttribute(Vector<OpHtmlAttribute> attributes, OpHtmlAttribute attr){
		int pos = -1;
		for (int i=0; i<attributes.count(); i++){
			if (attributes.item(i).key == attr.key){
				pos = i;
				break;
			}
		}
		
		if (pos == -1){
			attributes.push(attr);
		}
		else{
			attributes[i].value = new OpConcat(attributes[i].value, new OpString(" "));
			attributes[i].value = new OpConcat(attributes[i].value, attr.value);
		}
	}
	
	
	
	/**
	 * Read Html Attributes
	 */
	Vector<OpHtmlAttribute> readHtmlAttributes(OpHtmlTag op_code){
		if (this.findNextToken(">")){
			return null;
		}
		
		Vector<string> spreads = new Vector();
		Vector<OpHtmlAttribute> attributes = new Vector();
		while (not this.findNextToken(">") and not this.findNextToken("/>")){
			
			if (this.findNextToken("...")){
				this.matchNextToken("...");
				string spread_name = this.readIdentifierName();
				spreads.push(spread_name);
				continue;
			}
			
			bool spec_attr = false;
			OpHtmlAttribute attr = new OpHtmlAttribute();
			
			if (this.findNextToken("@")){
				spec_attr = true;
				this.matchNextToken("@");
				attr.key = "@" ~ this.readNextToken().token;
			}
			else{
				attr.key = this.readNextToken().token;
			}
			
			
			if (attr.key == "@lambda")
			{
				attr.value = this.readDeclareFunctionHeader( new OpFunctionDeclare() );
			}
			
			else if (this.findNextToken("="))
			{
				this.matchNextToken("=");
				
				/* Read attribute value */
				if (this.findNextToken("'") or this.findNextToken('"'))
				{
					this.pushToken( new ParserBayToken(this.context(), this) );
					attr.value = new OpString(this.readAnyNextToken().token);
					this.popRestoreToken();
				}
				else if (this.findNextToken("@{") or this.findNextToken("{"))
				{
					if (this.findNextToken("@{")) this.matchNextToken("@{");
					else if (this.findNextToken("{")) this.matchNextToken("{");
					
					/* Push new token */
					this.pushToken( new ParserBayToken(this.context(), this) );					
					attr.value = this.readExpression();
					
					/* Restore tokens */
					this.popRestoreToken();
					this.matchNextToken("}");
				}
				else 
				{
					throw this.parserError("Unknown token " ~ this.next_token.token);
				}
				
			}
			else{
				attr.bracket = '"';
				attr.value = new OpString(attr.key);
			}
			
			
			/* spec attr for css */
			/*
			if (spec_attr and attr.key == 'class'){
				attr.value = new OpCall(	
					new OpDynamic(
						new OpIdentifier("this"),
						"css"
					),
					[
						attr.value
					]
				);
			}
			*/
			
			this.addAttribute(attributes, attr);
		}
		
		op_code.spreads = spreads;
		op_code.attributes = attributes;
	}
	
	
	
	/**
	 * Read Html Expression
	 */
	Vector<BaseOpCode> readHtmlBlock(
		string match_str, 
		bool is_plain = false
	){
		
		int len_match = rs::strlen(match_str);
		if (len_match == 0)
			return null;
		
		string look_str = this.current_token.lookString(len_match);
		Vector<BaseOpCode> childs = new Vector();
		Vector<string> special_tokens = HtmlToken::getSpecialTokens();
		special_tokens.removeValue("{");
		special_tokens.removeValue("@{");
		special_tokens.removeValue("@raw{");
		special_tokens.removeValue("@json{");
		/*special_tokens.removeValue("@code{");*/
		special_tokens.removeValue("<!--");
		int bracket_level = 0;
		string s = "";
		bool is_next_html_token = false;
		bool is_next_special_token = false;
		bool is_prev_special_token = false;
		
		/* Main loop */
		while (look_str != "" and not this.current_token.isEOF() and
			(look_str != match_str or look_str == "}" and bracket_level > 0) 
		){
			
			is_next_html_token = this.current_token.findString("<");
			is_next_special_token = this.current_token.findVector(special_tokens) != -1;
			
			BaseOpCode res = null;
			if (not is_plain){
				if (is_next_special_token or is_next_html_token){
					if (is_next_special_token or is_prev_special_token) s = rs::trim(s, "\\t\\r\\n");
					else s = rs::trim(s, "\\t\\r\\n");
					if (s != "") childs.push(new OpHtmlText(s));
					s = "";
					this.assignCurrentToken(this.current_token);
					res = this.readHtmlTag();
					is_prev_special_token = false;
				}
			}
			
			if (res == null){
				if (this.current_token.findString("{") or 
					this.current_token.findString("@{") or 
					this.current_token.findString("@raw{") or 
					/*this.current_token.findString("@code{") or */
					this.current_token.findString("@json{"))
				{
					if (not is_plain){
						s = rs::trim(s, "\\t\\r\\n");
					}
					if (s != "") childs.push(new OpHtmlText(s));
					s = "";
					
					bool is_raw = false;
					bool is_json = false;
					bool is_code = false;
					
					if (this.current_token.findString("@raw{")){
						is_raw = true;
						this.current_token.match("@raw{");
					}
					else if (this.current_token.findString("@json{")){
						is_json = true;
						this.current_token.match("@json{");
					}
					else if (this.current_token.findString("@code{")){
						is_code = true;
						this.current_token.match("@code{");
					}
					else if (this.current_token.findString("@{")){
						this.current_token.match("@{");
					}
					else if (this.current_token.findString("{")){
						this.current_token.match("{");
					}
					
					/* Push new token */
					this.assignCurrentToken(this.current_token);
					this.pushToken( new ParserBayToken(this.context(), this) );
					
					/* Read result */
					res = this.readExpression();
					if (is_raw) res = new OpHtmlRaw(res);
					else if (is_json) res = new OpHtmlJson(res);
					else if (is_code) res = new OpHtmlRaw(res);
					else res = new OpHtmlEscape(res);
					
					/* Restore tokens */
					this.popRestoreToken();
					this.matchNextToken("}");
					
					is_prev_special_token = true;
				}
			}
			
			/* Push result or read char */
			if (res != null){
				childs.push(res);
			}
			else{
				string look = this.current_token.readChar();
				s = s ~ look;
				
				if (look == '{') bracket_level++;
				else if (look == '}') bracket_level--;
			}
			
			look_str = this.current_token.lookString(len_match);
		}
		delete special_tokens;
		
		if (not is_plain)
		{
			if (is_prev_special_token) s = rs::trim(s, "\\t\\r\\n");
			else s = rs::trim(s, "\\t\\r\\n");
		}
		if (s != ""){
			childs.push(new OpHtmlText(s));
		}
		
		this.assignCurrentToken(this.current_token);
		return childs;
	}
	
	
	
	/**
	 * Read Html tag
	 * @return BaseOpCode
	 */
	BaseOpCode readHtmlTag()
	{
		
		if (this.lookNextTokenType() == ParserBayToken::TOKEN_COMMENT)
		{
			return new OpComment(this.readAnyNextToken().token);
		}
		else if (this.findNextToken('<!--'))
		{
			return this.readHtmlComment();
		}
		else if (this.findNextToken("<!"))
		{
			this.matchNextToken("<!");
			
			if (this.findNextString("DOCTYPE"))
			{
				return this.readHtmlDOCTYPE();
			}
			
		}
		else if (this.findNextToken("<"))
		{
			this.matchNextToken("<");
			
			/* Read HtmlView */
			if (this.findNextToken(">"))
			{
				this.matchNextToken(">");
				BaseOpCode res = new OpHtmlView(this.readHtmlBlock("</>"));
				if (res.childs != null and res.childs.count() == 1)
				{
					res = res.childs.item(0);
				}
				this.matchNextToken("</");
				this.matchNextToken(">");
				return res;
			}
			
			OpHtmlTag res = new OpHtmlTag();
			res.tag_name = this.readNextToken().token;
			this.readHtmlAttributes(res);
			
			OpFunctionDeclare childs_function = null;
			
			if (this.findNextToken("/>"))
			{
				this.matchNextToken("/>");
			}
			else
			{
				this.matchNextToken(">");
				string close_tag = "</"~res.tag_name~">";
				
				if (res.tag_name == 'script' or res.tag_name == 'pre' or res.tag_name == 'textarea')
				{
					res.is_plain = true;
					res.childs = this.readHtmlBlock("</" ~ res.tag_name ~ ">", true);
				}
				else if (this.findNextToken('lambda'))
				{
					/* Push new token */
					this.assignCurrentToken(this.current_token);
					this.pushToken( new ParserBayToken(this.context(), this) );
					childs_function = this.readDeclareFunction(false);
					/* Restore tokens */
					this.popRestoreToken();
					/*this.assignNextToken(this.current_token);*/
					/*this.readNextToken();*/
					/*this.matchNextToken(";");*/
				}
				else {
					res.childs = this.readHtmlBlock("</");
				}
				
				this.matchNextToken("</");
				this.matchNextToken(res.tag_name);
				this.matchNextToken(">");
			}
			
			
			if (childs_function != null)
			{
				res.setAttribute("@lambda", childs_function);
				if (res.childs) res.childs.clear();
			}
			else
			{
				OpHtmlAttribute op_code = res.findAttribute("@lambda");
				if (op_code != null and op_code.value instanceof OpFunctionDeclare)
				{
					op_code.value.is_lambda = true;
					if (res.childs != null)
					{
						op_code.value.childs = res.childs.copy();
						res.childs.clear();
					}
				}
				
				/*
				OpHtmlAttribute lambda_header = res.findAttribute("@lambda");
				if (lambda_header != null)
				{
					if (res.childs != null)
					{
						OpFunctionDeclare op_code = new OpFunctionDeclare();
						op_code.is_lambda = true;
						op_code.args = lambda_header.value;
						op_code.childs = res.childs.copy();
						res.setAttribute("@lambda", op_code);
					}
					res.childs.clear();
				}
				*/
			}
			return res;
		}
		
		return null;
	}
	
	
	
	/**
	 * Read Html
	 * @return BaseOpCode
	 */
	BaseOpCode readHtml(){
		
		/* Skip comments */
		bool old_skip_comments = this.skip_comments;
		this.skip_comments = false;
		
		/* Push new token */
		this.pushToken( new HtmlToken(this.context(), this) );
		
		/* Read Html tag */
		this.current_token.skipSystemChar();
		
		/* Read Html View */
		BaseOpCode res = new OpHtmlView();
		res.childs = new Vector<BaseOpCode>();
		while (this.findNextToken("<") or this.findNextToken("<!")){
			res.childs.push(this.readHtmlTag());
		}
		
		if (res.childs == null){
			this.popRestoreToken();
			return null;
		}
		if (res.childs.count() == 0){
			this.popRestoreToken();
			return null;
		}
		
		/* Restore tokens */
		this.popRestoreToken();
		this.skip_comments = old_skip_comments;
		
		return res;
	}
	
	
	
	/**
	 * Read CSS Selector
	 */
	string readCssSelector(string look){
		string s = "";
		s = this.current_token.readUntilVector([",", "%", "{"]);
		
		if (s == ""){
			return "";
		}
		
		/* Check if CSS has hash */
		if (look != "%"){
			return s;
		}
		
		int pos = 0;
		int sz = rs::strlen(s);
		string class_name = this.current_namespace ~ "." ~ this.current_class_name;
		
		/* Read class name */
		if (s[0] == "("){
			while (pos < sz and s[pos] != ")") { pos++; }
			class_name = rs::substr(s, 1, pos - 1);
			class_name = this.getModuleName(class_name);
			s = rs::substr(s, pos + 1);
		}
		
		pos = 0;
		sz = rs::strlen(s);
		while (pos < sz and s[pos] != " " and s[pos] != "." and s[pos] != ":" and s[pos] != "[") { pos++; }
		
		/* Get component name and postfix */
		string name = "";
		string postfix = "";
		if (pos == sz){
			name = s;
		}
		else{
			name = rs::substr(s, 0, pos);
			postfix = rs::substr(s, pos, sz - pos);
		}
		
		/* Calc hash */
		string hash = "-" ~ RuntimeUtils::getCssHash(class_name);
		return name ~ hash ~ postfix;
	}
	
	
	
	/**
	 * Add OpCode
	 * @return BaseOpCode
	 */
	BaseOpCode readCssAddOpCode(BaseOpCode current_op_code, string s, BaseOpCode new_op_code){
		
		if (s != ""){
			if (current_op_code == null){
				current_op_code = new OpString(s);
			}
			else{
				current_op_code = new OpConcat(current_op_code, new OpString(s));
			}
		}
		
		if (new_op_code != null){
			current_op_code = new OpConcat(current_op_code, new_op_code);
		}
		
		return current_op_code;
	}
	
	
	
	/**
	 * Read CSS
	 * @return BaseOpCode
	 */
	BaseOpCode readCss(){
		this.matchNextToken('{');
		
		BaseOpCode op_code = null;
		string s = "";
		string look_str = this.current_token.lookString(1);
		string match_str = "}";
		int bracket_level = 0;
		bool flag_is_media = false;
		bool flag_is_css_body = false;
		
		/* Main loop */
		while (look_str != "" and not this.current_token.isEOF() and
			(look_str != match_str or look_str == "}" and bracket_level > 0) 
		){
			
			string look = this.current_token.readChar();
			if (look == "$"){
				
				/* Push new token */
				this.assignCurrentToken(this.current_token);
				this.pushToken( new ParserBayToken(this.context(), this) );
				
				if (this.findNextToken("{"))
				{
					this.matchNextToken("{");
					op_code = this.readCssAddOpCode(op_code, s, this.readExpressionElement());
					s = "";
					this.matchNextToken("}");
				}
				else
				{
					/* Read result */
					string name = this.readIdentifierName();
					
					/* Add op code */
					op_code = this.readCssAddOpCode(op_code, s, new OpIdentifier(name));
					s = "";
				}
				
				/* Restore tokens */
				this.popRestoreToken();
				
			}
			
			else if ( (look == "." or look == "%") and !flag_is_media and !flag_is_css_body){
				s = s ~ "." ~ this.readCssSelector(look);
			}
			
			else if (look != "\t" and look != "\n" and look != "\r"){
				s = s ~ look;
			}
			
			if (look == "@" and this.current_token.lookString(5) == 'media'){
				flag_is_media = true;
			}
			
			if (look == '{'){
				if (!flag_is_media) flag_is_css_body = true;
				flag_is_media = false;
				bracket_level++;
			}
			else if (look == '}'){
				flag_is_css_body = false;
				bracket_level--;
			}
			
			look_str = this.current_token.lookString(1);
			
		}
		
		this.assignCurrentToken(this.current_token);
		op_code = this.readCssAddOpCode(op_code, s, null);
		
		this.matchNextToken('}');
		return op_code;
	}
	
	
	
	/* ============== Read Expression ============== */
	
	
	/**
	 * Read element
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionElement()
	{
		if (this.findNextToken('@') and this.next_token.lookString(3) == 'css')
		{
			this.matchNextToken('@');
			this.matchNextToken('css');
			return this.readCss();
		}
		else if (this.findNextToken('new'))
		{
			return this.readNewInstance();
		}
		else if (this.findNextToken('clone'))
		{
			return this.readClone();
		}
		else if (this.findNextToken('class'))
		{
			return this.readClassName();
		}
		else if (this.findNextToken('classof'))
		{
			return this.readClassName();
		}
		else if (this.findNextToken('method'))
		{
			return this.readMethod();
		}
		else if (this.findNextToken('pipe'))
		{
			return this.readPipe();
		}
		else if (this.findNextToken('['))
		{
			return this.readVector();
		}
		else if (this.findNextToken('{'))
		{
			return this.readMap();
		}
		
		BaseOpCode op_code = this.readFixed();
		if (op_code != null)
			return op_code;
			
		return this.readCallDynamic(true, true, true, true);
	}
	
	
	
	/**
	 * Read postfix
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionPostfix()
	{
		BaseOpCode op_code = this.readExpressionElement();
		if (this.findNextToken('++'))
		{
			this.matchNextToken('++');
			return new OpPostInc(op_code);
		}
		else if (this.findNextToken('--'))
		{
			this.matchNextToken('--');
			return new OpPostDec(op_code);
		}
		return op_code;
	}
	
	
	
	/**
	 * Read prefix
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionPrefix()
	{
		if (this.findNextToken('++'))
		{
			this.matchNextToken('++');
			return new OpPreInc( this.readExpressionPostfix() );
		}
		else if (this.findNextToken('--'))
		{
			this.matchNextToken('--');
			return new OpPreDec( this.readExpressionPostfix() );
		}
		return this.readExpressionPostfix();
	}
	
	
	
	/**
	 * Read bit NOT
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitNot()
	{
		if (this.findNextToken('!'))
		{
			this.matchNextToken('!');
			return new OpBitNot( this.readExpressionPrefix() );
		}
		return this.readExpressionPrefix();
	}
	
	
	
	/**
	 * Read pow
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionPow()
	{
		BaseOpCode op_code = this.readExpressionBitNot();
		while (this.findNextToken('**'))
		{
			this.matchNextToken('**');
			op_code = new OpPow(op_code, this.readExpressionBitNot() );
		}
		return op_code;
	}
	
	
	
	/**
	 * Read arithmetic multiply and divide
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionFactor ()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionPow();
		
		while (this.findNextToken('*') or this.findNextToken('/') or this.findNextToken('%'))
		{
			if (this.findNextToken('*'))
			{
				this.matchNextToken('*');
				op_code = new OpMult(op_code, this.readExpressionPow());
			}
			else if (this.findNextToken('/'))
			{
				this.matchNextToken('/');
				op_code = new OpDiv(op_code, this.readExpressionPow());
			}
			else if (this.findNextToken('%'))
			{
				this.matchNextToken('%');
				op_code = new OpMod(op_code, this.readExpressionPow());
			}
			else
			{
				throw this.nextTokenExpected('"*", "/" or "%"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read arithmetic expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionArithmetic()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionFactor();
		
		while (this.findNextToken('+') or this.findNextToken('-'))
		{
			if (this.findNextToken('+'))
			{
				this.matchNextToken('+');
				op_code = new OpAdd(op_code, this.readExpressionFactor());
			}
			else if (this.findNextToken('-'))
			{
				this.matchNextToken('-');
				op_code = new OpSub(op_code, this.readExpressionFactor());
			}
			else
			{
				throw this.nextTokenExpected('"+" or "-"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read shift
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionShift()
	{
	
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionArithmetic();
		
		while (this.findNextToken('<<') or this.findNextToken('>>'))
		{
			if (this.findNextToken('<<'))
			{
				this.matchNextToken('<<');
				op_code = new OpShiftLeft(op_code, this.readExpressionArithmetic());
			}
			else if (this.findNextToken('>>'))
			{
				this.matchNextToken('>>');
				op_code = new OpShiftRight(op_code, this.readExpressionArithmetic());
			}
			else
			{
				throw this.nextTokenExpected('"<<" or ">>"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read concat string
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionConcat()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionShift();
		while (this.findNextToken('~'))
		{
			this.matchNextToken('~');
			op_code = new OpConcat(op_code, this.readExpressionShift() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read compare
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionCompare1()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionConcat();
		
		while (this.findNextToken('<') or this.findNextToken('<=') or
		       this.findNextToken('>') or this.findNextToken('>=') or
		       this.findNextToken('in') or this.findNextToken('instanceof') or
		       this.findNextToken('implements')
		){
			string cond = this.readNextToken().token;
			op_code = new OpCompare(cond, op_code, this.readExpressionConcat());
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read compare
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionCompare2()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionCompare1();
		
		while (this.findNextToken('==') or this.findNextToken('===') or
		       this.findNextToken('!=') or this.findNextToken('!==')
		)
		{
			string cond = this.readNextToken().token;
			op_code = new OpCompare(cond, op_code, this.readExpressionCompare1());
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read bit AND
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitAnd()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionCompare2();
		while (this.findNextToken('&'))
		{
			this.matchNextToken('&');
			op_code = new OpBitAnd(op_code, this.readExpressionCompare2() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read bit XOR
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitXor()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionBitAnd();
		while (this.findNextToken('^'))
		{
			this.matchNextToken('^');
			op_code = new OpBitXor(op_code, this.readExpressionBitAnd() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read bit OR
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitOr()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionBitXor();
		while (this.findNextToken('|'))
		{
			this.matchNextToken('|');
			op_code = new OpBitOr(op_code, this.readExpressionBitXor() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read NOT
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionNot()
	{
		
		if (this.findNextToken('not'))
		{
			this.matchNextToken('not');
			return new OpNot(this.readExpressionBitOr() );
		}
		
		return this.readExpressionBitOr();
	}
	
	
	
	/**
	 * Read AND
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionAnd()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionNot();
		while (this.findNextToken('and'))
		{
			this.matchNextToken('and');
			op_code = new OpAnd(op_code, this.readExpressionNot() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read OR
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionOr()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionAnd();
		while (this.findNextToken('or'))
		{
			this.matchNextToken('or');
			op_code = new OpOr(op_code, this.readExpressionAnd() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read ternary operator
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionTernary()
	{
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionOr();
		if (this.findNextToken('?'))
		{
			this.matchNextToken('?');
			BaseOpCode if_true = this.readExpressionOr();
			
			this.matchNextToken(':');
			BaseOpCode if_false = this.readExpressionOr();
			
			return new OpTernary(op_code, if_true, if_false);
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpression()
	{
		
		if (this.findNextToken('<')){
			return this.readHtml();
		}
		
		
		/* Read function declare */
		this.pushToken();
		if (this.findNextToken('lambda'))
		{
			this.matchNextToken('lambda');
		}
		
		BaseOpCode res = null;
		res = this.readDeclareFunction(false, false);
		if (res != null)
		{
			this.popToken();
			return res;
		}
		
		
		/* Try to read op code struct */
		try
		{
			res = this.readOpCopyStruct();
		}
		catch (ParserError ex)
		{
			res = null;
		}
		if (res != null)
		{
			this.popToken();
			return res;
		}
		
		
		/* Read expression */
		this.popRollbackToken();
		
		bool old_skip_comments = this.skip_comments;
		this.skip_comments = true;
		res = this.readExpressionTernary();
		this.skip_comments = old_skip_comments;
		return res;
	}
	
	
	
	/**
	 * Read copy struct
	 * @return BaseOpCode
	 */
	BaseOpCode readOpCopyStruct()
	{
		string name = this.readIdentifierName();
		this.matchNextToken('<=');
		
		BaseOpCode item = this.readExpression();
		
		return new OpCopyStruct({ "name": name, "item": item });
	}
	
	
	
	/* ============== Read Operators ============== */
	
	
	
	/**
	 * Read operator assign
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorAssign()
	{
		
		BaseOpCode op_type = null;
		BaseOpCode op_ident = null;
		string op_ident_name = "";
		BaseOpCode op_exp = null;
		bool success = false;
		
		Vector<string> v = (new Vector())
			.push("=")
			.push("~=")
			.push("+=")
			.push("-=")
			.push("<=")
		;
		
		/* Read assign */
		success = false;
		this.pushToken();
		try
		{
			op_ident = this.readCallDynamic(true, true, true, false);
			if (this.findNextTokenVector(v) != -1)
			{
				success = true;
			}
		}
		catch (var ex)
		{
			if (ex instanceof ParserError)
			{
				success = false;
			}
			else
			{
				delete v;
				throw ex;
			}
		}
		if (success)
		{
			
			int pos = this.findNextTokenVector(v);
			string op_name = v.item(pos);
			this.matchNextToken(op_name);
			
			if (op_name == "<=")
			{
				this.popRollbackToken();
				return this.readOpCopyStruct();
			}
			
			this.popToken();
			
			if (this.findNextToken('await'))
			{
				op_exp = this.readCallAwait();
			}
			else
			{
				op_exp = this.readExpression();
			}
			
			delete v;
			return new OpAssign(op_ident, op_exp, op_name);
		}
		this.popRollbackToken();
		delete v;
		
		
		/* Read declare */
		this.pushToken();
		try
		{
			op_type = this.readTemplateIdentifier();
			op_ident_name = this.readIdentifierName();
			success = true;
		}
		catch (var ex){
			if (ex instanceof ParserError)
			{
				success = false;
			}
			else
			{
				throw ex;
			}
		}
		if (success)
		{
			this.popToken();
			if (this.findNextToken("="))
			{
				this.matchNextToken("=");
				if (this.findNextToken('await'))
				{
					op_exp = this.readCallAwait();
				}
				else
				{
					op_exp = this.readExpression();
				}
			}
			return new OpAssignDeclare(op_type, op_ident_name, op_exp);
		}
		this.popRollbackToken();
		
		return null;
	}
	
	
	
	/**
	 * Read operator if
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorIf()
	{
		
		bool old_skip_comments = this.skip_comments;
		this.skip_comments = true;
		
		BaseOpCode condition = null;
		Vector<BaseOpCode> if_true = null;
		Vector<BaseOpCode> if_false = null;
		Vector<OpIfElse> if_else = new Vector();
		
		/* Read condition */
		this.matchNextToken("if");
		this.matchNextToken("(");
		condition = this.readExpression();
		this.matchNextToken(")");
		
		/* Read if true operators block */
		if (this.findNextToken("{"))
		{
			this.matchNextToken("{");
			if_true = this.readOperatorsBlock();
			this.matchNextToken("}");
		}
		else
		{
			if_true = new Vector<BaseOpCode>();
			if_true.push(this.readOperator());
		}
		
		/* Read else or elseif */
		while (this.findNextToken("elseif") or this.findNextToken("else"))
		{
			
			if (this.findNextToken("else"))
			{
				this.matchNextToken("else");
				
				/* Read elseif */
				if (this.findNextToken("if"))
				{
					OpIfElse op_if_else = new OpIfElse();
					
					/* Read condition */
					this.matchNextToken("if");
					this.matchNextToken("(");
					op_if_else.condition = this.readExpression();
					this.matchNextToken(")");
					
					/* Read operators block */
					if (this.findNextToken("{"))
					{
						this.matchNextToken("{");
						op_if_else.if_true = this.readOperatorsBlock();
						this.matchNextToken("}");
					}
					else
					{
						op_if_else.if_true = new Vector<BaseOpCode>();
						op_if_else.if_true.push(this.readOperator());
					}
					if_else.push(op_if_else);
				}
				
				/* Read false operators block */
				else
				{
					if (this.findNextToken("{"))
					{
						this.matchNextToken("{");
						if_false = this.readOperatorsBlock();
						this.matchNextToken("}");
					}
					else
					{
						if_false = new Vector<BaseOpCode>();
						if_false.push(this.readOperator());
					}
					break;
				}
			}
			
			/* Read elseif */
			else if (this.findNextToken("elseif"))
			{
				OpIfElse op_if_else = new OpIfElse();
				
				/* Read condition */
				this.matchNextToken("elseif");
				this.matchNextToken("(");
				op_if_else.condition = this.readExpression();
				this.matchNextToken(")");
				
				/* Read operators block */
				if (this.findNextToken("{"))
				{
					this.matchNextToken("{");
					op_if_else.if_true = this.readOperatorsBlock();
					this.matchNextToken("}");
					if_else.push(op_if_else);
				}
				else
				{
					op_if_else.if_true = new Vector<BaseOpCode>();
					op_if_else.if_true.push(this.readOperator());
				}
			}
		}
		
		this.skip_comments = old_skip_comments;
		return new OpIf(condition, if_true, if_false, if_else);
	}
	
	
	
	/**
	 * Read operator while
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorWhile()
	{
		
		BaseOpCode condition = null;
		Vector<BaseOpCode> childs = null;
		
		/* Read condition */
		this.matchNextToken("while");
		this.matchNextToken("(");
		condition = this.readExpression();
		this.matchNextToken(")");
		
		/* Read operators block */
		this.matchNextToken("{");
		childs = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		return new OpWhile(condition, childs);
	}
	
	
	
	/**
	 * Read operator for
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorFor()
	{
		
		BaseOpCode loop_condition = null;
		BaseOpCode loop_init = null;
		BaseOpCode loop_inc = null;
		Vector<BaseOpCode> childs = null;
		
		/* Read loop header */
		this.matchNextToken("for");
		this.matchNextToken("(");
		loop_init = this.readOperatorAssign();
		this.matchNextToken(";");
		loop_condition = this.readExpression();
		this.matchNextToken(";");
		loop_inc = this.readExpression();
		this.matchNextToken(")");
		
		/* Read operators block */
		this.matchNextToken("{");
		childs = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		return new OpFor(loop_condition, loop_init, loop_inc, childs);
	}
	
	
	
	/**
	 * Read operator try
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorTry()
	{
		
		Vector<BaseOpCode> op_try = null;
		Vector<OpTryCatchChilds> op_catch = new Vector();
		
		/* Read try block */
		this.matchNextToken("try");
		this.matchNextToken("{");
		op_try = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		/* Read catch */
		while (this.findNextToken("catch"))
		{
			OpTryCatchChilds try_catch_child = new OpTryCatchChilds();
			this.matchNextToken("catch");
			this.matchNextToken("(");
			try_catch_child.op_type = this.readTemplateIdentifier();
			try_catch_child.op_ident = this.readIdentifier();
			this.matchNextToken(")");
			this.matchNextToken("{");
			try_catch_child.childs = this.readOperatorsBlock();
			this.matchNextToken("}");
			op_catch.push(try_catch_child);
		}
		
		return new OpTryCatch(op_try, op_catch);
	}
	
	
	
	/**
	 * Read operator return
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorReturn()
	{
		this.matchNextToken("return");
		BaseOpCode value = null;
		if (not this.findNextToken(";"))
		{
			value = this.readExpression();
		}
		this.matchNextToken(";");
		return new OpReturn(value);
	}
	
	
	
	/**
	 * Read operator throw
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorThrow()
	{
		this.matchNextToken("throw");
		BaseOpCode value = this.readExpression();
		this.matchNextToken(";");
		return new OpThrow(value);
	}
	
	
	
	/**
	 * Read operator delete
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorDelete()
	{
		this.matchNextToken("delete");
		BaseOpCode value = this.readCallDynamic(true, true, false, false);
		this.matchNextToken(";");
		return new OpDelete(value);
	}
	
	
	
	/**
	 * Read postfix
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorPostfix()
	{
		this.pushToken();
		try
		{
			BaseOpCode op_code = this.readExpressionElement();
		}
		catch (ParserError ex)
		{
			this.popRollbackToken();
			return null;
		}
		if (this.findNextToken('++'))
		{
			this.matchNextToken('++');
			this.popToken();
			return new OpPostInc(op_code);
		}
		else if (this.findNextToken('--'))
		{
			this.matchNextToken('--');
			this.popToken();
			return new OpPostDec(op_code);
		}
		this.popRollbackToken();
		return null;
	}
	
	
	
	/**
	 * Read prefix
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorPrefix()
	{
		if (this.findNextToken('++'))
		{
			this.matchNextToken('++');
			return new OpPreInc( this.readExpressionPostfix() );
		}
		else if (this.findNextToken('--'))
		{
			this.matchNextToken('--');
			return new OpPreDec( this.readExpressionPostfix() );
		}
		return null;
	}
	
	
	
	/**
	 * Read operator 
	 * @return BaseOpCode
	 */
	BaseOpCode readOperator()
	{
		
		BaseOpCode res = null;
		
		if (this.findNextToken(";"))
		{
			this.matchNextToken(';');
			return null;
		}
		else if (this.lookNextTokenType() == ParserBayToken::TOKEN_COMMENT)
		{
			return new OpComment(this.readAnyNextToken().token);
		}
		else if (this.findNextToken("await"))
		{
			res = this.readCallAwait();
			this.matchNextToken(";");
			return res;
		}
		else if (this.findNextToken("if"))
		{
			return this.readOperatorIf();
		}
		else if (this.findNextToken("while"))
		{
			return this.readOperatorWhile();
		}
		else if (this.findNextToken("for"))
		{
			return this.readOperatorFor();
		}
		else if (this.findNextToken("try"))
		{
			return this.readOperatorTry();
		}
		else if (this.findNextToken("return"))
		{
			return this.readOperatorReturn();
		}
		else if (this.findNextToken("throw"))
		{
			return this.readOperatorThrow();
		}
		else if (this.findNextToken("delete"))
		{
			return this.readOperatorDelete();
		}
		else if (this.findNextToken("break"))
		{
			this.matchNextToken('break');
			this.matchNextToken(';');
			return new OpBreak();
		}
		else if (this.findNextToken("continue"))
		{
			this.matchNextToken('continue');
			this.matchNextToken(';');
			return new OpContinue();
		}
		else if (this.findNextTokenPreprocessor())
		{
			return this.readPreprocessor();
		}
		
		
		/* Read assign operator */
		res = this.readOperatorAssign();
		if (res)
		{
			this.matchNextToken(";");
			return res;
		}
		
		
		/* Read prefix ++ or -- */
		res = this.readOperatorPrefix();
		if (res)
		{
			this.matchNextToken(";");
			return res;
		}
		
		/* Read postfix ++ or -- */
		res = this.readOperatorPostfix();
		if (res)
		{
			this.matchNextToken(";");
			return res;
		}
		
		res =  this.readExpressionElement();
		this.matchNextToken(";");
		return res;
		/*return this.readCallDynamic(true, true, true, true);*/
	}
	
	
	
	/**
	 * Read operator block
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readOperatorsBlock()
	{
		
		Vector<BaseOpCode> res = new Vector();
		
		bool match_bracket = false;
		if (this.findNextToken("{"))
		{
			this.matchNextToken("{");
			match_bracket = true;
		}
	
		BaseOpCode op_code = null;
		while ( (not this.findNextToken("}")) and (not this.isEOF()) )
		{
			op_code = this.readOperator();
			if (op_code != null)
			{
				res.push(op_code);
			}
		}
		
		if (match_bracket)
		{
			this.matchNextToken("}");
		}
		
		return res;
	}
	
	
	
	/* ============== Read Class ============== */
	
	
	/**
	 * Read operator namespace
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorNamespace()
	{
		this.matchNextToken("namespace");
		string name = this.readDynamicName();
		this.current_namespace = name;
		this.matchNextToken(";");		
		return new OpNamespace(name);
	}
	
	
	
	/**
	 * Read operator namespace
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorUse()
	{
		
		this.matchNextToken("use");
		string name = this.readDynamicName();
		string alias_name = "";
		if (this.findNextToken("as"))
		{
			this.matchNextToken("as");
			alias_name = this.readIdentifierName();
		}
		this.matchNextToken(";");
		
		if (alias_name != "")
		{
			this.modules.set(alias_name, name);
		}
		else
		{
			Vector<string> arr = rs::explode(".", name);
			string last_name = arr.pop();
			this.modules.set(last_name, name);
		}
		
		return new OpUse(name, alias_name);
	}
	
	
	
	/**
	 * Read flags
	 * @return OpFlags
	 */
	OpFlags readFlags()
	{
		
		OpFlags flags = null;
		Vector<string> flags_vector = OpFlags::getFlags();
		
		if (this.findNextTokenVector(flags_vector) != -1)
		{
			flags = new OpFlags();
			while (this.findNextTokenVector(flags_vector) != -1)
			{
				if (not flags.assignFlag(this.lookNextToken()))
				{
					throw this.parserError("Unknown flag '" ~ this.lookNextToken() ~ "'");
				}
				this.readNextToken();
			}
		}
		
		if (flags_vector != null) delete flags_vector;
		return flags;
	}
	
	
	
	/**
	 * Read annotation
	 */
	void readAnnotation()
	{
		this.matchNextToken("@");
		OpAnnotation op_annotation = new OpAnnotation();
		op_annotation.kind = this.readTemplateIdentifier();
		op_annotation.options = this.readMap();
		if (this.annotations == null) this.annotations = new Vector<OpAnnotation>();
		this.annotations.push( op_annotation );
	}
	
	
	
	/**
	 * Read declare class arguments
	 * @return BaseOpCode
	 */
	Vector<OpAssignDeclare> readFunctionsArguments()
	{
		Vector<OpAssignDeclare> args = new Vector<OpAssignDeclare>();
		
		this.matchNextToken("(");
		while (not this.findNextToken(")") and not this.isEOF())
		{
			
			BaseOpCode op_code = this.readOperatorAssign();
			if (op_code instanceof OpAssign)
			{
				throw this.parserError("Assign are not alowed here");
			}
			else if (op_code instanceof OpAssignDeclare)
			{
				args.push(op_code);
			}
			
			if (this.findNextToken(","))
			{
				this.matchNextToken(",");
				continue;
			}
			break;
		}
		this.matchNextToken(")");
		
		return args;
	}
	
	
	
	/**
	 * Read declare class function
	 * @return BaseOpCode
	 */
	OpFunctionDeclare readDeclareFunctionHeader(OpFunctionDeclare res)
	{
		res.args = this.readFunctionsArguments();
		
		/* Read use variables*/
		if (this.findNextToken("use"))
		{
			this.matchNextToken("use");
			this.matchNextToken("(");
			while (not this.findNextToken(")") and not this.isEOF())
			{
				string name = this.readIdentifierName();
				res.use_variables.push(name);
				if (this.findNextToken(","))
				{
					this.matchNextToken(",");
				}
				else
				{
					break;
				}
			}
			this.matchNextToken(")");
		}
		
		return res;
	}
	
	
	
	/**
	 * Read declare class function
	 * @return BaseOpCode
	 */
	OpFunctionDeclare readDeclareFunction
	(
		bool read_name = true, 
		bool is_declare_function = false
	){
		OpFunctionDeclare res = new OpFunctionDeclare();
		res.is_lambda = false;
		
		this.pushToken();
		try
		{
			res.result_type = this.readTemplateIdentifier();
		}
		catch (ParserError ex)
		{
			this.popRollbackToken();
			return null;
		}
		if (read_name)
		{
			res.name = this.readIdentifierName();
		}
		
		/* If not function */
		if (not this.findNextToken("("))
		{
			this.popRollbackToken();
			return null;
		}
		
		
		/* Read functions arguments */
		try
		{
			res.args = this.readFunctionsArguments();
		}
		catch (ParserError ex)
		{
			this.popRollbackToken();
			return null;
		}
		
		
		/* Read use variables*/
		if (this.findNextToken("use"))
		{
			this.matchNextToken("use");
			this.matchNextToken("(");
			while (not this.findNextToken(")") and not this.isEOF())
			{
				string name = this.readIdentifierName();
				res.use_variables.push(name);
				if (this.findNextToken(","))
				{
					this.matchNextToken(",");
				}
				else
				{
					break;
				}
			}
			this.matchNextToken(")");
		}
		
		
		/* Read body of the function */
		if (this.findNextToken("=>"))
		{
			res.is_lambda = true;
			this.matchNextToken("=>");
			if (this.findNextToken("return")) this.matchNextToken("return");
			this.popToken();
			this.pushToken();
			try
			{
				OpFlags flags = null;
				flags = this.readFlags();
				res.return_function = this.readDeclareFunction(false, is_declare_function);
				if (res.return_function != null)
				{
					res.return_function.flags = flags;
				}
			}
			catch (ParserError ex)
			{
				res.return_function = null;
			}
			
			if (res.return_function == null)
			{
				this.popRollbackToken();
			}
			else
			{
				this.popToken();
			}
			
			if (res.return_function == null)
			{
				BaseOpCode op_item;
				try
				{
					op_item = this.readExpression();
				}
				catch (ParserError ex)
				{
					op_item = null;
				}
				
				if (op_item != null)
				{
					res.childs = [ op_item ];
				}
			}
			
			if (res.return_function == null and res.childs == null)
			{
				this.matchNextToken(";");
			}
			
			return res;
		}
		else if (is_declare_function)
		{
			this.matchNextToken(";");
		}
		else if (this.findNextToken("{"))
		{
			this.matchNextToken("{");
			res.childs = this.readOperatorsBlock();
			this.matchNextToken("}");
		}
		else
		{
			this.popRollbackToken();
			return null;
		}
		
		this.popToken();
		return res;
	}
	
	
	
	/**
	 * Read class body
	 */
	void readClassBody(OpClassDeclare res)
	{
		
		if (this.findNextToken(";"))
		{
			this.matchNextToken(';');
			return;
		}
		
		OpFlags flags = null;
		BaseOpCode op_code = null;
		
		if (this.findNextTokenPreprocessor())
		{
			op_code = this.readPreprocessor();
			res.childs.push(op_code);
			return ;
		}
		else if (this.lookNextTokenType() == ParserBayToken::TOKEN_COMMENT)
		{
			op_code = new OpComment(this.readAnyNextToken().token);
			res.childs.push(op_code);
			return ;
		}
		
		/* Read flags */
		flags = this.readFlags();
		this.readClassBodyContent(res, flags);
	}
	
	
	
	/**
	 * Read class body content
	 */
	void readClassBodyContent(OpClassDeclare res, OpFlags flags)
	{
		
		BaseOpCode op_code = null;
		bool is_declare_function = false;
		if (flags != null and flags.p_declare or this.is_interface) is_declare_function = true;
		
		/* Read annotation */
		if (this.findNextToken("@"))
		{
			this.readAnnotation();
			return ;
		}
		
		/* Assign public flag */
		if (flags == null)
		{
			flags = new OpFlags();
			flags.assignValue('public', true);
		}
		else
		{
			if (not flags.isFlag('protected') and not flags.isFlag('private'))
			{
				flags.assignValue('public', true);
			}
		}
		
		/* Read function */
		op_code = this.readDeclareFunction(true, is_declare_function);
		if (op_code and op_code instanceof OpFunctionDeclare)
		{
			op_code.annotations = this.annotations;
			op_code.flags = flags;
			if (op_code.isFlag('lambda'))
			{
				flags.assignValue('static', true);
			}
			res.childs.push( op_code );
			this.annotations = null;
			return ;
		}
		
		/* Read declare variable */
		op_code = this.readOperatorAssign();
		if (op_code instanceof OpAssign)
		{
			throw this.parserError("Assign are not alowed here");
		}
		else if (op_code instanceof OpAssignDeclare)
		{
			op_code.annotations = this.annotations;
			op_code.flags = flags;
			res.childs.push(op_code);
			this.matchNextToken(";");
			this.annotations = null;
			return ;
		}
		
		throw this.parserError("Unknown operator");
	}
	
	
	
	/**
	 * Read class header
	 * @return BaseOpCode
	 */
	OpClassDeclare readClassHead(OpClassDeclare res)
	{
		
		res.class_name = this.readIdentifierName();
		this.current_class_name = res.class_name;
		
		if (this.findNextToken("<"))
		{
			this.matchNextToken("<");
			while (true)
			{
				BaseOpCode op_code2 = this.readCallDynamic(true, false, false, false);
				res.class_template.push(op_code2);
				if (this.findNextToken(","))
				{
					this.matchNextToken(",");
					continue;
				}
				break;
			}
			this.matchNextToken(">");
		}
		
		
		if (this.findNextToken("extends"))
		{
			this.matchNextToken("extends");
			res.class_extends = this.readIdentifier();
			
			if (this.findNextToken("<"))
			{
				this.matchNextToken("<");
				while (true)
				{
					this.readCallDynamic(true, false, false, false);
					if (this.findNextToken(","))
					{
						this.matchNextToken(",");
						continue;
					}
					break;
				}
				this.matchNextToken(">");
			}
			
		}
		
		if (this.findNextToken("implements"))
		{
			this.matchNextToken("implements");
			while ((not this.findNextToken("{")) and (not this.isEOF()))
			{
				res.class_implements.push( this.readDynamicName() );
				if (this.findNextToken(","))
				{
					this.matchNextToken(",");
					continue;
				}
				break;
			}
		}
		
		this.matchNextToken("{");
		while ((not this.findNextToken("}")) and (not this.isEOF()))
		{
			this.readClassBody(res);
		}
		
		this.matchNextToken("}");
	}
	
	
	
	/**
	 * Read class
	 * @return BaseOpCode
	 */
	OpClassDeclare readDeclareClass(OpFlags class_flags)
	{
		OpClassDeclare res = new OpClassDeclare();
		this.matchNextToken("class");
		this.readClassHead(res);
		res.flags = class_flags;
		return res;
	}
	
	
	
	/**
	 * Read interface
	 * @return BaseOpCode
	 */
	OpInterfaceDeclare readDeclareInterface(OpFlags class_flags)
	{
		OpInterfaceDeclare res = new OpInterfaceDeclare();
		this.matchNextToken("interface");
		this.is_interface = true;
		this.readClassHead(res);
		this.is_interface = false;
		res.flags = class_flags;
		return res;
	}
	
	
	
	/**
	 * Read struct
	 * @return BaseOpCode
	 */
	OpStructDeclare readDeclareStruct(OpFlags class_flags)
	{
		OpStructDeclare res = new OpStructDeclare();
		this.matchNextToken("struct");
		this.readClassHead(res);
		res.flags = class_flags;
		return res;
	}
	
	
	
	/**
	 * Prepocessor
	 */
	bool findNextTokenPreprocessor()
	{
		string token = this.lookNextToken();
		if (
			(this.lookNextTokenType() == ParserBayToken::TOKEN_BASE) and (
				token == "#switch" or
				token == "#ifcode"
			)
		){
			return true;
		}
		
		return false;
	}
	
	
	
	/**
	 * Read prepocessors block
	 */
	BaseOpCode readPreprocessor()
	{
	
		if (this.findNextToken("#switch"))
		{
			Vector<BaseOpCode> childs = new Vector();
			
			string comment; int pos;
			this.matchNextToken("#switch");
			Vector<string> v = (new Vector())
				.push("#case")
				.push("#endswitch")
			;
			while (this.findNextToken("#case"))
			{
				this.matchNextToken("#case");
				this.matchNextToken("ifcode");
				
				OpPreprocessorCase op_case = new OpPreprocessorCase();
				op_case.condition = this.readExpression();
				if (not this.findNextToken("then"))
				{
					throw this.nextTokenExpected("then");
				}
				op_case.value = rs::trim(this.next_token.readUntilVector(v));
				childs.push(op_case);
				
				this.readAnyNextToken();
				pos = this.findNextTokenVector(v);
				if (pos == -1)
				{
					throw this.parserError("Unknown preprocessor token " ~ this.lookNextToken());
				}
			}
			this.matchNextToken("#endswitch");
			delete v;
			
			return new OpPreprocessorSwitch(childs);
		}
		else if (this.findNextToken("#ifcode"))
		{
			this.matchNextToken("#endifcode");
		}
		else
		{
			throw this.parserError("Unknown preprocessor token " ~ this.lookNextToken());
		}
	}
	
	
	
	/**
	 * Read program
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readProgram()
	{
		
		BaseOpCode op_code = null;
		Vector<BaseOpCode> res = new Vector();
		
		while (not this.isEOF())
		{
			if (this.lookNextTokenType() == ParserBayToken::TOKEN_COMMENT)
			{
				res.push(new OpComment(this.readAnyNextToken().token));
				continue;
			}
			else if (this.findNextToken("namespace"))
			{
				res.push(this.readOperatorNamespace());
				continue;
			}
			else if (this.findNextToken("use"))
			{
				res.push(this.readOperatorUse());
				continue;
			}
			else if (this.findNextTokenPreprocessor())
			{
				res.push(this.readPreprocessor());
				continue;
			}
			
			/* Read annotation */
			if (this.findNextToken("@"))
			{
				this.readAnnotation();
				continue;
			}
			
			OpFlags flags = this.readFlags();
			bool is_class = this.findNextToken("class");
			bool is_interface = this.findNextToken("interface");
			bool is_struct = this.findNextToken("struct");
			
			if (is_class or is_interface or is_struct)
			{
				Vector<OpAnnotation> annotations = this.annotations;
				this.annotations = null;
				OpClassDeclare op_code = null;
				if (is_class) op_code = this.readDeclareClass(flags);
				else if (is_interface) op_code = this.readDeclareInterface(flags);
				else if (is_struct) op_code = this.readDeclareStruct(flags);
				op_code.annotations = annotations;
				res.push(op_code);
			}
			else 
			{
				throw this.parserError("Unknown token " ~ this.lookNextToken());
			}
		}
		
		return res;
	}
	
	
	
	/**
	 * Reset parser to default settings
	 */
	void resetParser()
	{
		parent::resetParser();
		this.modules = new Map<string, string>();
	}
	
	
	
	/**
	 * Parser function
	 */
	void runParser()
	{
		this._result = new OpNope( this.readProgram() );
	}
	
	
	
}