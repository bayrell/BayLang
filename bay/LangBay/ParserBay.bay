/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangBay;

use BayrellRtl.Types.Vector;
use BayrellLang.CommonParser;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpFixed;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpDiv;
use BayrellParser.ParserToken;


export class ParserBay extends CommonParser{
	
	
	
	/**
	 * Read double value and
	 * @return OpFixed
	 */
	OpFixed readDouble(){
		return new OpFixed( this.matchNumber() );
	}
	
	
	
	/**
	 * Read op name
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionElement(){
		
		if (this.findNextToken('(')){
			this.matchNextToken('(');
			BaseOpCode res = this.readExpression();
			this.matchNextToken(')');
			return res;
		}
		
		return this.readDouble();
	}
	
	
	
	/**
	 * Read arithmetic multiply and divide
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionFactor (){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionElement();
		
		while (this.findNextToken('*') or this.findNextToken('/')){
			if (this.findNextToken('*')){
				this.matchNextToken('*');
				op_code = new OpMult(op_code, this.readExpressionElement());
			}
			else if (this.findNextToken('/')){
				this.matchNextToken('/');
				op_code = new OpDiv(op_code, this.readExpressionElement());
			}
			else{
				this.nextTokenExpected('"*" or "/"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read arithmetic expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionArithmetic(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionFactor();
		
		while (this.findNextToken('+') or this.findNextToken('-')){
			if (this.findNextToken('+')){
				this.matchNextToken('+');
				op_code = new OpAdd(op_code, this.readExpressionFactor());
			}
			else if (this.findNextToken('-')){
				this.matchNextToken('-');
				op_code = new OpSub(op_code, this.readExpressionFactor());
			}
			else{
				this.nextTokenExpected('"+" or "-"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpression(){
		return this.readExpressionArithmetic();
	}
	
	
	
	/**
	 * Parser function
	 */
	void runParser(){
		this._result = this.readExpression();
		this.matchNextToken(';');
	}
	
	
	
}