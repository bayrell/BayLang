/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangBay;

use BayrellRtl.Lib.rs;
use BayrellRtl.Types.Vector;
use BayrellLang.CommonParser;
use BayrellLang.OpCodes.BaseOpCode;
use BayrellLang.OpCodes.OpAdd;
use BayrellLang.OpCodes.OpAnd;
use BayrellLang.OpCodes.OpArray;
use BayrellLang.OpCodes.OpAssign;
use BayrellLang.OpCodes.OpAssignDeclare;
use BayrellLang.OpCodes.OpBitAnd;
use BayrellLang.OpCodes.OpBitNot;
use BayrellLang.OpCodes.OpBitOr;
use BayrellLang.OpCodes.OpBitXor;
use BayrellLang.OpCodes.OpBreak;
use BayrellLang.OpCodes.OpCall;
use BayrellLang.OpCodes.OpCallAwait;
use BayrellLang.OpCodes.OpChilds;
use BayrellLang.OpCodes.OpClone;
use BayrellLang.OpCodes.OpCompare;
use BayrellLang.OpCodes.OpConcat;
use BayrellLang.OpCodes.OpContinue;
use BayrellLang.OpCodes.OpDelete;
use BayrellLang.OpCodes.OpDiv;
use BayrellLang.OpCodes.OpDynamic;
use BayrellLang.OpCodes.OpFlags;
use BayrellLang.OpCodes.OpFor;
use BayrellLang.OpCodes.OpHexNumber;
use BayrellLang.OpCodes.OpIdentifier;
use BayrellLang.OpCodes.OpIf;
use BayrellLang.OpCodes.OpIfElse;
use BayrellLang.OpCodes.OpMod;
use BayrellLang.OpCodes.OpMult;
use BayrellLang.OpCodes.OpNamespace;
use BayrellLang.OpCodes.OpNew;
use BayrellLang.OpCodes.OpNope;
use BayrellLang.OpCodes.OpNot;
use BayrellLang.OpCodes.OpNumber;
use BayrellLang.OpCodes.OpOr;
use BayrellLang.OpCodes.OpPostDec;
use BayrellLang.OpCodes.OpPostInc;
use BayrellLang.OpCodes.OpPow;
use BayrellLang.OpCodes.OpPreDec;
use BayrellLang.OpCodes.OpPreInc;
use BayrellLang.OpCodes.OpReturn;
use BayrellLang.OpCodes.OpShiftLeft;
use BayrellLang.OpCodes.OpShiftRight;
use BayrellLang.OpCodes.OpStatic;
use BayrellLang.OpCodes.OpString;
use BayrellLang.OpCodes.OpSub;
use BayrellLang.OpCodes.OpTemplateIdentifier;
use BayrellLang.OpCodes.OpTernary;
use BayrellLang.OpCodes.OpThrow;
use BayrellLang.OpCodes.OpTryCatch;
use BayrellLang.OpCodes.OpTryCatchChilds;
use BayrellLang.OpCodes.OpUse;
use BayrellLang.OpCodes.OpWhile;
use BayrellLang.LangBay.ParserBayToken;
use BayrellLang.LangBay.ParserBayNameToken;
use BayrellLang.Exceptions.HexNumberExpected;
use BayrellLang.Exceptions.TwiceDeclareElseError;
use BayrellParser.Exceptions.ParserError;



export class ParserBay extends CommonParser{
	
	
	
	/**
	 * Tokens Fabric
	 * @return BayrellParserToken
	 */
	BayrellParserToken createToken(){
		return new ParserBayToken(this.context(), this);
	}
	
	
	
	/**
	 * Read double value and
	 * @return BaseOpCode
	 */
	BaseOpCode readFixed(){
		
		string res = "";
		
		
		/* Try to read HEX Number */
		this.pushToken();
		try{
			res = this.matchHexNumber();
		}
		catch (Exception ex){
			if (ex instanceof HexNumberExpected){
				throw ex;
			}
			else if (ex instanceof ParserError){
				res = null;
			}
			else{
				throw ex;
			}
		}
		if (res != null){
			this.popToken();
			return new OpHexNumber(res);
		}
		else{
			this.popAssignToken();
		}
		
		
		/* Try to read number */
		this.pushToken();
		try{
			res = this.matchDouble();
		}
		catch (Exception ex){
			if (ex instanceof ParserError){
				res = null;
			}
			else{
				throw ex;
			}
		}
		if (res != null){
			this.popToken();
			return new OpNumber(res);
		}
		else{
			this.popAssignToken();
		}
		
		
		/* Try to read string */
		if (this.lookType() == ParserBayToken::TOKEN_STRING){
			return new OpString(this.readAnyNextToken().token);
		}
		
		
		return null;
	}
	
	
	
	/**
	 * Read Identifier
	 * @return OpIdentifier
	 */
	OpIdentifier readIdentifier(){
		string res = this.readNextToken().token;
		
		if (not this.isLetterChar(rs::charAt(res, 0))){
			this.parserError(this.translate("ERROR_PARSER_FIRST_CHAR_MUST_BE_LETTER"));
		}
		
		return new OpIdentifier(res);
	}
	
	
	
	/**
	 * Read call args
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readCallArgs(){
		
		Vector<BaseOpCode> v = new Vector();
		BaseOpCode op_code = this.readExpression();
		v.push(op_code);
		
		while (this.findNextToken(",")){
			this.matchNextToken(",");
			op_code = this.readExpression();
			v.push(op_code);
		}
		
		return v;
	}
	
	
	
	/**
	 * Read call body
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readCallBody(){
	
		Vector<BaseOpCode> v = null;
		this.matchNextToken("(");
		if (not this.findNextToken(")")){
			v = this.readCallArgs();
		}
		else{
			v = new Vector<BaseOpCode>();
		}
		this.matchNextToken(")");
		
		return v;
	}
	
	
	
	/**
	 * Read call dynamic
	 * @return BaseOpCode
	 */
	BaseOpCode readCallDynamic(bool allow_dynamic = true, bool allow_bracket = true, 
	bool allow_static = true, bool allow_call = true){
		
		bool can_static = true;
		
		BaseOpCode obj = this.readIdentifier();
		BaseOpCode ident = null;
		while ((this.findNextToken(".") and allow_dynamic) or 
		       (this.findNextToken("[") and allow_bracket) or 
		       (this.findNextToken("::") and allow_static) or 
			   (this.findNextToken("(") and allow_call)) {
		
			if (this.findNextToken(".") and allow_dynamic){
				this.matchNextToken(".");
				ident = this.readIdentifier();
				obj = new OpDynamic(obj, ident);
			}
			
			else if (this.findNextToken("[") and allow_bracket){
				this.matchNextToken("[");
				ident = this.readExpression();
				this.matchNextToken("]");
				obj = new OpArray(obj, ident);
			}
			
			else if (this.findNextToken("::") and allow_static){
				if (not can_static){
					this.parserError(this.translate("ERROR_PARSER_STATIC_METHOD_IS_NOT_ALOWED_HERE"));
				}
				this.matchNextToken("::");
				ident = this.readIdentifier();
				obj = new OpStatic(obj, ident);
				can_static = false;
			}
			
			else if (this.findNextToken("(") and allow_call){
				Vector<BaseOpCode> v = this.readCallBody();
				obj = new OpCall(obj, v);
				can_static = false;
			}
			
		}
		
		return obj;
	}
	
	
	
	/**
	 * Read type identifier
	 * @return BaseOpCode
	 */
	BaseOpCode readTemplateIdentifier(){
		BaseOpCode op_code1 = this.readCallDynamic(true, false, false, false);
		if (not this.findNextToken("<")){
			return op_code1;
		}
		
		Vector<BaseOpCode> v = new Vector();
		
		this.matchNextToken("<");
		BaseOpCode op_code2 = this.readCallDynamic(true, false, false, false);
		v.push(op_code2);
		
		while (this.findNextToken(",")){
			BaseOpCode op_code2 = this.readCallDynamic(true, false, false, false);
			v.push(op_code2);		
		}
		this.matchNextToken(">");
		
		return new OpTemplateIdentifier(op_code1, v);
	}
	
	
	
	/**
	 * Read new instance
	 * @return BaseOpCode
	 */
	BaseOpCode readNewInstance(){
		this.matchNextToken("new");
		BaseOpCode ident = this.readTemplateIdentifier();
		Vector<BaseOpCode> v = this.readCallBody();
		return new OpNew(ident, v);
	}
	
	
	
	/**
	 * Read call await
	 * @return BaseOpCode
	 */
	BaseOpCode readCallAwait(){
		this.matchNextToken("await");
		BaseOpCode ident = this.readCallDynamic();
		Vector<BaseOpCode> v = this.readCallBody();
		return new OpCallAwait(ident, v);
	}
	
	
	
	/**
	 * Read element
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionElement(){
		
		if (this.findNextToken('(')){
			this.matchNextToken('(');
			BaseOpCode op_code = this.readExpression();
			this.matchNextToken(')');
			return op_code;
		}
		else if (this.findNextToken('new')){
			return this.readNewInstance();
		}
		else if (this.findNextToken('await')){
			return this.readCallAwait();
		}
		
		BaseOpCode op_code = this.readFixed();
		if (op_code != null)
			return op_code;
			
		return this.readCallDynamic();
	}
	
	
	
	/**
	 * Read postfix
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionPostfix(){
		BaseOpCode op_code = this.readExpressionElement();
		if (this.findNextToken('++')){
			this.matchNextToken('++');
			return new OpPostInc(op_code);
		}
		else if (this.findNextToken('--')){
			this.matchNextToken('--');
			return new OpPostDec(op_code);
		}
		return op_code;
	}
	
	
	
	/**
	 * Read prefix
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionPrefix(){
		if (this.findNextToken('++')){
			this.matchNextToken('++');
			return new OpPreInc( this.readExpressionPostfix() );
		}
		else if (this.findNextToken('--')){
			this.matchNextToken('--');
			return new OpPreDec( this.readExpressionPostfix() );
		}
		return this.readExpressionPostfix();
	}
	
	
	
	/**
	 * Read bit NOT
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitNot(){
		if (this.findNextToken('!')){
			this.matchNextToken('!');
			return new OpBitNot( this.readExpressionPrefix() );
		}
		return this.readExpressionPrefix();
	}
	
	
	
	/**
	 * Read pow
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionPow(){
		BaseOpCode op_code = this.readExpressionBitNot();
		while (this.findNextToken('**')){
			this.matchNextToken('**');
			op_code = new OpPow(op_code, this.readExpressionBitNot() );
		}
		return op_code;
	}
	
	
	
	/**
	 * Read arithmetic multiply and divide
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionFactor (){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionPow();
		
		while (this.findNextToken('*') or this.findNextToken('/') or this.findNextToken('%')){
			if (this.findNextToken('*')){
				this.matchNextToken('*');
				op_code = new OpMult(op_code, this.readExpressionPow());
			}
			else if (this.findNextToken('/')){
				this.matchNextToken('/');
				op_code = new OpDiv(op_code, this.readExpressionPow());
			}
			else if (this.findNextToken('%')){
				this.matchNextToken('%');
				op_code = new OpMod(op_code, this.readExpressionPow());
			}
			else{
				this.nextTokenExpected('"*", "/" or "%"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read arithmetic expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionArithmetic(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionFactor();
		
		while (this.findNextToken('+') or this.findNextToken('-')){
			if (this.findNextToken('+')){
				this.matchNextToken('+');
				op_code = new OpAdd(op_code, this.readExpressionFactor());
			}
			else if (this.findNextToken('-')){
				this.matchNextToken('-');
				op_code = new OpSub(op_code, this.readExpressionFactor());
			}
			else{
				this.nextTokenExpected('"+" or "-"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read shift
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionShift(){
	
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionArithmetic();
		
		while (this.findNextToken('<<') or this.findNextToken('>>')){
			if (this.findNextToken('<<')){
				this.matchNextToken('<<');
				op_code = new OpShiftLeft(op_code, this.readExpressionArithmetic());
			}
			else if (this.findNextToken('>>')){
				this.matchNextToken('>>');
				op_code = new OpShiftRight(op_code, this.readExpressionArithmetic());
			}
			else{
				this.nextTokenExpected('"<<" or ">>"');
			}
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read concat string
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionConcat(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionShift();
		while (this.findNextToken('~')){
			this.matchNextToken('~');
			op_code = new OpConcat(op_code, this.readExpressionShift() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read compare
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionCompare1(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionConcat();
		
		while (this.findNextToken('<') or this.findNextToken('<=') or
		       this.findNextToken('>') or this.findNextToken('>=') or
		       this.findNextToken('in') or this.findNextToken('instanceof') or
		       this.findNextToken('implements')
		){
			string cond = this.readNextToken().token;
			op_code = new OpCompare(cond, op_code, this.readExpressionConcat());
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read compare
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionCompare2(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionCompare1();
		
		while (this.findNextToken('==') or this.findNextToken('===') or
		       this.findNextToken('!=') or this.findNextToken('!==')
		){
			string cond = this.readNextToken().token;
			op_code = new OpCompare(cond, op_code, this.readExpressionCompare1());
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read bit AND
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitAnd(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionCompare2();
		while (this.findNextToken('&')){
			this.matchNextToken('&');
			op_code = new OpBitAnd(op_code, this.readExpressionCompare2() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read bit XOR
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitXor(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionBitAnd();
		while (this.findNextToken('^')){
			this.matchNextToken('^');
			op_code = new OpBitXor(op_code, this.readExpressionBitAnd() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read bit OR
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionBitOr(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionBitXor();
		while (this.findNextToken('|')){
			this.matchNextToken('|');
			op_code = new OpBitOr(op_code, this.readExpressionBitXor() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read NOT
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionNot(){
		
		if (this.findNextToken('not')){
			this.matchNextToken('not');
			return new OpNot(this.readExpressionBitOr() );
		}
		
		return this.readExpressionBitOr();
	}
	
	
	
	/**
	 * Read AND
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionAnd(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionNot();
		while (this.findNextToken('and')){
			this.matchNextToken('and');
			op_code = new OpAnd(op_code, this.readExpressionNot() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read OR
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionOr(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionAnd();
		while (this.findNextToken('or')){
			this.matchNextToken('or');
			op_code = new OpOr(op_code, this.readExpressionAnd() );
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read ternary operator
	 * @return BaseOpCode
	 */
	BaseOpCode readExpressionTernary(){
		
		/* Read first opcode */
		BaseOpCode op_code = this.readExpressionOr();
		if (this.findNextToken('?')){
			this.matchNextToken('?');
			BaseOpCode if_true = this.readExpressionOr();
			
			this.matchNextToken(':');
			BaseOpCode if_false = this.readExpressionOr();
			
			return OpTernary(op_code, if_true, if_false);
		}
		
		return op_code;
	}
	
	
	
	/**
	 * Read expression
	 * @return BaseOpCode
	 */
	BaseOpCode readExpression(){
		return this.readExpressionTernary();
	}
	
	
	
	/**
	 * Read operator assign
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorAssign(){
		
		BaseOpCode op_type = null;
		BaseOpCode op_ident = null;
		BaseOpCode op_exp = null;
		bool success = false;
		
		/* Read declare */
		this.pushToken();
		try{
			op_type = this.readTemplateIdentifier();
			op_ident = this.readIdentifier();
			if (this.findNextToken("=")){
				success = true;
			}
		}
		catch (Exception ex){
			if (ex instanceof ParserError){
				success = false;
			}
			else{
				throw ex;
			}
		}
		if (success){
			this.popToken();
			this.matchNextToken("=");
			op_exp = this.readExpression();
			this.matchNextToken(";");
			return new OpAssignDeclare(op_type, op_ident, op_exp);
		}
		this.popAssignToken();
		
		
		/* Read assign */
		success = false;
		this.pushToken();
		try{
			op_ident = this.readCallDynamic(true, true, false, false);
			if (this.findNextToken("=")){
				success = true;
			}
		}
		catch (Exception ex){
			if (ex instanceof ParserError){
				success = false;
			}
			else{
				throw ex;
			}
		}
		if (success){
			this.popToken();
			this.matchNextToken("=");
			op_exp = this.readExpression();
			this.matchNextToken(";");
			return new OpAssign(op_ident, op_exp);
		}
		this.popAssignToken();
		
		
		return null;
	}
	
	
	
	/**
	 * Read operator if
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorIf(){
		
		BaseOpCode condition = null;
		Vector<BaseOpCode> if_true = null;
		Vector<BaseOpCode> if_false = null;
		Vector<OpIfElse> if_else = new Vector();
		
		/* Read condition */
		this.matchNextToken("if");
		this.matchNextToken("(");
		condition = this.readExpression();
		this.matchNextToken(")");
		
		/* Read if true operators block */
		this.matchNextToken("{");
		if_true = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		/* Read else or elseif */
		while (this.findNextToken("elseif") or this.findNextToken("else")){
			
			if (this.findNextToken("else")){
				this.matchNextToken("else");
				
				/* Read elseif */
				if (this.findNextToken("if")){
					OpIfElse op_if_else = new OpIfElse();
					
					/* Read condition */
					this.matchNextToken("(");
					op_if_else.condition = this.readExpression();
					this.matchNextToken(")");
					
					/* Read operators block */
					this.matchNextToken("{");
					op_if_else.if_true = this.readOperatorsBlock();
					this.matchNextToken("}");
					if_else.push(op_if_else);
				}
				
				/* Read false operators block */
				else{
					if_false = this.readOperatorsBlock();
					break;
				}
			}
			
			/* Read elseif */
			else if (this.findNextToken("elseif")){
				OpIfElse op_if_else = new OpIfElse();
				
				/* Read condition */
				this.matchNextToken("(");
				op_if_else.condition = this.readExpression();
				this.matchNextToken(")");
				
				/* Read operators block */
				this.matchNextToken("{");
				op_if_else.if_true = this.readOperatorsBlock();
				this.matchNextToken("}");
				if_else.push(op_if_else);
			}
		}
		
		return new OpIf(condition, if_true, if_false, if_else);
	}
	
	
	
	/**
	 * Read operator while
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorWhile(){
		
		BaseOpCode condition = null;
		Vector<BaseOpCode> childs = null;
		
		/* Read condition */
		this.matchNextToken("if");
		this.matchNextToken("(");
		condition = this.readExpression();
		this.matchNextToken(")");
		
		/* Read operators block */
		this.matchNextToken("{");
		childs = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		return new OpWhile(condition, childs);
	}
	
	
	
	/**
	 * Read operator for
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorFor(){
		
		BaseOpCode loop_condition = null;
		BaseOpCode loop_init = null;
		BaseOpCode loop_inc = null;
		Vector<BaseOpCode> childs = null
		
		/* Read loop header */
		this.matchNextToken("for");
		this.matchNextToken("(");
		loop_init = this.readOperatorAssign();
		this.matchNextToken(";");
		loop_condition = this.readExpression();
		this.matchNextToken(";");
		loop_inc = this.readExpression();
		this.matchNextToken(";");
		this.matchNextToken(")");
		
		/* Read operators block */
		this.matchNextToken("{");
		childs = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		return new OpFor(loop_condition, loop_init, loop_inc, childs);
	}
	
	
	
	/**
	 * Read operator try
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorTry(){
		
		Vector<BaseOpCode> op_try = null;
		Vector<OpTryCatchChilds> op_catch = new Vector();
		
		/* Read try block */
		this.matchNextToken("try");
		this.matchNextToken("{");
		op_try = this.readOperatorsBlock();
		this.matchNextToken("}");
		
		/* Read catch */
		while (this.findNextToken("catch")){
			OpTryCatchChilds try_catch_child = new OpTryCatchChilds();
			this.matchNextToken("(");
			try_catch_child.op_type = this.readTemplateIdentifier();
			try_catch_child.op_ident = this.readIdentifier();
			this.matchNextToken(")");
			this.matchNextToken("{");
			try_catch_child.childs = this.readOperatorsBlock();
			this.matchNextToken("}");
			op_catch.push(try_catch_child);
		}
		
		return new OpTryCatch(op_try, op_catch);
	}
	
	
	
	/**
	 * Read operator namespace
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorNamespace(){
		
		this.matchNextToken("namespace");
		
		/* Create new token */
		ParserBayNameToken token = new ParserBayNameToken(this.context(), this);
		token.assign( this.current_token );
		token.readNextToken();
		
		/* Get name */
		string name = token.token;
		
		/* Assign next token */
		this.current_token.assign(token);
		this.next_token.assign(token);
		this.next_token.readNextToken();
		
		/* Destroy new token */
		delete token;
		
		this.matchNextToken(";");
		
		return new OpNamespace(name);
	}
	
	
	
	/**
	 * Read operator namespace
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorUse(){
		
		this.matchNextToken("use");
		
		/* Create new token */
		ParserBayNameToken token = new ParserBayNameToken(this.context(), this);
		token.assign( this.current_token );
		token.readNextToken();
		
		/* Get name */
		string name = token.token;
		
		/* Assign next token */
		this.current_token.assign(token);
		this.next_token.assign(token);
		this.next_token.readNextToken();
		
		/* Destroy new token */
		delete token;
		
		this.matchNextToken(";");
		
		return new OpUse(name);
	}
	
	
	
	/**
	 * Read operator return
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorReturn(){
		this.matchNextToken("return");
		BaseOpCode value = this.readExpression();
		this.matchNextToken(";");
		return new OpReturn(value);
	}
	
	
	
	/**
	 * Read operator throw
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorThrow(){
		this.matchNextToken("throw");
		BaseOpCode value = this.readExpression();
		this.matchNextToken(";");
		return new OpThrow(value);
	}
	
	
	
	/**
	 * Read operator delete
	 * @return BaseOpCode
	 */
	BaseOpCode readOperatorDelete(){
		this.matchNextToken("delete");
		BaseOpCode value = this.readCallDynamic(true, true, false, false);
		this.matchNextToken(";");
		return new OpDelete(value);
	}
	
	
	
	/**
	 * Read operator 
	 * @return BaseOpCode
	 */
	BaseOpCode readOperator(){
		
		if (this.findNextToken(";")){
			this.matchNextToken(';');
			return null;
		}
		
		else if (this.findNextToken("if")){
			return this.readOperatorIf();
		}
		else if (this.findNextToken("while")){
			return this.readOperatorWhile();
		}
		else if (this.findNextToken("for")){
			return this.readOperatorFor();
		}
		else if (this.findNextToken("try")){
			return this.readOperatorTry();
		}
		else if (this.findNextToken("namespace")){
			return this.readOperatorNamespace();
		}
		else if (this.findNextToken("use")){
			return this.readOperatorUse();
		}
		else if (this.findNextToken("return")){
			return this.readOperatorReturn();
		}
		else if (this.findNextToken("throw")){
			return this.readOperatorThrow();
		}
		else if (this.findNextToken("delete")){
			return this.readOperatorDelete();
		}
		else if (this.findNextToken("break")){
			this.matchNextToken('break');
			this.matchNextToken(';');
			return new OpBreak();
		}
		else if (this.findNextToken("continue")){
			this.matchNextToken('continue');
			this.matchNextToken(';');
			return new OpContinue();
		}
		
		BaseOpCode res = this.readOperatorAssign();
		if (res){
			return res;
		}
		
		return null;
	}
	
	
	
	/**
	 * Read operator block
	 * @return BaseOpCode
	 */
	Vector<BaseOpCode> readOperatorsBlock(){
		
		Vector<BaseOpCode> res = new Vector();
		
		bool match_bracket = false;
		if (this.findNextToken("{")){
			this.matchNextToken("{");
			match_bracket = true;
		}
	
		BaseOpCode op_code = null;
		while (not this.findNextToken("}") and not this.isEOF()){
			op_code = this.readOperator();
			if (op_code != null){
				res.push(op_code);
			}
		}
		
		if (match_bracket){
			this.matchNextToken("}");
		}
		
		return res;
	}
	
	
	
	/**
	 * Parser function
	 */
	void runParser(){
		this._result = new OpNope( this.readOperatorsBlock() );
	}
	
	
	
}