/*!
 *  Bayrell Common Languages Transcompiler
 *
 *  (c) Copyright 2016-2018 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang.LangNodeJS;

use BayrellRtl.Lib.rs;
use BayrellLang.CommonTranslator;


export class TranslatorNodeJS extends TranslatorES6 {
	
	
	
	/**
	 * Class declare header
	 */
	string OpClassDeclareHeader(OpClassDeclare op_code){
		res = "";
		
		this.beginOperation();
		res ~= "class " ~ op_code.class_name;
		if (op_code.class_extends != ""){
			res ~= " extends " ~ this.translateRun(op_code.class_extends);
		}
		if (op_code.class_implements != null and op_code.class_implements.count() > 0){
			res ~= " implements " ~ rs::implode(", ", op_code.class_implements);
		}
		res ~= "{";
		this.endOperation();
		this.levelInc();
		
		return res;
	}
	
	
	
	/**
	 * Class declare footer
	 */
	string OpClassDeclareFooter(OpClassDeclare op_code){
		
		res = "";
		for (int i=0; i<op_code.class_variables.count(); i++){
			OpAssignDeclare variable = op_code.class_variables.item(i);
			if (variable.flags != null and variable.flags.p_static == true){
				this.beginOperation();
				string s = op_code.class_name ~ "." ~ variable.name ~ " = " ~
					this.translateRun(variable.value) ~ ";";
				this.endOperation();
				res ~= this.s(s);
			}
		}
		
		return res;
	}
	
	
}