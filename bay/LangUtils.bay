/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang;

use Runtime.CoreParser;
use Runtime.Interfaces.ContextInterface;
use BayLang.LangBay.TranslatorBay;
use BayLang.LangES6.TranslatorES6;
use BayLang.LangNode.TranslatorNode;
use BayLang.LangPHP.TranslatorPHP;
use BayLang.OpCodes.BaseOpCode;
use BayLang.CoreTranslator;


static class LangUtils
{
	/**
	 * Parse file and convert to BaseOpCode
	 */
	static BaseOpCode parse(CoreParser parser, string text)
	{
		list res = parser :: parse(parser, text);
		return res[1];
	}
	
	
	
	/**
	 * Translate BaseOpCode to string
	 */
	static string translate(CoreParser translator, BaseOpCode op_code)
	{
		list res = translator :: translate(translator, op_code);
		return res[1];
	}
	
	
	
	/**
	 * Create translator
	 */
	static CoreTranslator createTranslator(string lang = "")
	{
		CoreTranslator t = null;
		
		if (lang == "bay")
		{
			t = new TranslatorBay();
			t.reset();
		}
		else if (lang == "es6")
		{
			t = new TranslatorES6();
			t = t::reset(t);
		}
		else if (lang == "nodejs")
		{
			t = new TranslatorNode();
			t = t::reset(t);
		}
		else if (lang == "php")
		{
			t = new TranslatorPHP();
			t = t::reset(t);
		}
		
		return t;
	}
}