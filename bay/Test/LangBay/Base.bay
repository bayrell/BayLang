/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.Lang.Test.LangBay;

use Runtime.io;
use Runtime.Unit.AssertHelper;
use Runtime.Unit.Test;
use Bayrell.Lang.LangBay.ParserBay;
use Bayrell.Lang.LangBay.TranslatorBay;
use Bayrell.Lang.OpCodes.BaseOpCode;
use Bayrell.Lang.CoreTranslator;


class Base
{
	ParserBay parser;
	TranslatorBay translator;
	
	
	/**
	 * Reset
	 */
	void reset()
	{
		this.parser = new ParserBay();
		this.parser = this.parser::reset(this.parser);
		this.translator = new TranslatorBay();
		this.translator.reset();
	}
	
	
	/**
	 * Set content
	 */
	void setContent(string content)
	{
		this.parser = this.parser::setContent(this.parser, content);
	}
	
	
	/**
	 * Add variable
	 */
	void addVar(string var_name)
	{
		ParserBay parser = this.parser;
		parser <= vars <= parser.vars.setIm(var_name, true);
		this.parser = parser;
	}
	
	
	/**
	 * Translate
	 */
	string translate(string content)
	{
		Collection<string> result = [];
		
		this.setContent(content);
		
		/* Parse */
		list res = this.parser.parser_expression::readExpression(this.parser);
		BaseOpCode op_code = res.get(1);
		
		/* Translate */
		this.translator.expression.translate(op_code, result);
		
		return [op_code, rs::join("", result)];
	}
	
	
	@Test{}
	void testNumber()
	{
		this.reset();
		
		string content = "1";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testReal()
	{
		this.reset();
		
		string content = "0.1";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testString()
	{
		this.reset();
		
		string content = "\"test\"";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testIdentifier()
	{
		this.reset();
		this.addVar("a");
		
		string content = "a";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr1()
	{
		this.reset();
		
		string content = "this.a";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr2()
	{
		this.reset();
		
		string content = "this.a.b";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr3()
	{
		this.reset();
		
		string content = "static::a";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr4()
	{
		this.reset();
		
		string content = "parent::a";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr5()
	{
		this.reset();
		this.addVar("a");
		
		string content = "a[1]";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr6()
	{
		this.reset();
		this.addVar("a");
		
		string content = "a[1, 2]";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testAttr7()
	{
		this.reset();
		this.addVar("a");
		this.addVar("name");
		
		string content = "a[name]";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testCollection1()
	{
		this.reset();
		
		string content = "[]";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testCollection2()
	{
		this.reset();
		
		string content = "[1, 2, 3]";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
	
	
	@Test{}
	void testCollection3()
	{
		this.reset();
		this.addVar("a");
		this.addVar("b");
		this.addVar("c");
		
		string content = "[a, b, c]";
		list res = this.translate(content);
		AssertHelper::equalValue(content, res.get(1), content);
	}
}