/*!
 *  Bayrell Language
 *
 *  (c) Copyright 2016-2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.bayrell.org/licenses/APACHE-LICENSE-2.0.html
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellLang;

use Runtime.Interfaces.ContextInterface;
use Runtime.Interfaces.ModuleDescriptionInterface;


class ModuleDescription implements ModuleDescriptionInterface
{

	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getName() => "BayrellLang";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	lambda string getModuleVersion() => "0.7.2";
	
	
	
	/**
	 * Returns required modules
	 * @return Map<string>
	 */
	lambda Map<string> requiredModules() =>
	{
		'Runtime': '>=0.2 <1.0',
		'BayrellParser': '>=0.1 <1.0',
	};
	
	
	
	/**
	 * Compatibility with older versions
	 */
	lambda Map<string> getRequiredModules() => static::requiredModules();
	
	
	
	/**
	 * Returns module files load order
	 * @return Collection<string>
	 */
	lambda Collection<string> getModuleFiles() => 
	[
		"BayrellLang.CommonParser",
		"BayrellLang.CommonTranslator",
		"BayrellLang.CoreTranslator",
		"BayrellLang.LangConstant",
		"BayrellLang.ModuleDescription",
		"BayrellLang.Utils",
		"BayrellLang.OpCodes.BaseOpCode",
		"BayrellLang.Exceptions.EndOfStringExpected",
		"BayrellLang.Exceptions.HexNumberExpected",
		"BayrellLang.Exceptions.TwiceDeclareElseError",
		"BayrellLang.OpCodes.OpValue1",
		"BayrellLang.OpCodes.OpValue2",
		"BayrellLang.OpCodes.OpValueString",
		"BayrellLang.OpCodes.OpChilds",
		"BayrellLang.LangBay.HtmlToken",
		"BayrellLang.LangBay.ParserBay",
		"BayrellLang.LangBay.ParserBayFactory",
		"BayrellLang.LangBay.ParserBayNameToken",
		"BayrellLang.LangBay.ParserBayToken",
		"BayrellLang.LangBay.TranslatorBay",
		"BayrellLang.LangBay.TranslatorBayFactory",
		"BayrellLang.LangES6.FunctionStack",
		"BayrellLang.LangES6.TranslatorES6",
		"BayrellLang.LangES6.TranslatorES6Factory",
		"BayrellLang.OpCodes.OpAdd",
		"BayrellLang.OpCodes.OpAnd",
		"BayrellLang.OpCodes.OpAnnotation",
		"BayrellLang.OpCodes.OpAssign",
		"BayrellLang.OpCodes.OpAssignDeclare",
		"BayrellLang.OpCodes.OpBitAnd",
		"BayrellLang.OpCodes.OpBitNot",
		"BayrellLang.OpCodes.OpBitOr",
		"BayrellLang.OpCodes.OpBitXor",
		"BayrellLang.OpCodes.OpBreak",
		"BayrellLang.OpCodes.OpCall",
		"BayrellLang.OpCodes.OpCallAwait",
		"BayrellLang.OpCodes.OpClassDeclare",
		"BayrellLang.OpCodes.OpClassName",
		"BayrellLang.OpCodes.OpClone",
		"BayrellLang.OpCodes.OpComponent",
		"BayrellLang.OpCodes.OpComment",
		"BayrellLang.OpCodes.OpCompare",
		"BayrellLang.OpCodes.OpConcat",
		"BayrellLang.OpCodes.OpContinue",
		"BayrellLang.OpCodes.OpCopyStruct",
		"BayrellLang.OpCodes.OpDelete",
		"BayrellLang.OpCodes.OpDiv",
		"BayrellLang.OpCodes.OpDynamic",
		"BayrellLang.OpCodes.OpFlags",
		"BayrellLang.OpCodes.OpFor",
		"BayrellLang.OpCodes.OpFunctionDeclare",
		"BayrellLang.OpCodes.OpHexNumber",
		"BayrellLang.OpCodes.OpHtmlAttribute",
		"BayrellLang.OpCodes.OpHtmlComment",
		"BayrellLang.OpCodes.OpHtmlEscape",
		"BayrellLang.OpCodes.OpHtmlJson",
		"BayrellLang.OpCodes.OpHtmlRaw",
		"BayrellLang.OpCodes.OpHtmlTag",
		"BayrellLang.OpCodes.OpHtmlText",
		"BayrellLang.OpCodes.OpHtmlView",
		"BayrellLang.OpCodes.OpIdentifier",	
		"BayrellLang.OpCodes.OpIf",
		"BayrellLang.OpCodes.OpIfElse",
		"BayrellLang.OpCodes.OpMap",
		"BayrellLang.OpCodes.OpMethod",
		"BayrellLang.OpCodes.OpMod",
		"BayrellLang.OpCodes.OpMult",
		"BayrellLang.OpCodes.OpNamespace",
		"BayrellLang.OpCodes.OpNew",
		"BayrellLang.OpCodes.OpNope",
		"BayrellLang.OpCodes.OpNot",
		"BayrellLang.OpCodes.OpNumber",
		"BayrellLang.OpCodes.OpOr",
		"BayrellLang.OpCodes.OpPipe",
		"BayrellLang.OpCodes.OpPostDec",
		"BayrellLang.OpCodes.OpPostInc",
		"BayrellLang.OpCodes.OpPow",
		"BayrellLang.OpCodes.OpPreDec",
		"BayrellLang.OpCodes.OpPreInc",
		"BayrellLang.OpCodes.OpPreprocessorCase",
		"BayrellLang.OpCodes.OpPreprocessorSwitch",
		"BayrellLang.OpCodes.OpReturn",
		"BayrellLang.OpCodes.OpShiftLeft",
		"BayrellLang.OpCodes.OpShiftRight",
		"BayrellLang.OpCodes.OpStatic",
		"BayrellLang.OpCodes.OpString",
		"BayrellLang.OpCodes.OpStringItem",
		"BayrellLang.OpCodes.OpSub",
		"BayrellLang.OpCodes.OpTemplateIdentifier",
		"BayrellLang.OpCodes.OpTernary",
		"BayrellLang.OpCodes.OpThrow",
		"BayrellLang.OpCodes.OpTryCatch",
		"BayrellLang.OpCodes.OpTryCatchChilds",
		"BayrellLang.OpCodes.OpUse",
		"BayrellLang.OpCodes.OpVector",
		"BayrellLang.OpCodes.OpWhile",
		"BayrellLang.OpCodes.OpFunctionArrowDeclare",
		"BayrellLang.OpCodes.OpInterfaceDeclare",
		"BayrellLang.OpCodes.OpStructDeclare",
		"BayrellLang.LangNodeJS.TranslatorNodeJS",
		"BayrellLang.LangNodeJS.TranslatorNodeJSFactory",
		"BayrellLang.LangPHP.TranslatorPHP",
		"BayrellLang.LangPHP.TranslatorPHPFactory",
	];
	
	
	
	/**
	 * Returns enities
	 */
	lambda Collection<Dict> entities() => null;
	
	
	
	/**
	 * Init context
	 * @param ContextInterface context
	 */
	public static void initContext(ContextInterface context)
	{
	}
	
	
	
	/**
	 * Called then module registed in context
	 * @param ContextInterface context
	 */
	public static void onRegister(ContextInterface context)
	{
	}
	
	
	
	/**
	 * Returns description interfaces of the current module
	 * @return Vector<string>
	 */	
	public static Vector<string> getInterfaces()
	{
		return [
			'Runtime.Interfaces.ModuleDescriptionInterface',
		];
	}

	
	
	/**
	 * Called then context read config
	 * @param ContextInterface context
	 * @param Map<mixed> config
	 */
	public static void onReadConfig(ContextInterface context, Map<mixed> config)
	{
	}
}