/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2024 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangNode;

use BayLang.SaveOpCode;
use BayLang.LangES6.TranslatorES6;
use BayLang.LangES6.TranslatorES6Expression;
use BayLang.LangES6.TranslatorES6Operator;
use BayLang.LangES6.TranslatorES6Program;
use BayLang.OpCodes.BaseOpCode;
use BayLang.OpCodes.OpCollection;
use BayLang.OpCodes.OpDict;
use BayLang.OpCodes.OpDictPair;
use BayLang.OpCodes.OpIdentifier;
use BayLang.OpCodes.OpTypeIdentifier;


static class TranslatorNodeExpression extends TranslatorES6Expression
{
	
	
	/**
	 * OpIdentifier
	 */
	pure list<TranslatorES6, string> OpIdentifier(TranslatorES6 t, OpIdentifier op_code)
	{
		if (op_code.value == "@") return [t, "ctx"];
		if (op_code.value == "_") return [t, "ctx.constructor.translate"];
		if (op_code.value == "log") return [t, "console.log"];
		
		if (t.modules.has(op_code.value) or op_code.kind == OpIdentifier::KIND_SYS_TYPE)
		{
			string module_name = op_code.value;
			string new_module_name = static::findModuleName(t, module_name);
			if (module_name != new_module_name)
			{
				list res = t::addSaveOpCode
				(
					t,
					{
						"op_code": op_code,
						"var_content": static::useModuleName(t, module_name),
					}
				);
				t = res[0];
				string var_name = res[1];
				return [t, var_name];
			}
		}
		
		return [t, op_code.value];
	}
	
	
	
	/**
	 * OpTypeIdentifier
	 */
	pure list<TranslatorES6, string> OpTypeIdentifier(TranslatorES6 t, OpTypeIdentifier op_code)
	{
		string var_name = "";
		
		if (op_code.entity_name.names.count() > 0)
		{
			string module_name = op_code.entity_name.names.first();
			string new_module_name = static::findModuleName(t, module_name);
			if (module_name != new_module_name)
			{
				list res = t::addSaveOpCode
				(
					t,
					{
						"var_content": static::useModuleName(t, module_name),
					}
				);
				t = res[0];
				var_name = res[1];
			}
		}
		
		if (var_name == "")
		{
			var_name = rs::join(".", op_code.entity_name.names);
		}
		
		return [t, var_name];
	}
	
	
}