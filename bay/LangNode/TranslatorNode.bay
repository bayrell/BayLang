/*!
 *  BayLang Technology
 *
 *  (c) Copyright 2016-2025 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayLang.LangNode;

use Runtime.BaseStruct;
use BayLang.CoreTranslator;
use BayLang.SaveOpCode;
use BayLang.LangES6.TranslatorES6;
use BayLang.LangNode.TranslatorNodeExpression;
use BayLang.LangNode.TranslatorNodeProgram;
use BayLang.OpCodes.BaseOpCode;


class TranslatorNode extends TranslatorES6
{
	TranslatorNodeExpression expression = new TranslatorNodeExpression(this);
	TranslatorNodeProgram program = new TranslatorNodeProgram(this);
	
	/* Flags */
	Dict use_modules = {
		"global": {},
		"local": {},
	};
	bool use_module_name = true;
	bool use_window = false;
	
	
	/**
	 * Constructor
	 */
	void constructor()
	{
		parent();
		this.preprocessor_flags.set("BACKEND", true);
		this.preprocessor_flags.set("ES6", false);
		this.preprocessor_flags.set("NODEJS", true);
	}
	
	
	/**
	 * Set use modules
	 */
	Dict setUseModules(Dict use_modules = null)
	{
		if (use_modules == null) use_modules = {};
		Dict save_use_modules = this.use_modules.get("local").copy();
		this.use_modules.set("local", use_modules);
		return save_use_modules;
	}
	
	
	/**
	 * Use module
	 */
	string useModule(string module_name)
	{
		bool is_global = false;
		if (module_name == this.current_class_name) return module_name;
		if (module_name == "Runtime.rtl" or module_name == "Runtime.rs")
		{
			is_global = true;
		}
		Collection arr = rs::split(".", module_name);
		string alias_name = arr.last();
		if (this.uses.has(alias_name))
		{
			Dict modules = this.use_modules.get(is_global ? "global" : "local");
			modules.set(alias_name, module_name);
			return alias_name;
		}
		return module_name;
	}
	
	
	/**
	 * Add use modules
	 */
	void addUseModules(Collection<string> result, bool is_multiline = true, Dict use_modules = null)
	{
		if (use_modules == null) use_modules = this.use_modules.get("local");
		Collection keys = rtl::list(use_modules.keys());
		for (int i=0; i<keys.count(); i++)
		{
			string alias_name = keys.get(i);
			string module_name = use_modules.get(alias_name);
			if (is_multiline) result.push(this.newLine());
			result.push("const " ~ alias_name ~ " = use(" ~
				this.toString(module_name) ~ ");");
		}
	}
	
	
	/**
	 * Translate BaseOpCode
	 */
	string translate(BaseOpCode op_code)
	{
		Collection<string> result = [];
		result.push('"use strict;"');
		result.push(this.newLine());
		result.push("const use = require('bay-lang').use;");
		/*result.push(this.newLine());
		result.push("const {rtl, rs} = use.rtl();");*/
		
		/* Translate program */
		Collection result1 = [];
		result1.push(this.newLine());
		this.program.translate(op_code, result1);
		
		/* Add use */
		this.addUseModules(result, true, this.use_modules.get("global"));
		this.addUseModules(result);
		result.appendItems(result1);
		
		/* Add export */
		this.program.addModuleExports(result);
		
		return rs::join("", result);
	}
}